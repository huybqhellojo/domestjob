
{
  ".env": "",
  "README.md": "# Firebase Studio\n\nThis is a NextJS starter in Firebase Studio.\n\nTo get started, take a look at src/app/page.tsx.\n",
  "apphosting.yaml": "# Settings to manage and configure a Firebase App Hosting backend.\n# https://firebase.google.com/docs/app-hosting/configure\n\nrunConfig:\n  # Increase this value if you'd like to automatically spin up\n  # more instances in response to increased traffic.\n  maxInstances: 1\n",
  "components.json": "{\n  \"$schema\": \"https://ui.shadcn.com/schema.json\",\n  \"style\": \"default\",\n  \"rsc\": true,\n  \"tsx\": true,\n  \"tailwind\": {\n    \"config\": \"tailwind.config.ts\",\n    \"css\": \"src/app/globals.css\",\n    \"baseColor\": \"neutral\",\n    \"cssVariables\": true,\n    \"prefix\": \"\"\n  },\n  \"aliases\": {\n    \"components\": \"@/components\",\n    \"utils\": \"@/lib/utils\",\n    \"ui\": \"@/components/ui\",\n    \"lib\": \"@/lib\",\n    \"hooks\": \"@/hooks\"\n  },\n  \"iconLibrary\": \"lucide\"\n}\n",
  "next.config.ts": "\nimport type {NextConfig} from 'next';\n\nconst nextConfig: NextConfig = {\n  /* config options here */\n  devIndicators: false,\n  typescript: {\n    ignoreBuildErrors: true,\n  },\n  eslint: {\n    ignoreDuringBuilds: true,\n  },\n  images: {\n    remotePatterns: [\n      {\n        protocol: 'https',\n        hostname: 'placehold.co',\n        port: '',\n        pathname: '/**',\n      },\n    ],\n  },\n};\n\nexport default nextConfig;\n\n    \n",
  "package.json": "\n{\n  \"name\": \"nextn\",\n  \"version\": \"0.1.0\",\n  \"private\": true,\n  \"scripts\": {\n    \"dev\": \"next dev --turbopack -p 9002\",\n    \"build\": \"next build\",\n    \"start\": \"next start -p 3606\",\n    \"lint\": \"next lint\",\n    \"typecheck\": \"tsc --noEmit\"\n  },\n  \"dependencies\": {\n    \"@genkit-ai/googleai\": \"^1.14.1\",\n    \"@genkit-ai/next\": \"^1.14.1\",\n    \"@hookform/resolvers\": \"^4.1.3\",\n    \"@radix-ui/react-accordion\": \"^1.2.3\",\n    \"@radix-ui/react-alert-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-avatar\": \"^1.1.3\",\n    \"@radix-ui/react-checkbox\": \"^1.1.4\",\n    \"@radix-ui/react-collapsible\": \"^1.1.11\",\n    \"@radix-ui/react-dialog\": \"^1.1.6\",\n    \"@radix-ui/react-dropdown-menu\": \"^2.1.6\",\n    \"@radix-ui/react-label\": \"^2.1.2\",\n    \"@radix-ui/react-menubar\": \"^1.1.6\",\n    \"@radix-ui/react-popover\": \"^1.1.6\",\n    \"@radix-ui/react-progress\": \"^1.1.2\",\n    \"@radix-ui/react-radio-group\": \"^1.2.3\",\n    \"@radix-ui/react-scroll-area\": \"^1.2.3\",\n    \"@radix-ui/react-select\": \"^2.1.6\",\n    \"@radix-ui/react-separator\": \"^1.1.2\",\n    \"@radix-ui/react-slider\": \"^1.2.3\",\n    \"@radix-ui/react-slot\": \"^1.2.3\",\n    \"@radix-ui/react-switch\": \"^1.1.3\",\n    \"@radix-ui/react-tabs\": \"^1.1.3\",\n    \"@radix-ui/react-toast\": \"^1.2.6\",\n    \"@radix-ui/react-tooltip\": \"^1.1.8\",\n    \"@vladmandic/face-api\": \"^1.7.12\",\n    \"class-variance-authority\": \"^0.7.1\",\n    \"clsx\": \"^2.1.1\",\n    \"cmdk\": \"^1.0.0\",\n    \"date-fns\": \"^3.6.0\",\n    \"dotenv\": \"^16.5.0\",\n    \"embla-carousel-react\": \"^8.6.0\",\n    \"firebase\": \"^11.9.1\",\n    \"genkit\": \"^1.14.1\",\n    \"lucide-react\": \"^0.475.0\",\n    \"next\": \"15.3.3\",\n    \"patch-package\": \"^8.0.0\",\n    \"react\": \"^18.3.1\",\n    \"react-day-picker\": \"^8.10.1\",\n    \"react-dom\": \"^18.3.1\",\n    \"react-hook-form\": \"^7.54.2\",\n    \"recharts\": \"^2.15.1\",\n    \"tailwind-merge\": \"^3.0.1\",\n    \"tailwindcss-animate\": \"^1.0.7\",\n    \"wav\": \"^1.0.2\",\n    \"zod\": \"^3.24.2\"\n  },\n  \"devDependencies\": {\n    \"@types/node\": \"^20\",\n    \"@types/react\": \"^18\",\n    \"@types/react-dom\": \"^18\",\n    \"@types/wav\": \"^1.0.2\",\n    \"genkit-cli\": \"^1.14.1\",\n    \"postcss\": \"^8\",\n    \"tailwindcss\": \"^3.4.1\",\n    \"typescript\": \"^5\"\n  }\n}\n",
  "src/ai/dev.ts": "// Flows will be imported for their side effects in this file.\nimport './flows/create-profile-flow';\nimport './flows/create-profile-from-voice-flow';\n",
  "src/ai/flows/create-profile-flow.ts": "\n'use server';\n/**\n * @fileOverview An AI flow to generate a candidate profile from a resume/CV file or text.\n *\n * - createProfile - A function that handles the profile creation process.\n * - CreateProfileInput - The input type for the createProfile function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport { z } from 'zod';\nimport { CandidateProfileSchema, type CandidateProfile } from '@/ai/schemas';\n\nconst CreateProfileInputSchema = z.object({\n  document: z\n    .string()\n    .optional()\n    .describe(\n      \"A CV or resume file, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'\"\n    ),\n  text: z\n    .string()\n    .optional()\n    .describe('A string containing the user\\'s resume or self-description.'),\n});\nexport type CreateProfileInput = z.infer<typeof CreateProfileInputSchema>;\n\nexport async function createProfile(\n  input: CreateProfileInput\n): Promise<CandidateProfile> {\n  return createProfileFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'createProfilePrompt',\n  input: {schema: CreateProfileInputSchema},\n  output: {schema: CandidateProfileSchema, format: 'json'},\n  model: 'googleai/gemini-2.0-flash',\n  prompt: `You are an expert resume analyst. Your task is to extract structured information from the provided document or text.\n  Analyze the content carefully and populate all the fields in the provided JSON schema.\n  Pay close attention to dates, job titles, and skills.\n\n  If some information is not available, leave the corresponding string fields empty and array fields as empty arrays.\n  \n  {{#if document}}\n  Document:\n  {{media url=document}}\n  {{/if}}\n\n  {{#if text}}\n  Text content:\n  {{{text}}}\n  {{/if}}\n  `,\n});\n\nconst createProfileFlow = ai.defineFlow(\n  {\n    name: 'createProfileFlow',\n    inputSchema: CreateProfileInputSchema,\n    outputSchema: CandidateProfileSchema,\n  },\n  async (input) => {\n    if (!input.document && !input.text) {\n      throw new Error(\"Either a document or text must be provided.\");\n    }\n    const {output} = await prompt(input);\n    if (!output) {\n        throw new Error(\"The AI failed to generate a profile. Please try again.\");\n    }\n    return output;\n  }\n);\n",
  "src/ai/flows/create-profile-from-voice-flow.ts": "\n'use server';\n/**\n * @fileOverview An AI flow to generate a candidate profile from a voice recording.\n *\n * - createProfileFromVoice - A function that handles the profile creation process from transcribed text.\n * - CreateProfileFromVoiceInput - The input type for the createProfileFromVoice function.\n * - textToSpeech - A function to convert text to speech audio data.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'zod';\nimport { CandidateProfileSchema, type CandidateProfile } from '@/ai/schemas';\nimport wav from 'wav';\n\nexport type CreateProfileFromVoiceInput = z.infer<typeof z.string>;\n\nexport async function createProfileFromVoice(\n  input: CreateProfileFromVoiceInput\n): Promise<CandidateProfile> {\n  return createProfileFromVoiceFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'createProfileFromVoicePrompt',\n  input: {schema: z.string()},\n  output: {schema: CandidateProfileSchema, format: 'json'},\n  model: 'googleai/gemini-2.0-flash',\n  prompt: `You are an expert recruiter specializing in the Vietnamese and Japanese labor markets. Your task is to analyze the provided text, which is a transcription of a candidate's voice, and extract structured information to create a professional profile.\n\n  Analyze the content carefully and populate all the fields in the provided JSON schema. Pay close attention to details like visa status (e.g., \"Thực tập sinh\", \"Tokutei\"), desired job location (e.g., \"Kanagawa\", \"đầu Nhật\"), contract end dates, and desired industries (\"thực phẩm\").\n\n  Infer information when possible. For example:\n  - If a user says \"Thực tập sinh tháng 10 hết hợp đồng\", you can infer their current role is \"Thực tập sinh\" and they are looking for a new job starting around October.\n  - \"muốn tìm đơn thực phẩm Tokutei đầu Nhật Kanagawa\" means their desiredIndustry is \"Thực phẩm\", desired visa is \"Tokutei Ginou\", and location is \"Kanagawa, Nhật Bản\". \"Đầu Nhật\" means they are already in Japan.\n\n  Populate the 'about' section with a summary of the user's request and current situation.\n\n  If some information is not available, leave the corresponding string fields empty and array fields as empty arrays.\n\n  Candidate's statement:\n  \"{{{input}}}\"\n  `,\n});\n\nconst createProfileFromVoiceFlow = ai.defineFlow(\n  {\n    name: 'createProfileFromVoiceFlow',\n    inputSchema: z.string(),\n    outputSchema: CandidateProfileSchema,\n  },\n  async input => {\n    if (!input) {\n      throw new Error('A voice transcription must be provided.');\n    }\n    const {output} = await prompt(input);\n    if (!output) {\n      throw new Error('The AI failed to generate a profile. Please try again.');\n    }\n    return output;\n  }\n);\n\n\n// Optional: Text-to-speech flow\nexport const textToSpeechFlow = ai.defineFlow(\n  {\n    name: 'textToSpeechFlow',\n    inputSchema: z.string(),\n    outputSchema: z.any(),\n  },\n  async query => {\n    const {media} = await ai.generate({\n      model: 'googleai/gemini-2.5-flash-preview-tts',\n      config: {\n        responseModalities: ['AUDIO'],\n        speechConfig: {\n          voiceConfig: {\n            prebuiltVoiceConfig: {voiceName: 'Algenib'}, // Choose a suitable voice\n          },\n        },\n      },\n      prompt: query,\n    });\n    if (!media) {\n      throw new Error('No media returned from TTS model');\n    }\n    const audioBuffer = Buffer.from(\n      media.url.substring(media.url.indexOf(',') + 1),\n      'base64'\n    );\n    return {\n      media: 'data:audio/wav;base64,' + (await toWav(audioBuffer)),\n    };\n  }\n);\n\nasync function toWav(\n  pcmData: Buffer,\n  channels = 1,\n  rate = 24000,\n  sampleWidth = 2\n): Promise<string> {\n  return new Promise((resolve, reject) => {\n    const writer = new wav.Writer({\n      channels,\n      sampleRate: rate,\n      bitDepth: sampleWidth * 8,\n    });\n    const bufs: any[] = [];\n    writer.on('error', reject);\n    writer.on('data', d => bufs.push(d));\n    writer.on('end', () => resolve(Buffer.concat(bufs).toString('base64')));\n    writer.write(pcmData);\n    writer.end();\n  });\n}\n",
  "src/ai/genkit.ts": "import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.0-flash',\n});\n",
  "src/ai/schemas.ts": "\nimport { z } from 'zod';\n\nexport const CandidateProfileSchema = z.object({\n  name: z.string().describe('The full name of the candidate.'),\n  headline: z.string().describe('A professional headline for the candidate (e.g., \"Software Engineer at Google\").'),\n  location: z.string().describe('The city and country where the candidate is located.'),\n  about: z.string().describe('A brief summary or about section from the CV.'),\n  education: z.array(z.object({\n    school: z.string().describe('The name of the university or institution.'),\n    degree: z.string().describe('The degree obtained (e.g., \"Bachelor of Science in Computer Science\").'),\n    gradYear: z.number().describe('The year of graduation.'),\n  })).describe('A list of educational qualifications.'),\n  experience: z.array(z.object({\n    company: z.string().describe('The name of the company.'),\n    role: z.string().describe('The job title or role.'),\n    period: z.string().describe('The employment period (e.g., \"06/2023 - 09/2023\").'),\n    description: z.string().describe('A description of the responsibilities and achievements in the role.'),\n  })).describe('A list of work experiences.'),\n  personalInfo: z.object({\n    birthYear: z.number().describe('The birth year of the candidate.'),\n    gender: z.string().describe('The gender of the candidate.'),\n    phone: z.string().describe('The phone number of the candidate.'),\n    language: z.string().describe('Languages spoken and proficiency (e.g., \"English - Fluent\").'),\n    dateOfBirth: z.string().optional().describe('The full date of birth (e.g., \"12/12/2006\").'),\n    height: z.string().optional().describe('The height of the candidate (e.g., \"165 cm\").'),\n    weight: z.string().optional().describe('The weight of the candidate (e.g., \"55 kg\").'),\n    tattooStatus: z.string().optional().describe('Tattoo status (e.g., \"Xăm nhỏ\", \"Không có\").'),\n    hepatitisBStatus: z.string().optional().describe('Hepatitis B status (e.g., \"Không viêm gan B\").'),\n  }),\n  interests: z.array(z.string()).describe('A list of professional interests or industries.'),\n  skills: z.array(z.string()).describe('A list of key skills.'),\n  certifications: z.array(z.string()).describe('A list of certifications or awards.'),\n  desiredIndustry: z.string().describe('The desired industry for future roles.'),\n  aspirations: z.object({\n    desiredLocation: z.string().optional().describe('The desired work location (e.g., \"Osaka\").'),\n    desiredSalary: z.string().optional().describe('The desired basic salary (e.g., \"180,000 yên\").'),\n    desiredNetSalary: z.string().optional().describe('The desired net salary (e.g., \"160,000 yên\").'),\n    financialAbility: z.string().optional().describe('Financial ability (e.g., \"90 triệu\").'),\n    interviewLocation: z.string().optional().describe('The location for job interviews (e.g., \"Hà Nội\").'),\n    specialAspirations: z.string().optional().describe('Special requests or aspirations (e.g., \"Tăng ca, hỗ trợ...\").'),\n  }).optional(),\n  notes: z.string().optional().describe('Additional notes or descriptions.'),\n});\n\nexport type CandidateProfile = z.infer<typeof CandidateProfileSchema>;\n",
  "src/app/about/page.tsx": "import { Button } from '@/components/ui/button';\nimport type { Metadata } from 'next';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Lightbulb, Target, Users, TrendingUp, Handshake, BarChart, FileSignature } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\nexport const metadata: Metadata = {\n  title: 'Về HelloJob',\n  description: 'Tìm hiểu về sứ mệnh, tầm nhìn, giá trị cốt lõi và đội ngũ tâm huyết của HelloJob trong việc kết nối nguồn nhân lực Việt Nam với thị trường Nhật Bản.',\n};\n\n\nconst teamMembers = [\n  {\n    name: 'Trần Tuấn Anh',\n    role: 'Founder & CEO',\n    avatar: 'https://placehold.co/200x200.png',\n    dataAiHint: 'ceo portrait',\n  },\n  {\n    name: 'Lê Thị Bích',\n    role: 'Head of Product',\n    avatar: 'https://placehold.co/200x200.png',\n    dataAiHint: 'product manager portrait',\n  },\n  {\n    name: 'Nguyễn Văn Cường',\n    role: 'CTO',\n    avatar: 'https://placehold.co/200x200.png',\n    dataAiHint: 'cto portrait',\n  },\n   {\n    name: 'Phạm Thị Dung',\n    role: 'Head of Marketing',\n    avatar: 'https://placehold.co/200x200.png',\n    dataAiHint: 'marketing head portrait',\n  },\n];\n\nconst values = [\n    {\n        icon: Users,\n        title: \"Lấy người dùng làm trung tâm\",\n        description: \"Mọi sản phẩm, tính năng đều được xây dựng dựa trên nhu cầu và trải nghiệm của người lao động và đối tác tuyển dụng.\"\n    },\n    {\n        icon: TrendingUp,\n        title: \"Tăng trưởng bền vững\",\n        description: \"Chúng tôi không chỉ giúp người lao động tìm việc, mà còn xây dựng lộ trình phát triển sự nghiệp lâu dài và bền vững.\"\n    },\n    {\n        icon: Handshake,\n        title: \"Đối tác tin cậy\",\n        description: \"Xây dựng mối quan hệ hợp tác minh bạch, hiệu quả và cùng có lợi với các đối tác tuyển dụng và nhượng quyền.\"\n    }\n]\n\nexport default function AboutPage() {\n  return (\n    <>\n      {/* Hero Section */}\n      <section className=\"w-full bg-primary text-primary-foreground py-24 md:py-32\">\n        <div className=\"container mx-auto px-4 md:px-6 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold\">Về HelloJob</h1>\n          <p className=\"text-lg md:text-xl max-w-3xl mx-auto mt-4 text-primary-foreground/80\">\n            Chúng tôi là cầu nối vững chắc giữa nguồn nhân lực chất lượng cao Việt Nam và các cơ hội việc làm tại thị trường Nhật Bản.\n          </p>\n        </div>\n      </section>\n\n      {/* Mission & Vision Section */}\n      <section className=\"py-20 md:py-28 bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"grid md:grid-cols-2 gap-16 items-center\">\n            <div className=\"relative aspect-square\">\n              <Image\n                src=\"https://placehold.co/600x600.png\"\n                alt=\"Đội ngũ HelloJob\"\n                fill\n                className=\"object-cover rounded-lg shadow-xl\"\n                data-ai-hint=\"diverse team working\"\n              />\n            </div>\n            <div className=\"space-y-8\">\n              <div>\n                <Target className=\"h-12 w-12 text-accent-orange mb-4\" />\n                <h2 className=\"text-3xl font-headline font-bold text-primary mb-2\">Sứ mệnh của chúng tôi</h2>\n                <p className=\"text-muted-foreground text-lg\">\n                  Sứ mệnh của HelloJob là định hình tư duy, nâng cao kỹ năng và xây dựng lộ trình sự nghiệp rõ ràng cho người lao động Việt Nam, đồng thời cung cấp giải pháp tuyển dụng hiệu quả, minh bạch cho các đối tác tuyển dụng Kỹ năng Đặc định (Tokutei Ginou) tại Nhật Bản.\n                </p>\n              </div>\n              <div>\n                <Lightbulb className=\"h-12 w-12 text-accent-green mb-4\" />\n                <h2 className=\"text-3xl font-headline font-bold text-primary mb-2\">Tầm nhìn</h2>\n                <p className=\"text-muted-foreground text-lg\">\n                  Trở thành nền tảng công nghệ hàng đầu tại Việt Nam trong lĩnh vực cung ứng và phát triển nguồn nhân lực, đặc biệt là cho thị trường lao động tay nghề cao tại Nhật Bản và các quốc gia phát triển.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </section>\n      \n      {/* Values Section */}\n       <section className=\"py-20 md:py-28 bg-background\">\n         <div className=\"container mx-auto px-4 md:px-6\">\n            <div className=\"text-center mb-16\">\n                 <h2 className=\"text-3xl font-headline font-bold text-primary\">Giá trị cốt lõi</h2>\n                 <p className=\"text-muted-foreground mt-4 max-w-3xl mx-auto text-lg\">Những nguyên tắc định hướng mọi hành động và quyết định của chúng tôi.</p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8 text-center\">\n                {values.map(value => (\n                    <Card key={value.title} className=\"p-8 shadow-lg hover:shadow-xl transition-shadow\">\n                         <value.icon className=\"h-16 w-16 text-primary mx-auto mb-4\"/>\n                         <h3 className=\"text-xl font-bold font-headline mb-2\">{value.title}</h3>\n                         <p className=\"text-muted-foreground\">{value.description}</p>\n                    </Card>\n                ))}\n            </div>\n         </div>\n      </section>\n\n      {/* Team Section */}\n      <section className=\"py-20 md:py-28 bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl font-headline font-bold text-primary\">Đội ngũ của chúng tôi</h2>\n            <p className=\"text-muted-foreground mt-4 max-w-3xl mx-auto text-lg\">\n              Những con người tâm huyết đứng sau thành công của HelloJob, luôn nỗ lực vì sự phát triển của bạn.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n            {teamMembers.map((member) => (\n              <div key={member.name} className=\"text-center\">\n                <div className=\"relative h-32 w-32 md:h-40 md:w-40 mx-auto mb-4\">\n                   <Image\n                    src={member.avatar}\n                    alt={member.name}\n                    fill\n                    className=\"rounded-full object-cover shadow-lg\"\n                    data-ai-hint={member.dataAiHint}\n                  />\n                </div>\n                <h3 className=\"font-bold text-lg\">{member.name}</h3>\n                <p className=\"text-primary font-semibold\">{member.role}</p>\n              </div>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"bg-accent text-white py-20 md:py-28\">\n        <div className=\"container mx-auto px-4 md:px-6 text-center\">\n            <h2 className=\"text-3xl font-headline font-bold mb-4\">Trở thành đối tác của HelloJob</h2>\n            <p className=\"text-white/80 mb-8 max-w-2xl mx-auto text-lg\">\n                Bạn là một nhà tuyển dụng, một công ty phái cử hay một nhà đầu tư có tầm nhìn? Hãy liên hệ với chúng tôi để cùng khai thác tiềm năng của thị trường.\n            </p>\n            <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                 <Button asChild size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                    <Link href=\"/franchise\">Tìm hiểu mô hình Nhượng quyền <FileSignature/></Link>\n                </Button>\n                <Button asChild size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white/20 hover:text-white\">\n                    <Link href=\"/employers\">Dành cho Đối tác tuyển dụng <BarChart/></Link>\n                </Button>\n            </div>\n        </div>\n      </section>\n    </>\n  );\n}\n",
  "src/app/ai-profile/client.tsx": "\n'use client';\n\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Upload, FileText, FileUp, Sparkles, Send, Mic, Loader2, StopCircle } from \"lucide-react\";\nimport Image from \"next/image\";\nimport { useRouter } from \"next/navigation\";\nimport { useState, useEffect, useRef } from \"react\";\nimport { createProfile } from \"@/ai/flows/create-profile-flow\";\nimport { createProfileFromVoice } from \"@/ai/flows/create-profile-from-voice-flow\";\nimport { type CandidateProfile } from \"@/ai/schemas\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogHeader,\n    DialogTitle,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport * as faceapi from '@vladmandic/face-api';\n\ntype ProfileWithAvatar = CandidateProfile & { avatarUrl?: string };\n\nconst FACEAPI_MODEL_URL = '/models';\n\ntype RecordingStatus = 'idle' | 'recording' | 'processing' | 'error';\n\nexport default function AiProfileClientPage() {\n    const router = useRouter();\n    const { toast } = useToast();\n    const [isLoading, setIsLoading] = useState(false);\n    const [loadingMessage, setLoadingMessage] = useState(\"Đang phân tích...\");\n    const [fileInputKey, setFileInputKey] = useState(Date.now());\n    const [analysisResult, setAnalysisResult] = useState<ProfileWithAvatar | null>(null);\n    const [isResultDialogOpen, setIsResultDialogOpen] = useState(false);\n    const [textInput, setTextInput] = useState('');\n    const [modelsLoaded, setModelsLoaded] = useState(false);\n    \n    // Voice recording state\n    const [recordingStatus, setRecordingStatus] = useState<RecordingStatus>('idle');\n    const mediaRecorderRef = useRef<MediaRecorder | null>(null);\n    const audioChunksRef = useRef<Blob[]>([]);\n\n    useEffect(() => {\n        const loadModels = async () => {\n            try {\n                await Promise.all([\n                    faceapi.nets.ssdMobilenetv1.loadFromUri(FACEAPI_MODEL_URL),\n                    faceapi.nets.faceLandmark68Net.loadFromUri(FACEAPI_MODEL_URL),\n                    faceapi.nets.faceRecognitionNet.loadFromUri(FACEAPI_MODEL_URL)\n                ]);\n                setModelsLoaded(true);\n                console.log(\"Face-api models loaded successfully\");\n            } catch (error) {\n                console.error(\"Failed to load face-api models:\", error);\n                toast({\n                    variant: \"destructive\",\n                    title: \"Lỗi tải mô hình AI\",\n                    description: \"Không thể tải các mô hình nhận dạng khuôn mặt. Vui lòng làm mới trang.\",\n                });\n            }\n        };\n        loadModels();\n    }, [toast]);\n    \n    const extractAvatar = async (imageElement: HTMLImageElement): Promise<string | null> => {\n        if (!modelsLoaded) {\n            toast({\n                variant: \"destructive\",\n                title: \"Mô hình chưa sẵn sàng\",\n                description: \"Mô hình AI cho việc nhận dạng khuôn mặt chưa được tải xong. Vui lòng đợi một lát và thử lại.\",\n            });\n            return null;\n        }\n\n        const detections = await faceapi.detectAllFaces(imageElement).withFaceLandmarks().withFaceDescriptors();\n        if (!detections || detections.length === 0) {\n            console.log(\"No faces detected.\");\n            return null;\n        }\n\n        // Use the largest face found\n        detections.sort((a, b) => b.detection.box.area - a.detection.box.area);\n        const bestDetection = detections[0];\n        \n        const canvas = faceapi.createCanvasFromMedia(imageElement);\n        const { width, height } = imageElement;\n        canvas.width = width;\n        canvas.height = height;\n        \n        const displaySize = { width, height };\n        faceapi.matchDimensions(canvas, displaySize);\n\n        const resizedDetections = faceapi.resizeResults(bestDetection, displaySize);\n        const box = resizedDetections.detection.box;\n\n        // Create a square bounding box with padding\n        const padding = 0.2;\n        const size = Math.max(box.width, box.height) * (1 + 2 * padding);\n        const centerX = box.x + box.width / 2;\n        const centerY = box.y + box.height / 2;\n        \n        const cropX = Math.max(0, centerX - size / 2);\n        const cropY = Math.max(0, centerY - size / 2);\n\n        const cropCanvas = document.createElement('canvas');\n        cropCanvas.width = size;\n        cropCanvas.height = size;\n        const ctx = cropCanvas.getContext('2d');\n        \n        if (ctx) {\n            ctx.drawImage(imageElement, cropX, cropY, size, size, 0, 0, size, size);\n            return cropCanvas.toDataURL('image/jpeg');\n        }\n\n        return null;\n    };\n\n\n    const handleFileChange = async (event: React.ChangeEvent<HTMLInputElement>) => {\n        const file = event.target.files?.[0];\n        if (!file) return;\n\n        setIsLoading(true);\n\n        try {\n            setLoadingMessage(\"Đang đọc và phân tích tệp...\");\n            const dataUri = await new Promise<string>((resolve, reject) => {\n                 const fileReader = new FileReader();\n                 fileReader.onload = (e) => resolve(e.target?.result as string);\n                 fileReader.onerror = (e) => reject(new Error(\"File reading failed\"));\n                 fileReader.readAsDataURL(file);\n            });\n            \n            // Start both AI profile creation and avatar extraction in parallel\n            setLoadingMessage(\"AI đang trích xuất thông tin...\");\n            const profilePromise = createProfile({ document: dataUri });\n\n            let avatarPromise: Promise<string | null> = Promise.resolve(null);\n            if (file.type.startsWith('image/')) {\n                 avatarPromise = new Promise((resolve) => {\n                    const img = document.createElement('img');\n                    img.onload = async () => {\n                        const avatarUrl = await extractAvatar(img);\n                        resolve(avatarUrl);\n                    };\n                    img.onerror = () => resolve(null);\n                    img.src = dataUri;\n                });\n            }\n            \n            // Wait for both promises to complete\n            const [profileData, avatarUrl] = await Promise.all([profilePromise, avatarPromise]);\n\n            const finalProfile: ProfileWithAvatar = { ...profileData, avatarUrl: avatarUrl || undefined };\n\n            setAnalysisResult(finalProfile);\n            setIsResultDialogOpen(true);\n             toast({\n                title: \"Phân tích thành công!\",\n                description: \"AI đã phân tích và trích xuất thông tin từ tệp của bạn.\",\n            });\n\n        } catch (error: any) {\n            console.error(\"Profile Generation Error:\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"Đã có lỗi xảy ra\",\n                description: error.message || \"Không thể xử lý tệp của bạn. Vui lòng thử lại.\",\n            });\n        } finally {\n            setIsLoading(false);\n            setFileInputKey(Date.now());\n            setLoadingMessage(\"Đang phân tích...\");\n        }\n    };\n\n    const handleTextSubmit = async () => {\n        if (!textInput.trim()) {\n            toast({\n                variant: \"destructive\",\n                title: \"Vui lòng nhập thông tin\",\n                description: \"Bạn cần nhập mô tả bản thân hoặc dán CV vào ô văn bản.\",\n            });\n            return;\n        }\n\n        setIsLoading(true);\n        setLoadingMessage(\"AI đang phân tích văn bản...\");\n        try {\n            const profileData = await createProfile({ text: textInput });\n            setAnalysisResult(profileData); // No avatar from text input\n            setIsResultDialogOpen(true);\n             toast({\n                title: \"Phân tích thành công!\",\n                description: \"AI đã phân tích và trích xuất thông tin từ văn bản của bạn.\",\n            });\n\n        } catch (error) {\n            console.error(\"AI Profile Generation Error (Text):\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"Đã có lỗi xảy ra\",\n                description: \"Không thể phân tích văn bản. Vui lòng thử lại.\",\n            });\n        } finally {\n            setIsLoading(false);\n            setLoadingMessage(\"Đang phân tích...\");\n        }\n    };\n\n    const handleProceed = () => {\n        if (analysisResult) {\n            localStorage.setItem('generatedCandidateProfile', JSON.stringify(analysisResult));\n            router.push('/candidate-profile');\n        }\n    };\n\n    const startRecording = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({ audio: true });\n            mediaRecorderRef.current = new MediaRecorder(stream);\n            audioChunksRef.current = [];\n\n            mediaRecorderRef.current.ondataavailable = (event) => {\n                audioChunksRef.current.push(event.data);\n            };\n\n            mediaRecorderRef.current.onstop = async () => {\n                setRecordingStatus('processing');\n                setLoadingMessage('Đang xử lý giọng nói...');\n                const audioBlob = new Blob(audioChunksRef.current, { type: 'audio/webm' });\n                \n                try {\n                    // This is where you would normally send the audio to a speech-to-text API.\n                    // For this example, we will simulate the process and use a hardcoded text\n                    // to call our new Genkit flow.\n                    const transcribedText = \"Thực tập sinh tháng 10 hết hợp đồng, muốn tìm đơn thực phẩm Tokutei đầu Nhật Kanagawa\";\n\n                    const profileData = await createProfileFromVoice(transcribedText);\n                    setAnalysisResult(profileData);\n                    setIsResultDialogOpen(true);\n                    toast({\n                        title: \"Phân tích giọng nói thành công!\",\n                        description: \"AI đã trích xuất thông tin từ bản ghi âm của bạn.\",\n                    });\n\n                } catch (error) {\n                    console.error(\"Voice Profile Generation Error:\", error);\n                    toast({\n                        variant: \"destructive\",\n                        title: \"Lỗi phân tích giọng nói\",\n                        description: \"Không thể xử lý bản ghi âm của bạn.\",\n                    });\n                } finally {\n                    setRecordingStatus('idle');\n                    setLoadingMessage('Đang phân tích...');\n                }\n            };\n\n            mediaRecorderRef.current.start();\n            setRecordingStatus('recording');\n        } catch (error) {\n            console.error(\"Error accessing microphone:\", error);\n            toast({\n                variant: \"destructive\",\n                title: \"Lỗi truy cập micro\",\n                description: \"Không thể truy cập micro. Vui lòng cấp quyền trong cài đặt trình duyệt.\",\n            });\n            setRecordingStatus('error');\n        }\n    };\n\n    const stopRecording = () => {\n        if (mediaRecorderRef.current && recordingStatus === 'recording') {\n            mediaRecorderRef.current.stop();\n        }\n    };\n\n    const handleMicClick = () => {\n        if (isLoading || !modelsLoaded) return;\n\n        if (recordingStatus === 'idle' || recordingStatus === 'error') {\n            startRecording();\n        } else if (recordingStatus === 'recording') {\n            stopRecording();\n        }\n    };\n\n\n    return (\n        <>\n            <div className=\"bg-secondary flex-grow flex items-center justify-center\">\n                <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n                    <div className=\"max-w-4xl mx-auto text-center\">\n                        \n                        <div className=\"flex justify-center items-center gap-4 mb-6\">\n                             <Image src=\"https://placehold.co/100x100.png\" alt=\"AI Assistant\" width={80} height={80} data-ai-hint=\"friendly robot mascot\" />\n                             <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-primary\">Tạo hồ sơ bằng AI</h1>\n                        </div>\n\n                        <p className=\"text-muted-foreground text-lg mb-10\">\n                            Chỉ cần tải lên CV, giấy tờ hoặc mô tả về bản thân, AI của chúng tôi sẽ tự động tạo một hồ sơ chuyên nghiệp cho bạn.\n                        </p>\n\n                        <Card className=\"text-center p-8 md:p-12 border-2 border-dashed border-primary/20 hover:border-primary/50 transition-colors duration-300 shadow-lg\">\n                            <CardContent className=\"flex flex-col items-center justify-center gap-6\">\n                                 <div className=\"relative w-full bg-background rounded-lg p-6 flex flex-col items-center justify-center cursor-pointer hover:bg-primary/5\">\n                                    {isLoading ? (\n                                        <>\n                                            <Loader2 className=\"h-16 w-16 text-primary mb-4 animate-spin\" />\n                                            <p className=\"font-bold text-xl mb-2\">{loadingMessage}</p>\n                                            <p className=\"text-muted-foreground text-sm\">Vui lòng đợi trong giây lát.</p>\n                                        </>\n                                    ) : (\n                                        <>\n                                            <Upload className=\"h-16 w-16 text-primary mb-4\" />\n                                            <p className=\"font-bold text-xl mb-2\">Tải lên hồ sơ, giấy tờ, bằng cấp</p>\n                                            <p className=\"text-muted-foreground text-sm\">Hỗ trợ các định dạng PDF, DOCX, PNG, JPG...</p>\n                                            <Input \n                                                key={fileInputKey}\n                                                id=\"ai-upload\" \n                                                type=\"file\" \n                                                className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" \n                                                onChange={handleFileChange}\n                                                accept=\"image/*,.pdf,.doc,.docx,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document\"\n                                                disabled={isLoading || !modelsLoaded}\n                                            />\n                                        </>\n                                    )}\n                                </div>\n                                <div className=\"flex items-center gap-4 w-full\">\n                                    <hr className=\"flex-grow border-border\"/>\n                                    <span className=\"text-muted-foreground text-sm font-semibold\">HOẶC</span>\n                                    <hr className=\"flex-grow border-border\"/>\n                                </div>\n                                 <div className=\"w-full relative\">\n                                    <Textarea \n                                        placeholder=\"Sao chép và dán mô tả công việc, hoặc mô tả về bản thân bạn ở đây...\"\n                                        className=\"w-full h-40 text-base p-4 pr-24\"\n                                        value={textInput}\n                                        onChange={(e) => setTextInput(e.target.value)}\n                                        disabled={isLoading}\n                                    />\n                                    <Button className=\"absolute bottom-4 right-4 bg-primary text-white\" onClick={handleTextSubmit} disabled={isLoading}>\n                                        {isLoading ? <Loader2 className=\"animate-spin\" /> : <Send />}\n                                        Gửi\n                                    </Button>\n                                 </div>\n                            </CardContent>\n                        </Card>\n\n                        <div className=\"mt-12\">\n                            <h3 className=\"text-xl font-headline font-bold mb-6 text-foreground\">Thử một vài gợi ý:</h3>\n                            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                                <Card className=\"p-6 text-left hover:shadow-xl hover:-translate-y-1 transition-transform duration-300\">\n                                    <FileText className=\"h-8 w-8 text-accent-orange mb-3\" />\n                                    <h4 className=\"font-bold text-lg mb-1\">Mô tả thông tin cá nhân</h4>\n                                    <p className=\"text-muted-foreground text-sm\">\"Tôi là sinh viên năm cuối trường X, chuyên ngành Y, đang tìm kiếm cơ hội thực tập...\"</p>\n                                </Card>\n                                 <Card className=\"p-6 text-left hover:shadow-xl hover:-translate-y-1 transition-transform duration-300\">\n                                    <FileUp className=\"h-8 w-8 text-accent-green mb-3\" />\n                                    <h4 className=\"font-bold text-lg mb-1\">Đăng từ hồ sơ có sẵn</h4>\n                                    <p className=\"text-muted-foreground text-sm\">Tải lên CV file PDF hoặc Word để AI tự động trích xuất và điền thông tin.</p>\n                                </Card>\n                                 <Card className=\"p-6 text-left hover:shadow-xl hover:-translate-y-1 transition-transform duration-300 cursor-pointer\" onClick={handleMicClick}>\n                                    {recordingStatus === 'idle' && <Mic className=\"h-8 w-8 text-accent-blue mb-3\" />}\n                                    {recordingStatus === 'recording' && <StopCircle className=\"h-8 w-8 text-red-500 mb-3 animate-pulse\" />}\n                                    {(recordingStatus === 'processing' || recordingStatus === 'error') && <Loader2 className=\"h-8 w-8 text-accent-blue mb-3 animate-spin\" />}\n                                    <h4 className=\"font-bold text-lg mb-1\">\n                                        {recordingStatus === 'idle' && 'Tạo hồ sơ bằng giọng nói'}\n                                        {recordingStatus === 'recording' && 'Đang ghi âm... (Nhấn để dừng)'}\n                                        {recordingStatus === 'processing' && 'Đang xử lý...'}\n                                        {recordingStatus === 'error' && 'Gặp lỗi! Nhấn để thử lại'}\n                                    </h4>\n                                    <p className=\"text-muted-foreground text-sm\">Chỉ cần bấm nút và mô tả về bản thân, chúng tôi sẽ lo phần còn lại.</p>\n                                </Card>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n\n            <Dialog open={isResultDialogOpen} onOpenChange={setIsResultDialogOpen}>\n                <DialogContent \n                    className=\"sm:max-w-2xl\"\n                    onInteractOutside={(e) => {\n                        e.preventDefault();\n                    }}\n                >\n                    <DialogHeader>\n                        <DialogTitle className=\"font-headline text-2xl\">Kết quả phân tích từ AI</DialogTitle>\n                        <DialogDescription>\n                            Đây là dữ liệu thô mà AI đã trích xuất được. Kiểm tra và nhấn \"Tiếp tục\" để điền vào hồ sơ của bạn.\n                        </DialogDescription>\n                    </DialogHeader>\n                     {analysisResult?.avatarUrl && (\n                        <div className=\"my-4 text-center\">\n                            <p className=\"font-semibold mb-2\">Ảnh đại diện đề xuất:</p>\n                             <Image \n                                src={analysisResult.avatarUrl} \n                                alt=\"Ảnh đại diện được tạo bởi AI\" \n                                width={128} \n                                height={128} \n                                className=\"rounded-full mx-auto border-4 border-primary shadow-lg\"\n                             />\n                        </div>\n                     )}\n                    <div className=\"my-4 max-h-[50vh] overflow-y-auto rounded-lg bg-secondary p-4\">\n                        <pre className=\"text-sm\">\n                            <code>\n                                {JSON.stringify(analysisResult, null, 2)}\n                            </code>\n                        </pre>\n                    </div>\n                    <div className=\"flex justify-end gap-2\">\n                         <Button variant=\"outline\" onClick={() => setIsResultDialogOpen(false)}>Đóng</Button>\n                         <Button onClick={handleProceed} className=\"bg-primary text-white\">Tiếp tục</Button>\n                    </div>\n                </DialogContent>\n            </Dialog>\n        </>\n    );\n}\n",
  "src/app/ai-profile/page.tsx": "'use client';\n\nimport dynamic from 'next/dynamic';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nconst AiProfileClientPage = dynamic(() => import('@/app/ai-profile/client'), {\n  ssr: false,\n  loading: () => (\n    <div className=\"bg-secondary flex-grow flex items-center justify-center\">\n        <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n            <div className=\"max-w-4xl mx-auto text-center space-y-6\">\n                 <Skeleton className=\"h-20 w-80 mx-auto\" />\n                 <Skeleton className=\"h-8 w-full max-w-2xl mx-auto\" />\n                 <Skeleton className=\"h-64 w-full\" />\n                 <Skeleton className=\"h-48 w-full\" />\n            </div>\n        </div>\n    </div>\n  ),\n});\n\nexport default function AiProfilePage() {\n  return <AiProfileClientPage />;\n}\n",
  "src/app/candidate-profile/page.tsx": "\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Briefcase, Building, Cake, Dna, Edit, GraduationCap, MapPin, Phone, School, User, Award, Languages, Star, FileDown, Video, Image as ImageIcon, PlusCircle, Trash2, RefreshCw, X, Camera, MessageSquare, Facebook, Contact, UserCog, Trophy, PlayCircle, LogOut } from 'lucide-react';\nimport Image from 'next/image';\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from '@/components/ui/textarea';\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport type { CandidateProfile } from '@/ai/schemas';\nimport Link from 'next/link';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { cn } from '@/lib/utils';\nimport { Carousel, CarouselContent, CarouselItem, CarouselNext, CarouselPrevious } from '@/components/ui/carousel';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\n\ntype MediaItem = {\n  src: string;\n  thumbnail?: string; \n  alt: string;\n  dataAiHint: string;\n};\n\ntype EnrichedCandidateProfile = CandidateProfile & { \n  avatarUrl?: string;\n  videos: MediaItem[];\n  images: MediaItem[];\n};\n\n\nconst emptyCandidate: EnrichedCandidateProfile = {\n    name: 'Chưa có thông tin',\n    headline: 'Vui lòng tạo hồ sơ bằng AI hoặc cập nhật thủ công',\n    location: 'Chưa có thông tin',\n    about: '',\n    education: [],\n    experience: [],\n    personalInfo: {\n      birthYear: new Date().getFullYear(),\n      gender: 'N/A',\n      phone: 'N/A',\n      language: 'N/A',\n      dateOfBirth: 'N/A',\n      height: 'N/A',\n      weight: 'N/A',\n      tattooStatus: 'N/A',\n      hepatitisBStatus: 'N/A',\n    },\n    aspirations: {\n        desiredLocation: 'N/A',\n        desiredSalary: 'N/A',\n        desiredNetSalary: 'N/A',\n        financialAbility: 'N/A',\n        interviewLocation: 'N/A',\n        specialAspirations: 'N/A',\n    },\n    notes: '',\n    interests: [],\n    skills: [],\n    certifications: [],\n    desiredIndustry: 'N/A',\n    avatarUrl: 'https://placehold.co/128x128.png',\n    videos: [],\n    images: [],\n};\n\n\nconst commonSkills = ['Vận hành máy CNC', 'AutoCAD', 'Kiểm tra chất lượng', 'Làm việc nhóm', 'Giải quyết vấn đề', 'Tiếng Anh giao tiếp'];\nconst commonInterests = ['Cơ khí', 'Điện tử', 'IT', 'Logistics', 'Dệt may', 'Chế biến thực phẩm'];\n\nconst EditDialog = ({ children, title, onSave, content, description }: { children: React.ReactNode, title: string, onSave: () => void, content: React.ReactNode, description?: string }) => (\n    <Dialog>\n        <DialogTrigger asChild>\n            {children}\n        </DialogTrigger>\n        <DialogContent className=\"sm:max-w-[600px]\">\n            <DialogHeader>\n                <DialogTitle className=\"font-headline text-2xl\">{title}</DialogTitle>\n                {description && <DialogDescription>{description}</DialogDescription>}\n            </DialogHeader>\n            <div className=\"grid gap-4 py-4 max-h-[70vh] overflow-y-auto pr-4\">\n                {content}\n            </div>\n            <DialogFooter>\n                <Button type=\"submit\" onClick={onSave} className=\"bg-primary text-white\">Lưu thay đổi</Button>\n            </DialogFooter>\n        </DialogContent>\n    </Dialog>\n);\n\nconst ZaloIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg viewBox=\"0 0 262 263\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n        <path d=\"M131 0C58.649 0 0 58.649 0 131C0 203.351 58.649 262 131 262C203.351 262 262 203.351 262 131C262 58.649 203.351 0 131 0ZM197.838 170.368L173.962 194.244C171.139 197.067 167.247 197.68 163.639 196.223L126.541 182.903C125.129 182.413 123.824 181.711 122.625 180.892L74.832 144.37C71.748 142.029 70.832 137.989 72.585 134.577L84.975 111.758C86.728 108.347 90.722 106.889 94.276 108.347L131.374 121.612C132.786 122.102 134.091 122.748 135.29 123.623L183.083 160.145C186.167 162.486 187.083 166.526 185.33 169.937L197.838 170.368Z\" fill=\"#0068FF\"/>\n    </svg>\n)\n\nexport default function CandidateProfilePage() {\n  const [candidate, setCandidate] = useState<EnrichedCandidateProfile | null>(null);\n  const [tempCandidate, setTempCandidate] = useState<EnrichedCandidateProfile | null>(null);\n  const [newSkill, setNewSkill] = useState('');\n  const [newInterest, setNewInterest] = useState('');\n\n  useEffect(() => {\n    const storedProfile = localStorage.getItem('generatedCandidateProfile');\n    let profileToLoad: EnrichedCandidateProfile;\n\n    const defaultImages: MediaItem[] = [\n      { src: 'https://placehold.co/400x600.png', alt: 'Ảnh trước', dataAiHint: 'front view portrait' },\n      { src: 'https://placehold.co/400x600.png', alt: 'Ảnh trái', dataAiHint: 'left side portrait' },\n      { src: 'https://placehold.co/400x600.png', alt: 'Ảnh phải', dataAiHint: 'right side portrait' },\n      { src: 'https://placehold.co/400x600.png', alt: 'Toàn thân trước', dataAiHint: 'full body front' },\n      { src: 'https://placehold.co/400x600.png', alt: 'Toàn thân trái', dataAiHint: 'full body left' },\n      { src: 'https://placehold.co/400x600.png', alt: 'Toàn thân phải', dataAiHint: 'full body right' },\n    ];\n    \n    const defaultVideos: MediaItem[] = [\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Giới thiệu bản thân', dataAiHint: 'self introduction video' },\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Tay nghề 1', dataAiHint: 'skill demonstration' },\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Tay nghề 2', dataAiHint: 'welding skill' },\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Trả lời phỏng vấn', dataAiHint: 'interview answers' },\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Dự án đã làm', dataAiHint: 'project showcase' },\n        { src: 'https://www.youtube.com/embed/dQw4w9WgXcQ', thumbnail: 'https://placehold.co/400x600.png', alt: 'Video khác', dataAiHint: 'personal video' },\n    ];\n\n    if (storedProfile) {\n      try {\n        const parsedProfile = JSON.parse(storedProfile);\n        profileToLoad = {\n          ...emptyCandidate,\n          ...parsedProfile,\n          personalInfo: { ...emptyCandidate.personalInfo, ...parsedProfile.personalInfo },\n          aspirations: { ...emptyCandidate.aspirations, ...parsedProfile.aspirations },\n          avatarUrl: parsedProfile.avatarUrl || 'https://placehold.co/128x128.png',\n          videos: (parsedProfile.videos && parsedProfile.videos.length > 0) ? parsedProfile.videos : defaultVideos,\n          images: (parsedProfile.images && parsedProfile.images.length > 0) ? parsedProfile.images : defaultImages,\n        };\n      } catch (error) {\n        console.error(\"Failed to parse candidate profile from localStorage\", error);\n        profileToLoad = { ...emptyCandidate, videos: defaultVideos, images: defaultImages };\n      }\n    } else {\n        profileToLoad = { ...emptyCandidate, \n            videos: defaultVideos,\n            images: defaultImages\n        };\n    }\n    setCandidate(profileToLoad);\n    setTempCandidate(JSON.parse(JSON.stringify(profileToLoad)));\n  }, []);\n\n  useEffect(() => {\n    if (candidate) {\n      localStorage.setItem('generatedCandidateProfile', JSON.stringify(candidate));\n    }\n  }, [candidate]);\n\n\n  if (!candidate || !tempCandidate) {\n      return (\n        <div className=\"bg-secondary\">\n            <div className=\"container mx-auto px-4 md:px-6 py-12\">\n                <div className=\"max-w-5xl mx-auto\">\n                    <Card className=\"shadow-2xl overflow-hidden\">\n                        <CardHeader className=\"p-0\">\n                            <Skeleton className=\"h-32 bg-gray-300\" />\n                            <div className=\"p-6 flex flex-col md:flex-row items-center md:items-end -mt-16\">\n                                <Skeleton className=\"h-32 w-32 rounded-full border-4 border-background bg-gray-400\" />\n                                <div className=\"md:ml-6 mt-4 md:mt-0 text-center md:text-left space-y-2\">\n                                    <Skeleton className=\"h-8 w-64\" />\n                                    <Skeleton className=\"h-6 w-80\" />\n                                </div>\n                            </div>\n                        </CardHeader>\n                        <CardContent className=\"p-6\">\n                            <Skeleton className=\"h-96 w-full\" />\n                        </CardContent>\n                    </Card>\n                </div>\n            </div>\n        </div>\n      );\n  }\n\n  const handleSave = () => {\n    setCandidate(JSON.parse(JSON.stringify(tempCandidate)));\n  };\n  \n  const handleMediaChange = (type: 'avatar' | 'image', e: React.ChangeEvent<HTMLInputElement>, index?: number) => {\n    const file = e.target.files?.[0];\n    if (file) {\n      const reader = new FileReader();\n      reader.onload = () => {\n        const newUrl = reader.result as string;\n        setTempCandidate(prev => {\n          if (!prev) return null;\n          const newCandidate = {...prev};\n          if (type === 'avatar') {\n             newCandidate.avatarUrl = newUrl;\n          } else if (type === 'image' && index !== undefined) {\n             newCandidate.images[index].src = newUrl;\n          }\n          // Also update the final candidate state to reflect change immediately\n          setCandidate(JSON.parse(JSON.stringify(newCandidate)));\n          return newCandidate;\n        });\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n\n  const handleNestedChange = (\n      section: 'personalInfo' | 'aspirations', \n      field: string, \n      value: any\n  ) => {\n      setTempCandidate(prev => {\n          if (!prev) return null;\n          return {\n              ...prev,\n              [section]: {\n                  ...prev[section],\n                  [field]: value\n              }\n          };\n      });\n  };\n\n  const handleSimpleChange = (field: keyof EnrichedCandidateProfile, value: any) => {\n    setTempCandidate(prev => {\n        if (!prev) return null;\n        return { ...prev, [field]: value };\n    });\n  };\n\n\n  const handleChange = (section: keyof EnrichedCandidateProfile, index: number, field: string, value: any) => {\n      setTempCandidate(prev => {\n          if (!prev) return null;\n          const newCandidate = { ...prev };\n          // @ts-ignore\n          if (Array.isArray(newCandidate[section])) {\n            // @ts-ignore\n            newCandidate[section][index][field] = value;\n          }\n          return newCandidate;\n      });\n  };\n\n  const handleAddItem = (section: 'experience' | 'education' | 'certifications') => {\n      setTempCandidate(prev => {\n          if (!prev) return null;\n          const newCandidate = { ...prev };\n          if (section === 'experience') {\n              newCandidate.experience.push({ company: '', role: '', period: '', description: '' });\n          } else if (section === 'education') {\n              newCandidate.education.push({ school: '', degree: '', gradYear: new Date().getFullYear() });\n          } else if (section === 'certifications') {\n              newCandidate.certifications.push('');\n          }\n          return newCandidate;\n      });\n  };\n\n  const handleRemoveItem = (section: 'experience' | 'education' | 'certifications' | 'skills' | 'interests', indexOrValue: number | string) => {\n      setTempCandidate(prev => {\n          if (!prev) return null;\n          const newCandidate = { ...prev };\n          if (section === 'skills' || section === 'interests') {\n              // @ts-ignore\n              newCandidate[section] = newCandidate[section].filter(item => item !== indexOrValue);\n          } else {\n            // @ts-ignore\n            newCandidate[section].splice(indexOrValue, 1);\n          }\n          return newCandidate;\n      });\n  };\n  \n  const handleCertificationChange = (index: number, value: string) => {\n      setTempCandidate(prev => {\n          if (!prev) return null;\n          const newCandidate = { ...prev };\n          newCandidate.certifications[index] = value;\n          return newCandidate;\n      });\n  };\n  \n  const handleCheckboxChange = (field: 'skills' | 'interests', value: string) => {\n    setTempCandidate(prev => {\n        if (!prev) return null;\n        const newCandidate = { ...prev };\n        const currentValues = newCandidate[field];\n        const newValues = currentValues.includes(value)\n          ? currentValues.filter((item: string) => item !== value)\n          : [...currentValues, value];\n        // @ts-ignore\n        newCandidate[field] = newValues;\n        return newCandidate;\n    });\n  };\n\n  const handleAddNewChip = (field: 'skills' | 'interests') => {\n      if (!tempCandidate) return;\n      const valueToAdd = field === 'skills' ? newSkill.trim() : newInterest.trim();\n      if (valueToAdd && !tempCandidate[field].includes(valueToAdd)) {\n          setTempCandidate(prev => ({\n              ...prev!,\n              // @ts-ignore\n              [field]: [...prev![field], valueToAdd]\n          }));\n          if (field === 'skills') {\n              setNewSkill('');\n          } else {\n              setNewInterest('');\n          }\n      }\n  };\n\n  const Level1EditDialogContent = () => {\n    if (!tempCandidate) return null;\n    return (\n      <div className=\"space-y-4\">\n          {[\n              { label: '1. Họ và tên', value: tempCandidate.name, field: 'name', type: 'simple' },\n              { label: '2. Số điện thoại', value: tempCandidate.personalInfo.phone, field: 'phone', type: 'personalInfo' },\n              { label: '3. Ngày sinh', value: tempCandidate.personalInfo.dateOfBirth, field: 'dateOfBirth', type: 'personalInfo' },\n              { label: '4. Ngành nghề mong muốn', value: tempCandidate.desiredIndustry, field: 'desiredIndustry', type: 'simple' },\n              { label: '5. Địa điểm mong muốn', value: tempCandidate.aspirations?.desiredLocation, field: 'desiredLocation', type: 'aspirations' },\n              { label: '6. Chiều cao', value: tempCandidate.personalInfo.height, field: 'height', type: 'personalInfo' },\n              { label: '7. Cân nặng', value: tempCandidate.personalInfo.weight, field: 'weight', type: 'personalInfo' },\n              { label: '8. Hình xăm', value: tempCandidate.personalInfo.tattooStatus, field: 'tattooStatus', type: 'personalInfo', options: ['Không có', 'Xăm nhỏ', 'Xăm lớn'] },\n              { label: '9. Viêm gan B', value: tempCandidate.personalInfo.hepatitisBStatus, field: 'hepatitisBStatus', type: 'personalInfo', options: ['Không viêm gan B', 'Có viêm gan B'] },\n              { label: '10. Lương cơ bản mong muốn', value: tempCandidate.aspirations?.desiredSalary, field: 'desiredSalary', type: 'aspirations' },\n              { label: '11. Thực lĩnh mong muốn', value: tempCandidate.aspirations?.desiredNetSalary, field: 'desiredNetSalary', type: 'aspirations' },\n              { label: '12. Khả năng tài chính', value: tempCandidate.aspirations?.financialAbility, field: 'financialAbility', type: 'aspirations' },\n              { label: '13. Tìm việc phỏng vấn, tuyển tại', value: tempCandidate.aspirations?.interviewLocation, field: 'interviewLocation', type: 'aspirations' },\n              { label: '14. Nguyện vọng đặc biệt', value: tempCandidate.aspirations?.specialAspirations, field: 'specialAspirations', type: 'aspirations' },\n              { label: '15. Mô tả/ghi chú', value: tempCandidate.notes, field: 'notes', type: 'simple', isTextarea: true },\n          ].map(item => (\n              <div key={item.label} className=\"grid grid-cols-3 items-center gap-4\">\n                  <Label className=\"col-span-1 text-right\">{item.label}</Label>\n                  <div className=\"col-span-2\">\n                    {item.isTextarea ? (\n                         <Textarea \n                            value={item.value || ''} \n                            onChange={e => handleSimpleChange(item.field as keyof EnrichedCandidateProfile, e.target.value)} \n                        />\n                    ) : item.options ? (\n                        <Select \n                            value={item.value || ''} \n                            onValueChange={value => handleNestedChange(item.type as 'personalInfo' | 'aspirations', item.field, value)}\n                        >\n                            <SelectTrigger>\n                                <SelectValue placeholder={`Chọn ${item.label.split('. ')[1].toLowerCase()}`} />\n                            </SelectTrigger>\n                            <SelectContent>\n                                {item.options.map(option => <SelectItem key={option} value={option}>{option}</SelectItem>)}\n                            </SelectContent>\n                        </Select>\n                    ) : (\n                        <Input \n                            value={item.value || ''} \n                            onChange={e => {\n                                if (item.type === 'simple') {\n                                    handleSimpleChange(item.field as keyof EnrichedCandidateProfile, e.target.value);\n                                } else {\n                                    handleNestedChange(item.type as 'personalInfo' | 'aspirations', item.field, e.target.value);\n                                }\n                            }}\n                        />\n                    )}\n                  </div>\n              </div>\n          ))}\n      </div>\n    );\n  };\n  \n  const experienceEditDialogContent = (\n      <div className=\"space-y-6\">\n          {tempCandidate.experience.map((exp, index) => (\n              <div key={index} className=\"p-4 border rounded-lg space-y-2 relative\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                      <h4 className=\"font-bold\">Kinh nghiệm #{index + 1}</h4>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveItem('experience', index)}>\n                          <Trash2 className=\"h-4 w-4 text-destructive\"/>\n                      </Button>\n                  </div>\n                  <Label>Vai trò</Label>\n                  <Input value={exp.role} onChange={e => handleChange('experience', index, 'role', e.target.value)} />\n                  <Label>Công ty</Label>\n                  <Input value={exp.company} onChange={e => handleChange('experience', index, 'company', e.target.value)} />\n                  <Label>Thời gian</Label>\n                  <Input value={exp.period} onChange={e => handleChange('experience', index, 'period', e.target.value)} />\n                  <Label>Mô tả</Label>\n                  <Textarea value={exp.description} onChange={e => handleChange('experience', index, 'description', e.target.value)} />\n              </div>\n          ))}\n          <Button variant=\"outline\" className=\"w-full\" onClick={() => handleAddItem('experience')}>\n              <PlusCircle className=\"mr-2\"/> Thêm kinh nghiệm\n          </Button>\n      </div>\n  );\n  \n  const educationEditDialogContent = (\n      <div className=\"space-y-6\">\n          {tempCandidate.education.map((edu, index) => (\n              <div key={index} className=\"p-4 border rounded-lg space-y-2 relative\">\n                  <div className=\"flex justify-between items-center mb-2\">\n                      <h4 className=\"font-bold\">Học vấn #{index + 1}</h4>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveItem('education', index)}>\n                          <Trash2 className=\"h-4 w-4 text-destructive\"/>\n                      </Button>\n                  </div>\n                  <Label>Trường</Label>\n                  <Input value={edu.school} onChange={e => handleChange('education', index, 'school', e.target.value)} />\n                  <Label>Chuyên ngành</Label>\n                  <Input value={edu.degree} onChange={e => handleChange('education', index, 'degree', e.target.value)} />\n                  <Label>Năm tốt nghiệp</Label>\n                  <Input type=\"number\" value={edu.gradYear} onChange={e => handleChange('education', index, 'gradYear', parseInt(e.target.value))} />\n              </div>\n          ))}\n          <Button variant=\"outline\" className=\"w-full\" onClick={() => handleAddItem('education')}>\n              <PlusCircle className=\"mr-2\"/> Thêm học vấn\n          </Button>\n      </div>\n  );\n  \n  const skillsInterestsEditDialogContent = (\n      <div className=\"space-y-6\">\n          <div className=\"space-y-2\">\n              <Label className=\"font-bold\">Kỹ năng</Label>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {tempCandidate.skills.map((skill) => (\n                      <Badge key={skill} variant=\"secondary\" className=\"pr-1\">\n                          {skill}\n                          <button onClick={() => handleRemoveItem('skills', skill)} className=\"ml-2 rounded-full hover:bg-destructive/80 p-0.5\">\n                              <X className=\"h-3 w-3\" />\n                          </button>\n                      </Badge>\n                  ))}\n              </div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {commonSkills.filter(s => !tempCandidate.skills.includes(s)).map((skill) => (\n                    <div key={skill} className=\"flex items-center space-x-2\">\n                      <Checkbox id={`skill-${skill}`} onCheckedChange={() => handleCheckboxChange('skills', skill)} checked={tempCandidate.skills.includes(skill)}/>\n                      <Label htmlFor={`skill-${skill}`} className=\"text-sm font-normal cursor-pointer\">{skill}</Label>\n                    </div>\n                  ))}\n              </div>\n              <div className=\"flex gap-2 mt-2\">\n                  <Input value={newSkill} onChange={e => setNewSkill(e.target.value)} placeholder=\"Thêm kỹ năng khác...\" />\n                  <Button onClick={() => handleAddNewChip('skills')}>Thêm</Button>\n              </div>\n          </div>\n           <div className=\"space-y-2\">\n              <Label className=\"font-bold\">Lĩnh vực quan tâm</Label>\n              <div className=\"flex flex-wrap gap-2 mb-4\">\n                  {tempCandidate.interests.map((interest) => (\n                      <Badge key={interest} className=\"bg-accent-blue text-white pr-1\">\n                          {interest}\n                          <button onClick={() => handleRemoveItem('interests', interest)} className=\"ml-2 rounded-full hover:bg-destructive/80 p-0.5\">\n                              <X className=\"h-3 w-3\" />\n                          </button>\n                      </Badge>\n                  ))}\n              </div>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-2\">\n                  {commonInterests.filter(i => !tempCandidate.interests.includes(i)).map((interest) => (\n                    <div key={interest} className=\"flex items-center space-x-2\">\n                      <Checkbox id={`interest-${interest}`} onCheckedChange={() => handleCheckboxChange('interests', interest)} checked={tempCandidate.interests.includes(interest)}/>\n                      <Label htmlFor={`interest-${interest}`} className=\"text-sm font-normal cursor-pointer\">{interest}</Label>\n                    </div>\n                  ))}\n              </div>\n              <div className=\"flex gap-2 mt-2\">\n                  <Input value={newInterest} onChange={e => setNewInterest(e.target.value)} placeholder=\"Thêm lĩnh vực khác...\" />\n                  <Button onClick={() => handleAddNewChip('interests')}>Thêm</Button>\n              </div>\n          </div>\n      </div>\n  );\n  \n  const certificationsEditDialogContent = (\n       <div className=\"space-y-6\">\n          {tempCandidate.certifications.map((cert, index) => (\n              <div key={index} className=\"p-4 border rounded-lg space-y-2 relative\">\n                   <div className=\"flex justify-between items-center mb-2\">\n                      <Label htmlFor={`cert-${index}`}>Chứng chỉ #{index + 1}</Label>\n                      <Button variant=\"ghost\" size=\"icon\" onClick={() => handleRemoveItem('certifications', index)}>\n                          <Trash2 className=\"h-4 w-4 text-destructive\"/>\n                      </Button>\n                  </div>\n                  <Input id={`cert-${index}`} value={cert} onChange={(e) => handleCertificationChange(index, e.target.value)} />\n              </div>\n          ))}\n          <Button variant=\"outline\" className=\"w-full\" onClick={() => handleAddItem('certifications')}>\n              <PlusCircle className=\"mr-2\"/> Thêm chứng chỉ\n          </Button>\n       </div>\n  );\n\n  const mainEditDialogContent = (\n    <div className=\"space-y-4\">\n        <div className=\"text-center\">\n             <Image src=\"https://placehold.co/100x100.png\" alt=\"AI Assistant\" width={80} height={80} data-ai-hint=\"friendly robot mascot\" className=\"mx-auto\" />\n             <h3 className=\"text-2xl font-headline mt-2\">TẠO PROFILE TÌM VIỆC</h3>\n        </div>\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n            \n            <Dialog>\n                <DialogTrigger asChild>\n                    <Card className=\"p-4 text-center cursor-pointer hover:shadow-lg transition-shadow border-2 border-orange-300\">\n                        <h4 className=\"font-bold text-orange-500\">Mức 1</h4>\n                        <User className=\"h-12 w-12 text-gray-300 mx-auto my-2\" />\n                        <p className=\"text-sm text-muted-foreground\">(Thông tin cơ bản)</p>\n                    </Card>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-xl\">\n                    <DialogHeader>\n                        <DialogTitle className=\"font-headline text-2xl\">Thông tin tài khoản ứng viên Mức 1</DialogTitle>\n                    </DialogHeader>\n                    <div className=\"max-h-[70vh] overflow-y-auto pr-4\">\n                      <Level1EditDialogContent />\n                    </div>\n                    <DialogFooter>\n                        <Button onClick={handleSave} className=\"bg-primary text-white w-full\">Đăng thông tin</Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n\n            <Dialog>\n                <DialogTrigger asChild>\n                    <Card className=\"p-4 text-center cursor-pointer hover:shadow-lg transition-shadow border-2 border-green-300\">\n                        <h4 className=\"font-bold text-green-500\">Mức 2</h4>\n                        <Briefcase className=\"h-12 w-12 text-gray-300 mx-auto my-2\" />\n                        <p className=\"text-sm text-muted-foreground\">(Thông tin đầy đủ)</p>\n                    </Card>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[600px]\">\n                    <DialogHeader><DialogTitle>Chỉnh sửa Kinh nghiệm & Học vấn</DialogTitle></DialogHeader>\n                    <div className=\"max-h-[60vh] overflow-y-auto pr-4 space-y-4\">\n                        <h3 className=\"font-bold text-lg\">Kinh nghiệm</h3>\n                        {experienceEditDialogContent}\n                        <h3 className=\"font-bold text-lg mt-4\">Học vấn</h3>\n                        {educationEditDialogContent}\n                    </div>\n                    <DialogFooter><Button onClick={handleSave}>Lưu</Button></DialogFooter>\n                </DialogContent>\n            </Dialog>\n            \n            <Dialog>\n                <DialogTrigger asChild>\n                    <Card className=\"p-4 text-center cursor-pointer hover:shadow-lg transition-shadow border-2 border-blue-300\">\n                        <h4 className=\"font-bold text-blue-500\">Mức 3</h4>\n                        <Contact className=\"h-12 w-12 text-gray-300 mx-auto my-2\" />\n                        <div className=\"flex justify-center items-center gap-2 mt-1\">\n                            <Facebook className=\"h-5 w-5 text-blue-600\" />\n                            <MessageSquare className=\"h-5 w-5 text-blue-500\" />\n                            <ZaloIcon className=\"h-5 w-5\" />\n                            <Phone className=\"h-5 w-5 text-green-500\" />\n                        </div>\n                        <p className=\"text-sm text-muted-foreground\">(Thông tin liên hệ)</p>\n                    </Card>\n                </DialogTrigger>\n                <DialogContent>\n                    <DialogHeader><DialogTitle>Chỉnh sửa Thông tin liên hệ</DialogTitle></DialogHeader>\n                    {/* Placeholder for now */}\n                    <div>Coming soon...</div>\n                    <DialogFooter><Button onClick={handleSave}>Lưu</Button></DialogFooter>\n                </DialogContent>\n            </Dialog>\n\n        </div>\n        <p className=\"text-center mt-4 text-muted-foreground\">Để <span className=\"text-primary font-semibold\">Nhà tuyển dụng</span> hiểu rõ về bạn, hãy <span className=\"text-green-500 font-semibold\">Cập nhật thông tin</span>.</p>\n    </div>\n  );\n  \n  const MediaCarousel = ({ items, title }: { items: MediaItem[], title: string }) => (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n          <CardTitle className=\"font-headline text-xl flex items-center\"><Video className=\"mr-3 text-primary\"/> {title}</CardTitle>\n          <Button variant=\"ghost\" size=\"icon\"><PlusCircle className=\"h-5 w-5\"/></Button>\n      </CardHeader>\n      <CardContent>\n        <Carousel className=\"w-full\" opts={{align: \"start\", loop: true}}>\n            <CarouselContent className=\"-ml-2 md:-ml-4\">\n                {items.slice(0, 6).map((item, index) => (\n                    <CarouselItem key={index} className=\"pl-2 md:pl-4 basis-[30%] md:basis-1/3 lg:basis-1/4\">\n                       <div className=\"relative group overflow-hidden rounded-lg aspect-[9/16] cursor-pointer\">\n                            <Image src={item.thumbnail || item.src} alt={item.alt} fill className=\"object-cover transition-transform duration-300 group-hover:scale-105\" data-ai-hint={item.dataAiHint} />\n                            <div className=\"absolute inset-0 bg-gradient-to-t from-black/60 to-transparent\" />\n                            <div className=\"absolute inset-0 flex items-center justify-center\">\n                                <PlayCircle className=\"h-12 w-12 text-white/80 drop-shadow-lg\" />\n                            </div>\n                            <div className=\"absolute bottom-2 left-2 text-white text-xs font-semibold drop-shadow-md p-1 bg-black/40 rounded\">\n                                {item.alt}\n                            </div>\n                        </div>\n                    </CarouselItem>\n                ))}\n            </CarouselContent>\n            <CarouselPrevious className=\"hidden md:flex\" />\n            <CarouselNext className=\"hidden md:flex\" />\n        </Carousel>\n      </CardContent>\n    </Card>\n  );\n\n  const BodyPhotosCarousel = ({items, onImageChange}: {items: MediaItem[], onImageChange: (e: React.ChangeEvent<HTMLInputElement>, index: number) => void}) => (\n    <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between\">\n            <CardTitle className=\"font-headline text-xl flex items-center\"><ImageIcon className=\"mr-3 text-primary\"/> Ảnh hình thể</CardTitle>\n             <Dialog>\n                <DialogTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\"><PlusCircle className=\"h-5 w-5\"/></Button>\n                </DialogTrigger>\n                <DialogContent>\n                    <DialogHeader>\n                        <DialogTitle>Cập nhật ảnh hình thể</DialogTitle>\n                        <DialogDescription>Tải lên các ảnh theo yêu cầu để hoàn thiện hồ sơ.</DialogDescription>\n                    </DialogHeader>\n                    {/* Add management UI here if needed */}\n                </DialogContent>\n             </Dialog>\n        </CardHeader>\n        <CardContent>\n            <Carousel className=\"w-full\" opts={{align: \"start\"}}>\n                <CarouselContent className=\"-ml-2 md:-ml-4\">\n                    {items.map((item, index) => (\n                        <CarouselItem key={index} className=\"pl-2 md:pl-4 basis-1/3 md:basis-1/4 lg:basis-1/5\">\n                           <div className=\"space-y-2\">\n                                <div className=\"relative group aspect-[3/4] rounded-lg overflow-hidden border\">\n                                     <Image src={item.src} alt={item.alt} fill className=\"object-cover\" data-ai-hint={item.dataAiHint} />\n                                     <Label htmlFor={`image-upload-${index}`} className=\"absolute inset-0 bg-black/40 flex items-center justify-center opacity-0 group-hover:opacity-100 transition-opacity cursor-pointer\">\n                                        <Camera className=\"h-8 w-8 text-white\"/>\n                                     </Label>\n                                     <Input id={`image-upload-${index}`} type=\"file\" className=\"hidden\" accept=\"image/*\" onChange={(e) => onImageChange(e, index)} />\n                                </div>\n                                <p className=\"text-center text-sm font-semibold text-muted-foreground\">{item.alt}</p>\n                            </div>\n                        </CarouselItem>\n                    ))}\n                </CarouselContent>\n                <CarouselPrevious className=\"hidden md:flex\" />\n                <CarouselNext className=\"hidden md:flex\" />\n            </Carousel>\n        </CardContent>\n    </Card>\n  )\n\n\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12\">\n        <div className=\"max-w-5xl mx-auto\">\n          <Card className=\"shadow-2xl overflow-hidden\">\n             <CardHeader className=\"p-0\">\n               <div className=\"bg-gradient-to-tr from-primary to-accent h-32\" />\n                 <div className=\"p-6 flex flex-col md:flex-row items-center md:items-end -mt-16\">\n                 <div className=\"relative group\">\n                     <Avatar className=\"h-32 w-32 border-4 border-background bg-background shadow-lg\">\n                      <AvatarImage src={candidate.avatarUrl} alt={candidate.name} data-ai-hint=\"professional headshot\" className=\"object-cover\" />\n                      <AvatarFallback>{candidate.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <Label htmlFor=\"avatar-upload\" className=\"absolute bottom-1 right-1 cursor-pointer bg-black/50 text-white p-2 rounded-full group-hover:bg-black/70 transition-colors\">\n                        <Camera className=\"h-5 w-5\" />\n                        <span className=\"sr-only\">Change avatar</span>\n                    </Label>\n                    <Input id=\"avatar-upload\" type=\"file\" className=\"hidden\" accept=\"image/*\" onChange={(e) => handleMediaChange('avatar', e)}/>\n                 </div>\n                <div className=\"md:ml-6 mt-4 md:mt-0 text-center md:text-left\">\n                  <h1 className=\"text-3xl font-headline font-bold\">{candidate.name}</h1>\n                  <p className=\"text-muted-foreground\">{candidate.headline}</p>\n                  <p className=\"text-sm text-muted-foreground flex items-center justify-center md:justify-start gap-2 mt-1\">\n                    <MapPin className=\"h-4 w-4\" /> {candidate.location}\n                  </p>\n                </div>\n                 <EditDialog\n                    title=\"Hoàn thiện hồ sơ\"\n                    onSave={() => { /* No-op, saves happen in sub-dialogs */ }}\n                    content={mainEditDialogContent}\n                    description=\"Chọn một mục dưới đây để cập nhật hoặc hoàn thiện thông tin hồ sơ của bạn.\"\n                 >\n                    <Button className=\"md:ml-auto mt-4 md:mt-0\" variant=\"outline\"><Edit /> Sửa hồ sơ</Button>\n                 </EditDialog>\n              </div>\n            </CardHeader>\n            <CardContent className=\"p-6 grid grid-cols-1 lg:grid-cols-3 gap-8\">\n              {/* Left Column */}\n              <div className=\"lg:col-span-2 space-y-8\">\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><User className=\"mr-3 text-primary\"/> Giới thiệu bản thân</CardTitle>\n                     <EditDialog\n                        title=\"Chỉnh sửa Giới thiệu bản thân\"\n                        onSave={handleSave}\n                        content={<Textarea value={tempCandidate.about} onChange={e => handleSimpleChange('about', e.target.value)} rows={6} />}\n                        description=\"Viết một đoạn giới thiệu ngắn về bản thân, kỹ năng và mục tiêu nghề nghiệp của bạn.\"\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                    </EditDialog>\n                  </CardHeader>\n                  <CardContent>\n                    {candidate.about ? (\n                      <p className=\"text-muted-foreground whitespace-pre-line\">{candidate.about}</p>\n                    ) : (\n                      <div className=\"text-muted-foreground\">\n                        <span>Chưa có thông tin. </span>\n                        <EditDialog title=\"Chỉnh sửa Giới thiệu bản thân\" onSave={handleSave} content={<Textarea value={tempCandidate.about} onChange={e => handleSimpleChange('about', e.target.value)} rows={6} />}>\n                            <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                        </EditDialog>\n                      </div>\n                    )}\n                  </CardContent>\n                </Card>\n\n                {candidate.videos.length > 0 && <MediaCarousel items={candidate.videos} title=\"Video\" />}\n                \n                {candidate.images.length > 0 && <BodyPhotosCarousel items={candidate.images} onImageChange={(e, index) => handleMediaChange('image', e, index)} />}\n\n\n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><Briefcase className=\"mr-3 text-primary\"/> Kinh nghiệm làm việc</CardTitle>\n                     <EditDialog\n                        title=\"Chỉnh sửa Kinh nghiệm làm việc\"\n                        onSave={handleSave}\n                        content={experienceEditDialogContent}\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                     </EditDialog>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {candidate.experience.length > 0 ? candidate.experience.map((exp, index) => (\n                        <div key={index} className=\"relative pl-6 before:absolute before:left-0 before:top-2 before:h-2 before:w-2 before:rounded-full before:bg-primary\">\n                            <h4 className=\"font-bold\">{exp.role}</h4>\n                            <p className=\"font-semibold text-sm text-primary\">{exp.company}</p>\n                            <p className=\"text-xs text-muted-foreground mb-1\">{exp.period}</p>\n                            <p className=\"text-sm text-muted-foreground\">{exp.description}</p>\n                        </div>\n                    )) : (\n                        <div className=\"text-muted-foreground\">\n                           <span>Chưa có thông tin. </span>\n                            <EditDialog title=\"Chỉnh sửa Kinh nghiệm làm việc\" onSave={handleSave} content={experienceEditDialogContent}>\n                               <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                            </EditDialog>\n                        </div>\n                    )}\n                  </CardContent>\n                </Card>\n                \n                <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><GraduationCap className=\"mr-3 text-primary\"/> Học vấn</CardTitle>\n                     <EditDialog\n                        title=\"Chỉnh sửa Học vấn\"\n                        onSave={handleSave}\n                        content={educationEditDialogContent}\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                    </EditDialog>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                     {candidate.education.length > 0 ? candidate.education.map((edu, index) => (\n                        <div key={index} className=\"relative pl-6 before:absolute before:left-0 before:top-2 before:h-2 before:w-2 before:rounded-full before:bg-primary\">\n                            <p className=\"font-semibold flex items-center gap-2\"><School className=\"h-4 w-4\"/> {edu.school}</p>\n                            <p className=\"text-muted-foreground ml-6\">Chuyên ngành: {edu.degree}</p>\n                            <p className=\"text-muted-foreground ml-6\">Tốt nghiệp năm: {edu.gradYear}</p>\n                        </div>\n                     )) : (\n                        <div className=\"text-muted-foreground\">\n                            <span>Chưa có thông tin. </span>\n                            <EditDialog title=\"Chỉnh sửa Học vấn\" onSave={handleSave} content={educationEditDialogContent}>\n                                <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                            </EditDialog>\n                        </div>\n                     )}\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Right Column */}\n              <div className=\"lg:col-span-1 space-y-6\">\n                 <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><UserCog className=\"mr-3 text-primary\"/> Thông tin cá nhân</CardTitle>\n                    <EditDialog\n                        title=\"Chỉnh sửa Thông tin cá nhân\"\n                        onSave={handleSave}\n                        content={<Level1EditDialogContent />}\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                    </EditDialog>\n                  </CardHeader>\n                  <CardContent className=\"space-y-3\">\n                    <p className=\"flex items-start gap-3\"><Cake className=\"h-4 w-4 mt-1 text-muted-foreground\"/> <span><strong>Năm sinh:</strong> {candidate.personalInfo.birthYear}</span></p>\n                    <p className=\"flex items-start gap-3\"><Dna className=\"h-4 w-4 mt-1 text-muted-foreground\"/> <span><strong>Giới tính:</strong> {candidate.personalInfo.gender}</span></p>\n                    <p className=\"flex items-start gap-3\"><Phone className=\"h-4 w-4 mt-1 text-muted-foreground\"/> <span><strong>SĐT:</strong> {candidate.personalInfo.phone}</span></p>\n                    <p className=\"flex items-start gap-3\"><Languages className=\"h-4 w-4 mt-1 text-muted-foreground\"/> <span><strong>Ngoại ngữ:</strong> {candidate.personalInfo.language}</span></p>\n                    <p className=\"flex items-start gap-3\"><Building className=\"h-4 w-4 mt-1 text-muted-foreground\"/> <span><strong>Ngành mong muốn:</strong> {candidate.desiredIndustry}</span></p>\n                  </CardContent>\n                </Card>\n\n                 <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><Star className=\"mr-3 text-primary\"/> Kỹ năng & Lĩnh vực</CardTitle>\n                    <EditDialog\n                        title=\"Chỉnh sửa Kỹ năng & Lĩnh vực\"\n                        description=\"Chọn các mục có sẵn hoặc thêm mới để làm nổi bật hồ sơ của bạn.\"\n                        onSave={handleSave}\n                        content={skillsInterestsEditDialogContent}\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                    </EditDialog>\n                  </CardHeader>\n                  <CardContent>\n                     <h4 className=\"font-semibold mb-2 text-sm\">Kỹ năng</h4>\n                     <div className=\"flex flex-wrap gap-2 mb-4\">\n                        {candidate.skills.length > 0 ? candidate.skills.map(skill => <Badge key={skill} variant=\"secondary\">{skill}</Badge>) : \n                        <div className=\"text-muted-foreground text-sm\">\n                            <span>Chưa có kỹ năng. </span>\n                            <EditDialog title=\"Chỉnh sửa Kỹ năng & Lĩnh vực\" description=\"Chọn các mục có sẵn hoặc thêm mới để làm nổi bật hồ sơ của bạn.\" onSave={handleSave} content={skillsInterestsEditDialogContent}>\n                               <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                            </EditDialog>\n                        </div>}\n                     </div>\n                     <h4 className=\"font-semibold mb-2 text-sm\">Lĩnh vực quan tâm</h4>\n                     <div className=\"flex flex-wrap gap-2\">\n                        {candidate.interests.length > 0 ? candidate.interests.map(interest => <Badge key={interest} className=\"bg-accent-blue text-white\">{interest}</Badge>) : \n                        <div className=\"text-muted-foreground text-sm\">\n                            <span>Chưa có lĩnh vực quan tâm. </span>\n                            <EditDialog title=\"Chỉnh sửa Kỹ năng & Lĩnh vực\" description=\"Chọn các mục có sẵn hoặc thêm mới để làm nổi bật hồ sơ của bạn.\" onSave={handleSave} content={skillsInterestsEditDialogContent}>\n                                <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                            </EditDialog>\n                        </div>}\n                     </div>\n                  </CardContent>\n                </Card>\n\n                 <Card>\n                  <CardHeader className=\"flex flex-row items-center justify-between\">\n                    <CardTitle className=\"font-headline text-xl flex items-center\"><Award className=\"mr-3 text-primary\"/> Chứng chỉ & Giải thưởng</CardTitle>\n                     <EditDialog\n                        title=\"Chỉnh sửa Chứng chỉ & Giải thưởng\"\n                        onSave={handleSave}\n                        content={certificationsEditDialogContent}\n                    >\n                      <Button variant=\"ghost\" size=\"icon\"><Edit className=\"h-4 w-4\"/></Button>\n                    </EditDialog>\n                  </CardHeader>\n                  <CardContent className=\"space-y-2\">\n                     {candidate.certifications.length > 0 ? candidate.certifications.map((cert, index) => (\n                         <p key={index} className=\"text-sm flex items-center gap-2\"><Trophy className=\"h-4 w-4 text-muted-foreground\"/>{cert}</p>\n                     )) : \n                     <div className=\"text-muted-foreground text-sm\">\n                        <span>Chưa có chứng chỉ. </span>\n                        <EditDialog title=\"Chỉnh sửa Chứng chỉ & Giải thưởng\" onSave={handleSave} content={certificationsEditDialogContent}>\n                            <button className=\"text-primary hover:underline\">Nhấn vào đây để cập nhật</button>\n                        </EditDialog>\n                    </div>}\n                  </CardContent>\n                </Card>\n\n                 <Button className=\"w-full bg-accent-green hover:bg-accent-green/90 text-white\"><FileDown/> Tải CV (.pdf)</Button>\n                 <div className=\"text-center pt-4\">\n                    <Button variant=\"link\" className=\"text-muted-foreground text-sm\" onClick={() => { /* Handle logout */ }}>\n                        <LogOut className=\"mr-2 h-4 w-4\"/>\n                        Đăng xuất\n                    </Button>\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/disc/page.tsx": "\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowRight, Users, CheckSquare, BarChartHorizontal } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nconst features = [\n  {\n    icon: Users,\n    title: 'Thấu hiểu bản thân',\n    description: 'Nhận diện phong cách hành vi tự nhiên của bạn, điểm mạnh, điểm yếu và cách bạn tương tác với người khác.'\n  },\n  {\n    icon: CheckSquare,\n    title: 'Cải thiện giao tiếp',\n    description: 'Học cách giao tiếp hiệu quả hơn với những người có nhóm tính cách khác nhau, giảm thiểu xung đột và hiểu lầm.'\n  },\n  {\n    icon: BarChartHorizontal,\n    title: 'Định hướng sự nghiệp',\n    description: 'Khám phá những môi trường làm việc và ngành nghề phù hợp nhất với tính cách của bạn để phát huy tối đa tiềm năng.'\n  }\n];\n\nexport default function DiscLandingPage() {\n  return (\n    <div className=\"bg-secondary py-16 md:py-24\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12\">\n          <div className=\"flex justify-center items-center gap-4 mb-4\">\n             <Image src=\"https://placehold.co/100x100.png\" alt=\"DISC Icon\" width={80} height={80} data-ai-hint=\"colorful chart icon\"/>\n             <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-primary\">\n              Trắc nghiệm tính cách DISC\n            </h1>\n          </div>\n          \n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n            Khám phá phong cách hành vi của bạn qua 4 nhóm tính cách cốt lõi: Thống trị (Dominance), Ảnh hưởng (Influence), Kiên định (Steadiness) và Tuân thủ (Conscientiousness).\n          </p>\n        </div>\n        \n        <Card className=\"max-w-5xl mx-auto shadow-xl mb-12\">\n            <CardContent className=\"p-8 grid md:grid-cols-3 gap-8\">\n                {features.map(feature => (\n                    <div key={feature.title} className=\"flex flex-col items-center text-center\">\n                        <div className=\"bg-accent-green/10 p-4 rounded-full mb-4\">\n                            <feature.icon className=\"w-10 h-10 text-accent-green\" />\n                        </div>\n                        <h3 className=\"font-bold text-xl font-headline mb-2\">{feature.title}</h3>\n                        <p className=\"text-muted-foreground text-sm\">{feature.description}</p>\n                    </div>\n                ))}\n            </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n            <p className=\"text-muted-foreground mb-6\">Bài test gồm 28 câu hỏi và sẽ mất khoảng 5-10 phút để hoàn thành.</p>\n            <Button asChild size=\"lg\" className=\"bg-accent-green text-white hover:bg-accent-green/90\">\n                <Link href=\"/career-orientation/disc/test\">\n                    Bắt đầu làm bài <ArrowRight className=\"ml-2\" />\n                </Link>\n            </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/disc/test/page.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { discQuestions, discProfile, type DISCGroup } from '@/lib/disc-data';\nimport { BarChart as RechartsBarChart, Bar, XAxis, YAxis, Tooltip, ResponsiveContainer, Cell } from 'recharts';\nimport { Check, ArrowRight } from 'lucide-react';\nimport Link from 'next/link';\n\ntype Answers = {\n  most: { [key: number]: DISCGroup }; // key is questionId, value is the group of the chosen word\n  least: { [key: number]: DISCGroup };\n};\n\nconst COLORS = {\n  D: 'hsl(var(--accent-red))',\n  I: 'hsl(var(--accent-yellow))',\n  S: 'hsl(var(--accent-green))',\n  C: 'hsl(var(--accent-blue))',\n};\n\nexport default function DiscTestPage() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Answers>({ most: {}, least: {} });\n  const [showResults, setShowResults] = useState(false);\n\n  const totalQuestions = discQuestions.length;\n  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;\n  \n  const currentQuestion = discQuestions[currentQuestionIndex];\n  \n  const handleAnswerChange = (type: 'most' | 'least', wordGroup: DISCGroup) => {\n    setAnswers(prev => ({\n      ...prev,\n      [type]: {\n        ...prev[type],\n        [currentQuestion.id]: wordGroup,\n      },\n    }));\n  };\n\n  const isQuestionAnswered = () => {\n    return answers.most[currentQuestion.id] && answers.least[currentQuestion.id];\n  }\n  \n  const isSelectionDisabled = (type: 'most' | 'least', wordGroup: DISCGroup) => {\n    const oppositeType = type === 'most' ? 'least' : 'most';\n    return answers[oppositeType][currentQuestion.id] === wordGroup;\n  }\n\n  const handleNext = () => {\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const calculateResults = () => {\n    const scores = { D: 0, I: 0, S: 0, C: 0 };\n    \n    for (const qId in answers.most) {\n      const group = answers.most[qId];\n      scores[group]++;\n    }\n    \n    for (const qId in answers.least) {\n      const group = answers.least[qId];\n      scores[group]--;\n    }\n\n    const resultData = Object.entries(scores).map(([key, value]) => ({\n      name: discProfile[key as DISCGroup].name,\n      code: key as DISCGroup,\n      score: value\n    }));\n\n    resultData.sort((a, b) => b.score - a.score);\n    return resultData;\n  };\n\n  if (showResults) {\n    const results = calculateResults();\n    const topProfile = discProfile[results[0].code];\n\n    return (\n      <div className=\"bg-secondary py-12\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <Card className=\"max-w-4xl mx-auto shadow-xl\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-headline text-3xl text-primary\">Kết quả Trắc nghiệm DISC</CardTitle>\n              <CardDescription>Dưới đây là phân tích về phong cách hành vi nổi trội của bạn.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <div className=\"text-center p-6 bg-primary/10 rounded-lg\">\n                <h3 className={`text-2xl font-bold font-headline text-[${COLORS[results[0].code]}]`}>{topProfile.name}</h3>\n                <p className=\"mt-2 text-muted-foreground\">{topProfile.description}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-bold text-lg mb-4 text-center\">Biểu đồ điểm các nhóm tính cách</h4>\n                <div style={{ width: '100%', height: 250 }}>\n                  <ResponsiveContainer>\n                    <RechartsBarChart data={results} margin={{ top: 5, right: 20, left: 20, bottom: 5 }}>\n                      <XAxis dataKey=\"code\" tick={{ fill: 'hsl(var(--muted-foreground))' }} />\n                      <YAxis tick={{ fill: 'hsl(var(--muted-foreground))' }} />\n                      <Tooltip \n                        cursor={{fill: 'hsla(var(--muted), 0.5)'}}\n                        contentStyle={{\n                            backgroundColor: 'hsl(var(--background))',\n                            borderRadius: 'var(--radius)',\n                            border: '1px solid hsl(var(--border))'\n                        }}\n                      />\n                      <Bar dataKey=\"score\">\n                         {results.map((entry) => (\n                           <Cell key={`cell-${entry.code}`} fill={COLORS[entry.code]} />\n                         ))}\n                      </Bar>\n                    </RechartsBarChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n\n              <div className=\"grid md:grid-cols-2 gap-6 text-sm\">\n                 <div className=\"p-4 bg-secondary rounded-lg\">\n                    <h5 className=\"font-bold mb-2\">Điểm mạnh của bạn:</h5>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                        {topProfile.strengths.map(s => <li key={s}>{s}</li>)}\n                    </ul>\n                 </div>\n                 <div className=\"p-4 bg-secondary rounded-lg\">\n                    <h5 className=\"font-bold mb-2\">Cần cải thiện:</h5>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                        {topProfile.weaknesses.map(w => <li key={w}>{w}</li>)}\n                    </ul>\n                 </div>\n              </div>\n              \n              <div>\n                <h4 className=\"font-bold text-lg mb-2 text-center\">Gợi ý nghề nghiệp phù hợp</h4>\n                <div className=\"flex flex-wrap justify-center gap-2\">\n                    {topProfile.careers.map(job => (\n                        <span key={job} className=\"bg-accent-green/20 text-accent-green font-medium px-3 py-1 rounded-full text-sm\">{job}</span>\n                    ))}\n                </div>\n              </div>\n\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-secondary py-12 min-h-screen flex items-center\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"max-w-2xl mx-auto\">\n           <Card className=\"shadow-xl\">\n            <CardHeader>\n              <Progress value={progress} className=\"mb-4 h-2\" />\n              <CardTitle className=\"font-headline text-2xl md:text-3xl\">\n                Câu hỏi {currentQuestionIndex + 1}/{totalQuestions}\n              </CardTitle>\n              <CardDescription className=\"text-base mt-2\">\n                Trong mỗi nhóm 4 từ dưới đây, hãy chọn một từ mô tả **giống bạn nhất** và một từ **ít giống bạn nhất**.\n              </CardDescription>\n            </CardHeader>\n             <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-2 text-sm md:text-base\">\n                    <div className=\"md:col-span-1 font-bold\">Mô tả</div>\n                    <div className=\"font-bold text-center\">Giống nhất</div>\n                    <div className=\"font-bold text-center\">Ít giống nhất</div>\n                </div>\n                <div className=\"space-y-2\">\n                   {currentQuestion.words.map(word => (\n                      <div key={word.id} className=\"grid grid-cols-1 md:grid-cols-3 gap-4 items-center p-3 rounded-lg even:bg-secondary\">\n                          <div className=\"md:col-span-1\">{word.word}</div>\n                          <div className=\"flex justify-center\">\n                              <RadioGroup \n                                value={answers.most[currentQuestion.id] === word.group ? word.group : ''}\n                                onValueChange={() => handleAnswerChange('most', word.group)}\n                              >\n                                  <RadioGroupItem \n                                    value={word.group} \n                                    id={`most-${word.id}`} \n                                    disabled={isSelectionDisabled('most', word.group)}\n                                  />\n                              </RadioGroup>\n                          </div>\n                          <div className=\"flex justify-center\">\n                              <RadioGroup \n                                 value={answers.least[currentQuestion.id] === word.group ? word.group : ''}\n                                 onValueChange={() => handleAnswerChange('least', word.group)}\n                              >\n                                  <RadioGroupItem \n                                    value={word.group} \n                                    id={`least-${word.id}`}\n                                    disabled={isSelectionDisabled('least', word.group)}\n                                  />\n                              </RadioGroup>\n                          </div>\n                      </div>\n                   ))}\n                </div>\n             </CardContent>\n             <CardFooter className=\"flex justify-end mt-4\">\n               <Button onClick={handleNext} disabled={!isQuestionAnswered()}>\n                {currentQuestionIndex < totalQuestions - 1 ? 'Tiếp theo' : 'Xem kết quả'}\n                {currentQuestionIndex < totalQuestions - 1 ? <ArrowRight className=\"ml-2\" /> : <Check className=\"ml-2\" />}\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/holland/page.tsx": "\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { ArrowRight, Book, User, Briefcase } from 'lucide-react';\nimport Link from 'next/link';\n\nconst ageGroups = [\n  {\n    title: 'Học sinh THCS (12-15 tuổi)',\n    description: 'Khám phá sớm các nhóm ngành nghề phù hợp với sở thích và năng khiếu của bản thân.',\n    icon: Book,\n    link: '/career-orientation/holland/test?ageGroup=thcs',\n    color: 'accent-orange'\n  },\n  {\n    title: 'Học sinh PTTH & Sinh viên (16-22 tuổi)',\n    description: 'Định hướng chọn trường, chọn ngành học phù hợp để chuẩn bị cho sự nghiệp tương lai.',\n    icon: User,\n    link: '/career-orientation/holland/test?ageGroup=ptth-sv',\n    color: 'accent-green'\n  },\n  {\n    title: 'Người đi làm (23+ tuổi)',\n    description: 'Tìm hiểu sâu hơn về bản thân để lựa chọn công việc đúng đam mê hoặc chuyển đổi ngành nghề.',\n    icon: Briefcase,\n    link: '/career-orientation/holland/test?ageGroup=di-lam',\n    color: 'accent-blue'\n  }\n];\n\nexport default function HollandLandingPage() {\n  return (\n    <div className=\"bg-secondary py-16 md:py-24\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-primary\">\n            Trắc nghiệm sở thích nghề nghiệp Holland\n          </h1>\n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n            Hãy chọn nhóm tuổi của bạn để bắt đầu bài kiểm tra và khám phá con đường sự nghiệp phù hợp nhất.\n          </p>\n        </div>\n\n        <div className=\"max-w-4xl mx-auto grid grid-cols-1 md:grid-cols-3 gap-8\">\n          {ageGroups.map((group) => (\n            <Card key={group.title} className={`flex flex-col text-center border-t-4 border-${group.color} shadow-lg hover:shadow-xl transition-shadow`}>\n              <CardHeader>\n                 <div className={`mx-auto bg-${group.color}/10 rounded-full p-4 w-fit`}>\n                    <group.icon className={`h-10 w-10 text-${group.color}`} />\n                </div>\n                <CardTitle className=\"font-headline mt-4 text-xl\">{group.title}</CardTitle>\n              </CardHeader>\n              <CardContent className=\"flex-grow\">\n                <p className=\"text-muted-foreground text-sm\">{group.description}</p>\n              </CardContent>\n              <div className=\"p-6 pt-0\">\n                 <Button asChild className={`w-full bg-${group.color} text-white hover:bg-${group.color}/90`}>\n                    <Link href={group.link}>\n                        Bắt đầu <ArrowRight className=\"ml-2\" />\n                    </Link>\n                </Button>\n              </div>\n            </Card>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/holland/test/page.tsx": "\n'use client';\n\nimport { useState, useEffect, useRef } from 'react';\nimport { useSearchParams } from 'next/navigation';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';\nimport { Label } from '@/components/ui/label';\nimport { hollandDataThcs, hollandDataPtthSv, hollandDataDiLam, type HollandGroup } from '@/lib/holland-data';\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Cell, Tooltip } from 'recharts';\nimport { Check, ArrowRight, Loader2 } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\n\ntype Answers = {\n  [key: string]: number; // key is \"groupCode-questionId\", value is the score\n};\n\nconst interestLevels = [\n  { value: 2, label: 'Thích' },\n  { value: 1, label: 'Không rõ' },\n  { value: 0, label: 'Không thích' },\n];\n\nconst COLORS = ['#FFBB28', '#FF8042', '#0088FE', '#00C49F', '#AF19FF', '#FF19A6'];\n\nconst getHollandDataByAgeGroup = (ageGroup: string | null): HollandGroup[] => {\n    switch (ageGroup) {\n        case 'thcs':\n            return hollandDataThcs;\n        case 'ptth-sv':\n            return hollandDataPtthSv;\n        case 'di-lam':\n            return hollandDataDiLam;\n        default:\n            return hollandDataDiLam; // Default to working adults\n    }\n}\n\n\nexport default function HollandTestPage() {\n  const searchParams = useSearchParams();\n  const ageGroup = searchParams.get('ageGroup');\n\n  const [hollandData, setHollandData] = useState<HollandGroup[] | null>(null);\n  const [currentGroupIndex, setCurrentGroupIndex] = useState(0);\n  const [answers, setAnswers] = useState<Answers>({});\n  const [showResults, setShowResults] = useState(false);\n  const [isScrolled, setIsScrolled] = useState(false);\n  \n  const headerRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    const data = getHollandDataByAgeGroup(ageGroup);\n    setHollandData(data);\n  }, [ageGroup]);\n\n   useEffect(() => {\n    const currentHeader = headerRef.current;\n    if (!currentHeader) return;\n    \n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        setIsScrolled(!entry.isIntersecting);\n      },\n      { rootMargin: \"-1px 0px 0px 0px\", threshold: 1.0 } \n    );\n\n    observer.observe(currentHeader);\n\n    return () => {\n      if (currentHeader) {\n        observer.unobserve(currentHeader);\n      }\n    };\n  }, [hollandData]);\n\n  if (!hollandData) {\n      return (\n        <div className=\"bg-secondary py-12 flex items-center justify-center min-h-screen\">\n            <Loader2 className=\"h-16 w-16 animate-spin text-primary\" />\n        </div>\n      )\n  }\n\n  const totalQuestions = hollandData.reduce((sum, group) => sum + group.questions.length, 0);\n  const answeredQuestions = Object.keys(answers).length;\n  const progress = (answeredQuestions / totalQuestions) * 100;\n  \n  const currentGroup = hollandData[currentGroupIndex];\n  \n  const handleAnswerChange = (questionId: number, value: string) => {\n    setAnswers(prev => ({\n      ...prev,\n      [`${currentGroup.code}-${questionId}`]: parseInt(value, 10),\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentGroupIndex < hollandData.length - 1) {\n      setCurrentGroupIndex(prev => prev + 1);\n      window.scrollTo(0, 0); // Scroll to top on next group\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const calculateResults = () => {\n    const scores = hollandData.map(group => ({\n      name: group.name,\n      code: group.code,\n      score: group.questions.reduce((total, q) => total + (answers[`${group.code}-${q.id}`] || 0), 0),\n    }));\n    scores.sort((a, b) => b.score - a.score);\n    return scores;\n  };\n\n  if (showResults) {\n    const results = calculateResults();\n    const topGroup = results[0];\n    const topGroupData = hollandData.find(g => g.code === topGroup.code);\n\n    return (\n      <div className=\"bg-secondary py-12\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <Card className=\"max-w-4xl mx-auto shadow-xl\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-headline text-3xl text-primary\">Kết quả trắc nghiệm Holland</CardTitle>\n              <CardDescription>Đây là nhóm sở thích nghề nghiệp nổi trội nhất của bạn.</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <div className=\"text-center p-6 bg-primary/10 rounded-lg\">\n                <h3 className=\"text-2xl font-bold font-headline\">{topGroup.name}</h3>\n                <p className=\"mt-2 text-muted-foreground\">{topGroupData?.description}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-bold text-lg mb-4 text-center\">Biểu đồ điểm các nhóm</h4>\n                <div style={{ width: '100%', height: 300 }}>\n                  <ResponsiveContainer>\n                    <BarChart data={results} layout=\"vertical\" margin={{ left: 120 }}>\n                      <XAxis type=\"number\" hide />\n                      <YAxis dataKey=\"name\" type=\"category\" width={120} tickLine={false} axisLine={false} />\n                      <Tooltip \n                        cursor={{fill: 'hsla(var(--muted), 0.5)'}}\n                        contentStyle={{\n                            backgroundColor: 'hsl(var(--background))',\n                            borderRadius: 'var(--radius)',\n                            border: '1px solid hsl(var(--border))'\n                        }}\n                      />\n                      <Bar dataKey=\"score\" fill=\"#8884d8\" barSize={30}>\n                        {results.map((entry, index) => (\n                          <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                        ))}\n                      </Bar>\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </div>\n\n              <div>\n                <h4 className=\"font-bold text-lg mb-2 text-center\">Gợi ý nghề nghiệp cho nhóm {topGroup.code}</h4>\n                <p className=\"text-center text-muted-foreground\">Dựa trên kết quả, bạn có thể phù hợp với các công việc liên quan đến kỹ thuật, máy móc, và các hoạt động thực tế. Hãy tìm kiếm các việc làm trong ngành cơ khí, xây dựng, nông nghiệp tại Nhật Bản.</p>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  const groupNameShort = currentGroup.name.split(' - ')[1];\n\n  return (\n    <div className=\"bg-secondary py-12\">\n      <div className=\"relative max-w-4xl mx-auto\">\n        <div className=\"relative max-w-4xl mx-auto\">\n          {/* Sticky Header - This is shown only when scrolled */}\n          <div\n            className={cn(\n              'sticky top-0 z-20 w-full transition-opacity max-w-4xl mx-auto',\n              isScrolled ? 'opacity-100' : 'opacity-0 pointer-events-none'\n            )}\n          >\n            <div className=\"bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60 rounded-t-lg border-b border-x -mb-px\">\n              <div className=\"p-4\">\n                <h2 className=\"font-bold text-lg\">{`Holland - ${groupNameShort} (${currentGroupIndex + 1}/${\n                  hollandData.length\n                })`}</h2>\n              </div>\n              <div className=\"grid grid-cols-5 p-2 font-semibold border-t bg-secondary/50\">\n                <div className=\"col-span-2 text-left pl-3\">Hoạt động</div>\n                {interestLevels.map((level) => (\n                  <div key={level.value} className=\"text-center text-xs md:text-sm whitespace-nowrap\">\n                    {level.label}\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          <Card\n            className={cn(\n              'shadow-xl overflow-visible',\n              isScrolled ? 'rounded-t-none border-t-0' : ''\n            )}\n          >\n            <CardHeader ref={headerRef}>\n              <Progress value={progress} className=\"mb-4 h-2\" />\n              <h2 className=\"text-3xl font-headline font-bold\">\n                {`Trắc nghiệm Holland - ${currentGroup.name} (${currentGroupIndex + 1}/${hollandData.length})`}\n              </h2>\n              <CardDescription className=\"text-base mt-2\">{currentGroup.description}</CardDescription>\n              <p className=\"text-sm text-muted-foreground pt-4\">\n                Với mỗi hoạt động dưới đây, hãy chọn mức độ bạn yêu thích khi thực hiện nó.\n              </p>\n            </CardHeader>\n\n            {/* Static Header - visible on desktop before scroll, and on mobile when not scrolled */}\n             <div className={cn(\n                \"grid-cols-5 p-2 font-semibold border-t border-b bg-secondary/50\",\n                 isScrolled ? \"hidden md:grid\" : \"grid\",\n                 !isScrolled ? \"grid\" : \"hidden md:grid\"\n             )}>\n              <div className=\"col-span-2 text-left pl-3\">Hoạt động</div>\n              {interestLevels.map((level) => (\n                <div key={level.value} className=\"text-center text-xs md:text-sm whitespace-nowrap\">\n                  {level.label}\n                </div>\n              ))}\n            </div>\n\n            <CardContent className=\"p-0\">\n              <div className=\"min-w-full\">\n                {currentGroup.questions.map((q, index) => (\n                  <div\n                    key={`${currentGroup.code}-${q.id}`}\n                    className={cn(\n                      'grid grid-cols-5 items-center border-b',\n                      index % 2 === 1 ? 'bg-secondary/50' : 'bg-background'\n                    )}\n                  >\n                    <div className=\"col-span-2 p-3 text-sm\">{q.text}</div>\n                    <div className=\"col-span-3\">\n                      <RadioGroup\n                        value={answers[`${currentGroup.code}-${q.id}`]?.toString()}\n                        onValueChange={(value) => handleAnswerChange(q.id, value)}\n                        className=\"flex justify-around items-center w-full\"\n                      >\n                        {interestLevels.map((level) => (\n                          <div\n                            key={`${currentGroup.code}-q${q.id}-l${level.value}`}\n                            className=\"flex items-center justify-center py-3 w-full\"\n                          >\n                            <RadioGroupItem\n                              value={level.value.toString()}\n                              id={`${currentGroup.code}-q${q.id}-l${level.value}`}\n                            />\n                          </div>\n                        ))}\n                      </RadioGroup>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n\n            <CardFooter className=\"flex justify-end mt-4 p-4\">\n              <Button\n                onClick={handleNext}\n                disabled={currentGroup.questions.some((q) => answers[`${currentGroup.code}-${q.id}`] === undefined)}\n              >\n                {currentGroupIndex < hollandData.length - 1 ? 'Tiếp theo' : 'Xem kết quả'}\n                {currentGroupIndex < hollandData.length - 1 ? (\n                  <ArrowRight className=\"ml-2\" />\n                ) : (\n                  <Check className=\"ml-2\" />\n                )}\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/mbti/page.tsx": "import { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { ArrowRight, Users, CheckSquare, BarChartHorizontal, BrainCircuit } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nconst features = [\n  {\n    icon: BrainCircuit,\n    title: 'Hiểu rõ bản thân',\n    description: 'Xác định xu hướng tự nhiên của bạn trong cách bạn tiếp nhận năng lượng, thu thập thông tin, ra quyết định và tổ chức cuộc sống.'\n  },\n  {\n    icon: Users,\n    title: 'Cải thiện mối quan hệ',\n    description: 'Hiểu cách người khác suy nghĩ và hành động, từ đó cải thiện giao tiếp và sự đồng cảm trong công việc và cuộc sống.'\n  },\n  {\n    icon: BarChartHorizontal,\n    title: 'Định hướng sự nghiệp',\n    description: 'Khám phá những ngành nghề và môi trường làm việc phù hợp nhất, nơi bạn có thể phát huy tối đa điểm mạnh của mình.'\n  }\n];\n\nexport default function MbtiLandingPage() {\n  return (\n    <div className=\"bg-secondary py-16 md:py-24\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"text-center mb-12\">\n          <div className=\"flex justify-center items-center gap-4 mb-4\">\n             <Image src=\"https://placehold.co/100x100.png\" alt=\"MBTI Icon\" width={80} height={80} data-ai-hint=\"personality puzzle icon\"/>\n             <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-primary\">\n              Trắc nghiệm tính cách MBTI\n            </h1>\n          </div>\n          \n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n            Khám phá 1 trong 16 loại tính cách của bạn để hiểu sâu hơn về bản thân và tìm ra con đường sự nghiệp lý tưởng.\n          </p>\n        </div>\n        \n        <Card className=\"max-w-5xl mx-auto shadow-xl mb-12\">\n            <CardContent className=\"p-8 grid md:grid-cols-3 gap-8\">\n                {features.map(feature => (\n                    <div key={feature.title} className=\"flex flex-col items-center text-center\">\n                        <div className=\"bg-accent-blue/10 p-4 rounded-full mb-4\">\n                            <feature.icon className=\"w-10 h-10 text-accent-blue\" />\n                        </div>\n                        <h3 className=\"font-bold text-xl font-headline mb-2\">{feature.title}</h3>\n                        <p className=\"text-muted-foreground text-sm\">{feature.description}</p>\n                    </div>\n                ))}\n            </CardContent>\n        </Card>\n\n        <div className=\"text-center\">\n            <p className=\"text-muted-foreground mb-6\">Bài test gồm 20 câu hỏi và sẽ mất khoảng 5 phút để hoàn thành.</p>\n            <Button asChild size=\"lg\" className=\"bg-accent-blue text-white hover:bg-accent-blue/90\">\n                <Link href=\"/career-orientation/mbti/test\">\n                    Bắt đầu làm bài <ArrowRight className=\"ml-2\" />\n                </Link>\n            </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/mbti/test/page.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Progress } from '@/components/ui/progress';\nimport { mbtiQuestions, mbtiProfiles, type MbtiDimension } from '@/lib/mbti-data';\nimport { BarChart, Bar, XAxis, YAxis, ResponsiveContainer, Cell, Tooltip } from 'recharts';\nimport { Check, ArrowRight } from 'lucide-react';\nimport { cn } from '@/lib/utils';\nimport Image from 'next/image';\n\ntype Answers = {\n  [key: number]: number; // key: questionId, value: -2, -1, 1, 2\n};\n\nconst answerOptions = [\n    { label: 'Hoàn toàn sai', value: -2 },\n    { label: 'Hơi sai', value: -1 },\n    { label: 'Hơi đúng', value: 1 },\n    { label: 'Hoàn toàn đúng', value: 2 },\n];\n\nexport default function MbtiTestPage() {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  const [answers, setAnswers] = useState<Answers>({});\n  const [showResults, setShowResults] = useState(false);\n\n  const totalQuestions = mbtiQuestions.length;\n  const progress = ((currentQuestionIndex + 1) / totalQuestions) * 100;\n  \n  const currentQuestion = mbtiQuestions[currentQuestionIndex];\n  \n  const handleAnswerChange = (value: number) => {\n    setAnswers(prev => ({\n      ...prev,\n      [currentQuestion.id]: value,\n    }));\n  };\n\n  const handleNext = () => {\n    if (currentQuestionIndex < totalQuestions - 1) {\n      setCurrentQuestionIndex(prev => prev + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  const calculateResults = () => {\n    const scores: { [key in MbtiDimension]: number } = { EI: 0, SN: 0, TF: 0, JP: 0 };\n    \n    mbtiQuestions.forEach(q => {\n        if(answers[q.id]){\n            scores[q.dimension] += answers[q.id] * q.direction;\n        }\n    });\n\n    const resultType = [\n        scores.EI > 0 ? 'E' : 'I',\n        scores.SN > 0 ? 'S' : 'N',\n        scores.TF > 0 ? 'T' : 'F',\n        scores.JP > 0 ? 'J' : 'P'\n    ].join('');\n    \n    return {\n        type: resultType,\n        profile: mbtiProfiles[resultType],\n    };\n  };\n\n  if (showResults) {\n    const { type, profile } = calculateResults();\n\n    return (\n      <div className=\"bg-secondary py-12\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <Card className=\"max-w-4xl mx-auto shadow-xl\">\n            <CardHeader className=\"text-center\">\n              <CardTitle className=\"font-headline text-3xl text-primary\">Kết quả Trắc nghiệm MBTI</CardTitle>\n              <CardDescription>Loại tính cách của bạn là:</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-8\">\n              <div className=\"text-center p-6 bg-primary/10 rounded-lg\">\n                <h2 className=\"text-4xl font-bold font-headline text-accent-blue\">{type}</h2>\n                <h3 className=\"text-2xl font-semibold mt-1\">{profile.name}</h3>\n                <p className=\"mt-4 text-muted-foreground\">{profile.description}</p>\n              </div>\n\n              <div>\n                <h4 className=\"font-bold text-lg mb-2 text-center\">Gợi ý nghề nghiệp phù hợp</h4>\n                <div className=\"flex flex-wrap justify-center gap-2\">\n                    {profile.careers.map((job: string) => (\n                        <span key={job} className=\"bg-accent-blue/20 text-accent-blue font-medium px-3 py-1 rounded-full text-sm\">{job}</span>\n                    ))}\n                </div>\n              </div>\n\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"bg-secondary py-12 min-h-screen flex items-center\">\n      <div className=\"container mx-auto px-4 md:px-6\">\n        <div className=\"max-w-2xl mx-auto\">\n           <Card className=\"shadow-xl\">\n            <CardHeader>\n              <Progress value={progress} className=\"mb-4 h-2\" />\n              <CardTitle className=\"font-headline text-xl md:text-2xl\">\n                Câu hỏi {currentQuestionIndex + 1}/{totalQuestions}\n              </CardTitle>\n              <CardDescription className=\"text-lg mt-4 text-center font-semibold text-foreground\">\n                \"{currentQuestion.text}\"\n              </CardDescription>\n            </CardHeader>\n             <CardContent className=\"flex justify-center items-center gap-2 md:gap-4 my-6\">\n               {answerOptions.map(option => (\n                    <Button \n                        key={option.value}\n                        variant={answers[currentQuestion.id] === option.value ? \"default\" : \"outline\"}\n                        onClick={() => handleAnswerChange(option.value)}\n                        className={cn(\"flex flex-col h-auto p-3 text-center transition-all duration-200\", \n                            answers[currentQuestion.id] === option.value \n                                ? 'bg-primary text-white scale-110'\n                                : 'hover:bg-primary/10'\n                        )}\n                    >\n                       <span className=\"text-xs md:text-sm font-bold\">{option.label}</span>\n                    </Button>\n               ))}\n             </CardContent>\n             <CardFooter className=\"flex justify-between mt-4\">\n                <div className=\"text-sm text-muted-foreground\">Chọn mức độ bạn đồng ý.</div>\n               <Button onClick={handleNext} disabled={answers[currentQuestion.id] === undefined}>\n                {currentQuestionIndex < totalQuestions - 1 ? 'Tiếp theo' : 'Xem kết quả'}\n                <ArrowRight className=\"ml-2\" />\n              </Button>\n            </CardFooter>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/career-orientation/page.tsx": "\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { BrainCircuit, BarChartHorizontal, ClipboardCheck, ArrowRight, UserCheck } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nconst tests = [\n  {\n    icon: BrainCircuit,\n    title: 'Trắc nghiệm Sở thích nghề nghiệp Holland',\n    description: 'Khám phá 6 nhóm sở thích nghề nghiệp tương ứng với bạn (Realistic, Investigative, Artistic, Social, Enterprising, Conventional) để tìm ra môi trường làm việc phù hợp nhất.',\n    link: '/career-orientation/holland',\n    color: 'accent-orange'\n  },\n  {\n    icon: ClipboardCheck,\n    title: 'Khám phá nghề nghiệp O*NET',\n    description: 'Dựa trên sở thích của bạn, bài test sẽ gợi ý danh sách các ngành nghề cụ thể đang có nhu cầu cao trên thị trường, giúp bạn có lựa chọn thực tế và thông minh.',\n    link: '/career-orientation/holland',\n    color: 'accent-blue'\n  },\n  {\n    icon: BarChartHorizontal,\n    title: 'Trắc nghiệm tính cách DISC',\n    description: 'Hiểu rõ phong cách hành vi của bạn qua 4 nhóm tính cách (Dominance, Influence, Steadiness, Conscientiousness), giúp cải thiện giao tiếp và làm việc nhóm.',\n    link: '/career-orientation/disc',\n    color: 'accent-green'\n  },\n  {\n    icon: UserCheck,\n    title: 'Trắc nghiệm tính cách MBTI',\n    description: 'Xác định 1 trong 16 loại tính cách của bạn để hiểu rõ hơn về điểm mạnh, điểm yếu và các ngành nghề phù hợp với xu hướng tự nhiên của bạn.',\n    link: '/career-orientation/mbti',\n    color: 'accent-blue'\n  }\n];\n\nexport default function CareerOrientationPage() {\n  return (\n    <>\n      {/* Hero Section */}\n      <section className=\"w-full bg-primary text-primary-foreground py-20 md:py-28\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"text-center md:text-left\">\n              <h1 className=\"text-4xl md:text-5xl font-headline font-bold mb-4\">\n                Khám phá bản thân, Định hướng tương lai\n              </h1>\n              <p className=\"text-lg md:text-xl max-w-md mx-auto md:mx-0 text-primary-foreground/80\">\n                Thực hiện các bài trắc nghiệm khoa học để hiểu rõ tiềm năng, sở thích và tính cách của bạn, từ đó lựa chọn con đường sự nghiệp phù hợp nhất.\n              </p>\n            </div>\n             <div className=\"relative flex justify-center\">\n                <Image \n                  src=\"https://placehold.co/500x500.png\"\n                  alt=\"Biểu đồ hướng nghiệp\"\n                  width={450}\n                  height={450}\n                  className=\"rounded-full shadow-2xl\"\n                  data-ai-hint=\"career path diagram\"\n                />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Tests Section */}\n      <section className=\"w-full py-20 md:py-28 bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n           <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-headline font-bold text-accent\">Bộ công cụ hướng nghiệp</h2>\n            <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n              Các bài kiểm tra này được thiết kế dựa trên các mô hình tâm lý học và hướng nghiệp uy tín trên thế giới.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 items-stretch\">\n            {tests.map(test => (\n              <Card key={test.title} className={`flex flex-col text-center p-6 border-t-4 border-${test.color} shadow-lg hover:shadow-xl transition-shadow`}>\n                <CardHeader>\n                    <div className={`mx-auto bg-${test.color}/10 rounded-full p-4 w-fit`}>\n                        <test.icon className={`h-12 w-12 text-${test.color}`} />\n                    </div>\n                    <CardTitle className=\"font-headline mt-4 text-xl\">{test.title}</CardTitle>\n                </CardHeader>\n                 <CardContent className=\"flex-grow\">\n                    <p className=\"text-muted-foreground text-sm\">{test.description}</p>\n                 </CardContent>\n                 <div className=\"mt-auto pt-4\">\n                    <Button asChild className={`bg-${test.color} text-white hover:bg-${test.color}/90`}>\n                      <Link href={test.link}>\n                        Bắt đầu làm bài <ArrowRight className=\"ml-2\" />\n                      </Link>\n                    </Button>\n                 </div>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </>\n  );\n}\n",
  "src/app/consultant-profile/page.tsx": "\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Award, Briefcase, CheckCircle, Handshake, LineChart, MessageSquare, PieChart, Send, ShieldCheck, Sparkles, Star, Target, Users, Phone } from 'lucide-react';\nimport Image from 'next/image';\n\nconst consultant = {\n  name: 'Nguyễn Văn A',\n  avatarUrl: 'https://placehold.co/200x200.png',\n  dataAiHint: 'professional man portrait',\n  experience: '3 năm 2 tháng',\n  mainExpertise: 'Tư vấn việc làm Kỹ năng đặc định (Tokutei) 2 đầu Nhật Việt',\n  subExpertise: 'Tư vấn việc làm Thực tập sinh Nhật Bản',\n  successfulCandidates: 328,\n  managedJobs: 196,\n  strengths: ['Tận tình', 'Nhiều đơn', 'Hiểu rõ ngành'],\n};\n\nconst companyValues = [\n    {\n        icon: Sparkles,\n        title: \"Ưu điểm hệ thống\",\n        description: \"Áp dụng công nghệ vào tìm đơn nên sẽ có hệ thống đơn rất nhiều, cho các bạn được nhiều lựa chọn và so sánh hơn thị trường.\"\n    },\n    {\n        icon: Users,\n        title: \"Đội ngũ hỗ trợ tận tâm\",\n        description: \"Có đội ngũ Sale và công nghệ nên luôn care giúp bạn đến lúc tìm được đơn.\"\n    },\n    {\n        icon: Send,\n        title: \"Cập nhật thông tin liên tục\",\n        description: \"Có hạ tầng MKT để bạn thường xuyên nhận được thông tin đơn và thông tin về TKT, thông tin về làm việc tại Nhật hữu ích nhất.\"\n    }\n]\n\nconst addedValues = [\n    {\n        icon: Target,\n        title: \"Đào tạo phỏng vấn chuyên sâu\",\n        description: \"Tăng tỷ lệ đỗ phỏng vấn lên đến 90%.\"\n    },\n    {\n        icon: Award,\n        title: \"Hỗ trợ phát triển tư duy và sự nghiệp\",\n        description: \"Giúp bạn biết cần gì để có thể lên Ginou 2, ở lại Nhật lâu dài và có thăng tiến trong công việc, thu nhập tốt hơn.\"\n    },\n    {\n        icon: ShieldCheck,\n        title: \"Đồng hành và giải quyết vấn đề\",\n        description: \"Tư vấn giải quyết các vấn đề thắc mắc về tư duy, những khúc mắc, ứng xử, văn hoá trong cuộc sống tại Nhật.\"\n    },\n]\n\nconst ZaloIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg viewBox=\"0 0 262 263\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n        <path d=\"M131 0C58.649 0 0 58.649 0 131C0 203.351 58.649 262 131 262C203.351 262 262 203.351 262 131C262 58.649 203.351 0 131 0ZM197.838 170.368L173.962 194.244C171.139 197.067 167.247 197.68 163.639 196.223L126.541 182.903C125.129 182.413 123.824 181.711 122.625 180.892L74.832 144.37C71.748 142.029 70.832 137.989 72.585 134.577L84.975 111.758C86.728 108.347 90.722 106.889 94.276 108.347L131.374 121.612C132.786 122.102 134.091 122.748 135.29 123.623L183.083 160.145C186.167 162.486 187.083 166.526 185.33 169.937L197.838 170.368Z\" fill=\"#0068FF\"/>\n    </svg>\n)\n\nconst MessengerIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg viewBox=\"0 0 32 32\" {...props}>\n    <path fill=\"#0099FF\" d=\"M16 4c-6.627 0-12 4.477-12 10c0 4.29 2.765 7.94 6.703 9.426c-0.125-0.75-0.19-1.426-0.09-2.128c0.21-1.637 1.044-4.88 1.044-4.88s-0.278-0.556-0.278-1.373c0-1.286 0.74-2.25 1.664-2.25c0.785 0 1.157 0.588 1.157 1.288c0 0.787-0.498 1.96-0.758 3.048c-0.218 0.908 0.45 1.646 1.34 1.646c1.604 0 2.684-2.053 2.684-4.526c0-2.243-1.464-3.83-3.952-3.83c-2.784 0-4.47 1.89-4.47 4.13c0 0.79 0.25 1.39 0.636 1.86c0.088 0.11 0.1 0.196 0.076 0.294c-0.088 0.35-0.295 1.18-0.34 1.378c-0.056 0.23-0.21 0.28-0.38 0.192c-1.076-0.55-1.556-2.2-1.556-3.42c0-2.82 2.39-5.91 6.76-5.91c3.56 0 6.01 2.414 6.01 5.3c0 3.32-1.99 6.16-4.99 6.16c-1 0-1.92-0.51-2.22-1.11l-0.78 3.12C12.25 24.31 14.01 25 16 25c6.627 0 12-4.477 12-10S22.627 4 16 4z\" />\n  </svg>\n)\n\nexport default function ConsultantProfilePage() {\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12\">\n        <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-8\">\n          {/* Left Column - Consultant Info */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card className=\"shadow-xl text-center p-6\">\n                <Avatar className=\"h-32 w-32 mx-auto border-4 border-primary shadow-lg\">\n                    <AvatarImage src={consultant.avatarUrl} alt={consultant.name} data-ai-hint={consultant.dataAiHint} />\n                    <AvatarFallback>{consultant.name.charAt(0)}</AvatarFallback>\n                </Avatar>\n                <h1 className=\"text-2xl font-headline font-bold mt-4\">{consultant.name}</h1>\n                <p className=\"text-primary font-semibold\">Tư vấn viên</p>\n                <div className=\"flex flex-wrap justify-center gap-2 mt-4\">\n                    {consultant.strengths.map(strength => (\n                        <Badge key={strength} variant=\"secondary\" className=\"bg-green-100 text-green-800 border-green-200\">{strength}</Badge>\n                    ))}\n                </div>\n            </Card>\n\n            <Card className=\"shadow-xl\">\n              <CardHeader><CardTitle className=\"font-headline text-xl\">Thông tin chuyên môn</CardTitle></CardHeader>\n              <CardContent className=\"space-y-4 text-sm\">\n                <p className=\"flex items-start gap-3\"><PieChart className=\"h-5 w-5 mt-0.5 text-muted-foreground\"/> <span><strong>Kinh nghiệm:</strong> {consultant.experience}</span></p>\n                <p className=\"flex items-start gap-3\"><Star className=\"h-5 w-5 mt-0.5 text-muted-foreground\"/> <span><strong>Lĩnh vực chính:</strong> {consultant.mainExpertise}</span></p>\n                <p className=\"flex items-start gap-3\"><Briefcase className=\"h-5 w-5 mt-0.5 text-muted-foreground\"/> <span><strong>Lĩnh vực phụ:</strong> {consultant.subExpertise}</span></p>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-xl\">\n                <CardHeader><CardTitle className=\"font-headline text-xl\">Thành tích nổi bật</CardTitle></CardHeader>\n                <CardContent className=\"flex justify-around text-center\">\n                    <div>\n                        <p className=\"text-3xl font-bold text-primary\">{consultant.successfulCandidates}</p>\n                        <p className=\"text-muted-foreground text-sm mt-1\">Ứng viên thành công</p>\n                    </div>\n                     <div>\n                        <p className=\"text-3xl font-bold text-primary\">{consultant.managedJobs}</p>\n                        <p className=\"text-muted-foreground text-sm mt-1\">Việc làm đang quản lý</p>\n                    </div>\n                </CardContent>\n            </Card>\n\n            <div className=\"w-full bg-accent-blue text-white rounded-full p-2 shadow-lg hover:shadow-xl transition-shadow cursor-pointer\">\n              <div className=\"flex items-center justify-center gap-3\">\n                <a href=\"#\" aria-label=\"Chat on Messenger\" className=\"bg-white rounded-full p-1.5 hover:opacity-90 transition-opacity\">\n                    <MessengerIcon className=\"h-8 w-8\"/>\n                </a>\n                <a href=\"#\" aria-label=\"Call\" className=\"bg-white rounded-full p-1.5 hover:opacity-90 transition-opacity\">\n                    <Phone className=\"h-8 w-8 text-green-500\"/>\n                </a>\n                 <a href=\"#\" aria-label=\"Chat on Zalo\" className=\"bg-white rounded-full p-1.5 hover:opacity-90 transition-opacity\">\n                    <ZaloIcon className=\"h-8 w-8\"/>\n                </a>\n                <span className=\"text-lg font-semibold\">Liên hệ tư vấn viên</span>\n              </div>\n            </div>\n          </div>\n\n          {/* Right Column - Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n             <Card className=\"shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"font-headline text-2xl text-primary\">Ưu điểm hệ thống</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {companyValues.map(item => (\n                    <div key={item.title} className=\"flex gap-4\">\n                        <div className=\"flex-shrink-0 bg-primary/10 text-primary rounded-full h-12 w-12 flex items-center justify-center\">\n                             <item.icon className=\"h-6 w-6\"/>\n                        </div>\n                        <div>\n                            <h3 className=\"font-bold text-lg\">{item.title}</h3>\n                            <p className=\"text-muted-foreground text-sm\">{item.description}</p>\n                        </div>\n                    </div>\n                ))}\n              </CardContent>\n            </Card>\n             <Card className=\"shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"font-headline text-2xl text-primary\">Giá trị gia tăng khi sử dụng dịch vụ</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-6\">\n                {addedValues.map(item => (\n                    <div key={item.title} className=\"flex gap-4 items-start\">\n                         <div className=\"flex-shrink-0 bg-primary/10 text-primary rounded-full h-12 w-12 flex items-center justify-center\">\n                             <item.icon className=\"h-6 w-6\"/>\n                        </div>\n                        <div>\n                            <h3 className=\"font-bold text-lg\">{item.title}</h3>\n                            <p className=\"text-muted-foreground text-sm\">{item.description}</p>\n                        </div>\n                    </div>\n                ))}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/dashboard/page.tsx": "\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Button } from '@/components/ui/button';\nimport { DashboardCharts } from '@/components/dashboard-charts';\nimport { CandidatesTable } from '@/components/dashboard-table';\n\nexport default function DashboardPage() {\n  return (\n    <div className=\"bg-secondary flex-1\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl font-headline font-bold\">Bảng điều khiển dữ liệu</h1>\n          <p className=\"text-muted-foreground mt-2 max-w-2xl mx-auto\">Phân tích tổng quan về nguồn nhân lực tiềm năng.</p>\n        </div>\n\n        {/* Filters */}\n        <Card className=\"mb-8 shadow-lg\">\n          <CardContent className=\"p-6 flex flex-wrap items-center gap-4\">\n            <h3 className=\"font-semibold text-lg mr-4\">Bộ lọc:</h3>\n            <div className=\"flex-grow grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 items-center\">\n              <Select>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Tỉnh/Thành phố\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"hcm\">TP. Hồ Chí Minh</SelectItem>\n                  <SelectItem value=\"hanoi\">Hà Nội</SelectItem>\n                  <SelectItem value=\"danang\">Đà Nẵng</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Trình độ\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"thpt\">THPT</SelectItem>\n                  <SelectItem value=\"cd\">Cao đẳng</SelectItem>\n                  <SelectItem value=\"dh\">Đại học</SelectItem>\n                </SelectContent>\n              </Select>\n               <Select>\n                <SelectTrigger className=\"w-full\">\n                  <SelectValue placeholder=\"Ngành\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"it\">Công nghệ thông tin</SelectItem>\n                  <SelectItem value=\"cokhi\">Cơ khí</SelectItem>\n                  <SelectItem value=\"detmay\">Dệt may</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button className=\"w-full bg-accent-orange text-white hover:bg-accent-orange/90\">Áp dụng</Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Charts */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-8 mb-8\">\n          <DashboardCharts />\n        </div>\n\n        {/* Table */}\n        <Card className=\"shadow-xl overflow-hidden\">\n          <CardHeader>\n            <CardTitle className=\"font-headline text-3xl\">10 Ứng viên nổi bật</CardTitle>\n            <CardDescription>Danh sách các ứng viên tiềm năng nhất dựa trên bộ lọc.</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <CandidatesTable />\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/employers/[id]/page.tsx": "\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Building, Calendar, Clock, MapPin, Users, Video, Briefcase } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\n\n// Mock data, in a real app this would be fetched based on params.id\nconst employer = {\n  id: 'samsung',\n  name: 'Samsung Electronics Vietnam',\n  industry: 'Điện tử',\n  location: 'Khu công nghệ cao, Quận 9, TP. Hồ Chí Minh',\n  logo: 'https://placehold.co/150x150.png',\n  dataAiHint: 'samsung logo',\n  banner: 'https://placehold.co/1200x400.png',\n  dataAiHintBanner: 'samsung factory',\n  size: '10,000+ nhân viên',\n  about: 'Samsung Electronics là một công ty điện tử đa quốc gia của Hàn Quốc, là một trong những nhà sản xuất thiết bị điện tử và linh kiện lớn nhất thế giới. Tại Việt Nam, chúng tôi có các nhà máy sản xuất lớn, tập trung vào việc sản xuất điện thoại di động và các thiết bị điện tử gia dụng, đóng góp lớn vào kim ngạch xuất khẩu của Việt Nam.',\n  videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ', // Placeholder video\n  images: [\n    { src: 'https://placehold.co/600x400.png', alt: 'Dây chuyền sản xuất', dataAiHint: 'production line' },\n    { src: 'https://placehold.co/600x400.png', alt: 'Khuôn viên công ty', dataAiHint: 'company campus' },\n    { src: 'https://placehold.co/600x400.png', alt: 'Hoạt động nhóm', dataAiHint: 'team activity' },\n  ],\n  jobs: [\n    { title: 'Kỹ sư Vận hành Dây chuyền', type: 'Toàn thời gian', date: '25/07/2024' },\n    { title: 'Nhân viên Kiểm tra Chất lượng (QC)', type: 'Toàn thời gian', date: '25/07/2024' },\n    { title: 'Thực tập sinh Kỹ thuật Phần mềm', type: 'Thực tập', date: '24/07/2024' },\n    { title: 'Công nhân Lắp ráp Linh kiện', type: 'Toàn thời gian', date: '22/07/2024' },\n  ]\n};\n\nexport default function EmployerDetailPage({ params }: { params: { id: string } }) {\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12\">\n        <Card className=\"shadow-2xl overflow-hidden\">\n          <CardHeader className=\"p-0 relative\">\n            <Image src={employer.banner} alt={`${employer.name} banner`} width={1200} height={400} className=\"w-full h-48 md:h-64 object-cover\" data-ai-hint={employer.dataAiHintBanner}/>\n            <div className=\"absolute inset-0 bg-black/40\" />\n            <div className=\"absolute bottom-0 left-0 p-6 flex items-end\">\n               <Avatar className=\"h-24 w-24 md:h-32 md:w-32 border-4 border-background bg-background shadow-lg\">\n                  <AvatarImage src={employer.logo} alt={employer.name} data-ai-hint={employer.dataAiHint} />\n                  <AvatarFallback>{employer.name.charAt(0)}</AvatarFallback>\n                </Avatar>\n                <div className=\"ml-6 text-white\">\n                  <h1 className=\"text-2xl md:text-4xl font-headline font-bold drop-shadow-lg\">{employer.name}</h1>\n                  <Badge className=\"mt-2 bg-white/20 text-white backdrop-blur-sm\">{employer.industry}</Badge>\n                </div>\n            </div>\n          </CardHeader>\n          <CardContent className=\"p-6 grid grid-cols-1 lg:grid-cols-3 gap-8 mt-4\">\n             {/* Left Column */}\n            <div className=\"lg:col-span-2 space-y-8\">\n                <Card>\n                    <CardHeader><CardTitle className=\"font-headline text-2xl\">Giới thiệu công ty</CardTitle></CardHeader>\n                    <CardContent><p className=\"text-muted-foreground whitespace-pre-line\">{employer.about}</p></CardContent>\n                </Card>\n                 {employer.videoUrl && <Card>\n                    <CardHeader><CardTitle className=\"font-headline text-2xl flex items-center\"><Video className=\"mr-3 text-primary\"/> Video</CardTitle></CardHeader>\n                    <CardContent>\n                        <div className=\"aspect-video\">\n                            <iframe className=\"w-full h-full rounded-lg\" src={employer.videoUrl} title=\"YouTube video player\" frameBorder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" allowFullScreen></iframe>\n                        </div>\n                    </CardContent>\n                </Card>}\n                <Card>\n                    <CardHeader><CardTitle className=\"font-headline text-2xl\">Hình ảnh</CardTitle></CardHeader>\n                    <CardContent className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                        {employer.images.map((img, i) => <Image key={i} src={img.src} alt={img.alt} width={600} height={400} className=\"rounded-lg object-cover aspect-video\" data-ai-hint={img.dataAiHint}/>)}\n                    </CardContent>\n                </Card>\n            </div>\n            {/* Right Column */}\n            <div className=\"lg:col-span-1 space-y-6\">\n                <Card>\n                    <CardHeader><CardTitle className=\"font-headline text-xl\">Thông tin</CardTitle></CardHeader>\n                    <CardContent className=\"space-y-4 text-sm\">\n                        <p className=\"flex items-start gap-3\"><MapPin className=\"h-5 w-5 mt-0.5 text-muted-foreground\"/> <span><strong>Địa chỉ:</strong> {employer.location}</span></p>\n                        <p className=\"flex items-center gap-3\"><Users className=\"h-5 w-5 text-muted-foreground\"/> <span><strong>Quy mô:</strong> {employer.size}</span></p>\n                        <p className=\"flex items-center gap-3\"><Building className=\"h-5 w-5 text-muted-foreground\"/> <span><strong>Ngành:</strong> {employer.industry}</span></p>\n                    </CardContent>\n                </Card>\n                <Card>\n                    <CardHeader><CardTitle className=\"font-headline text-xl\">Việc làm đang tuyển</CardTitle></CardHeader>\n                    <CardContent>\n                        <ul className=\"space-y-4\">\n                            {employer.jobs.map((job, i) => (\n                                <li key={i} className=\"border-b pb-4 last:border-0 last:pb-0\">\n                                    <h4 className=\"font-bold hover:text-primary cursor-pointer\">{job.title}</h4>\n                                    <div className=\"flex items-center gap-4 text-xs text-muted-foreground mt-1\">\n                                        <span className=\"flex items-center gap-1\"><Clock className=\"h-3 w-3\"/> {job.type}</span>\n                                        <span className=\"flex items-center gap-1\"><Calendar className=\"h-3 w-3\"/> {job.date}</span>\n                                    </div>\n                                </li>\n                            ))}\n                        </ul>\n                    </CardContent>\n                </Card>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/employers/page.tsx": "import { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Cpu, Database, Layers, ShieldCheck, Briefcase, Users, FileSignature, BarChart } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\n\nconst partnerBenefits = [\n  { \n    icon: Users,\n    title: 'Nguồn ứng viên dồi dào', \n    description: 'Tiếp cận hệ thống dữ liệu ứng viên Kỹ năng Đặc định (Tokutei) đã được sàng lọc và xác thực thông tin ban đầu.'\n  },\n  { \n    icon: FileSignature,\n    title: 'Công cụ quản lý hiệu quả', \n    description: 'Sử dụng nền tảng để quản lý tin tuyển dụng, theo dõi trạng thái ứng viên và tương tác một cách chuyên nghiệp.'\n  },\n  { \n    icon: BarChart,\n    title: 'Hỗ trợ Marketing & Vận hành', \n    description: 'Được hỗ trợ quảng bá tin tuyển dụng trên các kênh của HelloJob, tiếp cận đúng đối tượng mục tiêu và tối ưu hóa hiệu quả.'\n  },\n  {\n    icon: ShieldCheck,\n    title: 'Hợp tác minh bạch',\n    description: 'Quy trình hợp tác rõ ràng, cơ chế chia sẻ doanh thu hấp dẫn và minh bạch, đảm bảo quyền lợi cho đối tác.'\n  }\n];\n\nexport default function EmployersPage() {\n  return (\n    <div className=\"flex flex-col items-center\">\n      {/* Hero Section for Partnership */}\n      <section className=\"w-full bg-accent text-primary-foreground py-20 md:py-28\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"grid md:grid-cols-2 gap-12 items-center\">\n            <div className=\"text-center md:text-left\">\n              <h1 className=\"text-4xl md:text-5xl font-headline font-bold mb-4\">\n                Nền tảng Đối tác Tuyển dụng Kỹ năng Đặc định\n              </h1>\n              <p className=\"text-lg md:text-xl max-w-md mx-auto md:mx-0 text-primary-foreground/80\">\n                Hợp tác cùng HelloJob để khai thác tối đa tiềm năng thị trường lao động Tokutei Ginou tại Nhật Bản.\n              </p>\n              <div className=\"mt-8 flex flex-col sm:flex-row gap-4 justify-center md:justify-start\">\n                <Button asChild size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                  <Link href=\"/post-job\">\n                    <Briefcase /> Đăng tin ngay\n                  </Link>\n                </Button>\n                <Button asChild size=\"lg\" variant=\"outline\" className=\"border-white text-white hover:bg-white/20 hover:text-white\">\n                  <Link href=\"/franchise\">Đối tác tại Nhật</Link>\n                </Button>\n              </div>\n            </div>\n             <div className=\"relative\">\n                <Image \n                  src=\"https://placehold.co/600x400.png\"\n                  alt=\"Sơ đồ hợp tác đối tác\"\n                  width={600}\n                  height={400}\n                  className=\"rounded-lg shadow-2xl\"\n                  data-ai-hint=\"partnership model diagram\"\n                />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Featured Benefits */}\n      <section className=\"w-full py-20 md:py-28 bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n           <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-headline font-bold\">Lợi ích dành cho Đối tác</h2>\n            <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n              Chúng tôi cung cấp một nền tảng toàn diện với các công cụ và sự hỗ trợ cần thiết để giúp bạn thành công.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-8 items-start\">\n            {partnerBenefits.map(feature => (\n              <Card key={feature.title} className=\"text-center p-6 border-t-4 border-primary shadow-lg hover:shadow-xl transition-shadow\">\n                 <feature.icon className=\"w-12 h-12 text-primary mx-auto mb-4\" />\n                 <h3 className=\"text-xl font-bold font-headline mb-2\">{feature.title}</h3>\n                 <p className=\"text-muted-foreground text-sm\">{feature.description}</p>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n",
  "src/app/franchise/page.tsx": "\n'use client';\n\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, Database, Handshake, Cpu, Briefcase } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport {\n    Dialog,\n    DialogContent,\n    DialogDescription,\n    DialogFooter,\n    DialogHeader,\n    DialogTitle,\n    DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\n\nconst partnerBenefits = [\n    {\n        icon: Database,\n        title: \"Tiếp cận nguồn ứng viên dồi dào\",\n        description: \"Kết nối trực tiếp với hệ thống dữ liệu hàng ngàn ứng viên đã được sàng lọc, xác thực thông tin và đào tạo kỹ năng bài bản.\"\n    },\n    {\n        icon: Cpu,\n        title: \"Nền tảng công nghệ thông minh\",\n        description: \"Sử dụng các công cụ AI để tìm kiếm, lọc và quản lý ứng viên hiệu quả, tự động gợi ý các hồ sơ phù hợp nhất với yêu cầu của bạn.\"\n    },\n    {\n        icon: Handshake,\n        title: \"Hỗ trợ vận hành và pháp lý\",\n        description: \"Đội ngũ chuyên gia của chúng tôi tại Việt Nam sẽ hỗ trợ toàn diện về thủ tục, giấy tờ và đảm bảo quy trình tuyển dụng tuân thủ pháp luật.\"\n    }\n];\n\nexport default function FranchisePage() {\n  return (\n    <>\n      {/* Hero Section */}\n      <section className=\"w-full bg-primary text-primary-foreground py-24 md:py-32\">\n        <div className=\"container mx-auto px-4 md:px-6 text-center\">\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold\">\n            Nền tảng Đối tác Tuyển dụng tại Nhật Bản\n          </h1>\n          <p className=\"text-lg md:text-xl max-w-3xl mx-auto mt-4 text-primary-foreground/80\">\n            Hợp tác cùng HelloJob để tìm kiếm nguồn nhân lực Kỹ năng Đặc định (Tokutei Ginou) chất lượng cao từ Việt Nam một cách hiệu quả và minh bạch.\n          </p>\n           <div className=\"mt-8 flex flex-col sm:flex-row gap-4 justify-center\">\n                <Dialog>\n                    <DialogTrigger asChild>\n                        <Button size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                          Trở thành Đối tác\n                        </Button>\n                    </DialogTrigger>\n                    <DialogContent className=\"sm:max-w-[425px]\">\n                        <DialogHeader>\n                            <DialogTitle className=\"font-headline text-2xl\">Đăng ký hợp tác</DialogTitle>\n                            <DialogDescription>\n                                Vui lòng để lại thông tin của bạn. Chúng tôi sẽ liên hệ lại trong thời gian sớm nhất.\n                            </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"grid gap-4 py-4\">\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"name\" className=\"text-right\">Tên công ty</Label>\n                                <Input id=\"name\" placeholder=\"HelloJob Japan\" className=\"col-span-3\" />\n                            </div>\n                            <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"phone\" className=\"text-right\">Số điện thoại</Label>\n                                <Input id=\"phone\" placeholder=\"0987654321\" className=\"col-span-3\" />\n                            </div>\n                             <div className=\"grid grid-cols-4 items-center gap-4\">\n                                <Label htmlFor=\"email\" className=\"text-right\">Email</Label>\n                                <Input id=\"email\" type=\"email\" placeholder=\"contact@hellojob.jp\" className=\"col-span-3\" />\n                            </div>\n                        </div>\n                        <DialogFooter>\n                            <Button type=\"submit\" className=\"bg-primary text-white\">Gửi thông tin</Button>\n                        </DialogFooter>\n                    </DialogContent>\n                </Dialog>\n                <Button asChild size=\"lg\" className=\"bg-accent-orange text-white hover:bg-accent-orange/90\">\n                    <Link href=\"/post-job\"><Briefcase/> Đăng việc làm</Link>\n                </Button>\n            </div>\n        </div>\n      </section>\n\n      {/* Benefits Section */}\n      <section className=\"py-20 md:py-28 bg-secondary\">\n         <div className=\"container mx-auto px-4 md:px-6\">\n            <div className=\"text-center mb-16\">\n                 <h2 className=\"text-3xl font-headline font-bold text-primary\">Tại sao nên hợp tác với HelloJob?</h2>\n                 <p className=\"text-muted-foreground mt-4 max-w-3xl mx-auto text-lg\">Chúng tôi không chỉ là một nền tảng, chúng tôi là cầu nối vững chắc, mang lại giải pháp tuyển dụng toàn diện cho các doanh nghiệp và nghiệp đoàn tại Nhật Bản.</p>\n            </div>\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n                {partnerBenefits.map(benefit => (\n                    <Card key={benefit.title} className=\"text-center p-8 shadow-lg hover:shadow-xl transition-shadow border-t-4 border-accent-blue\">\n                        <benefit.icon className=\"h-16 w-16 text-primary mx-auto mb-6\"/>\n                        <h3 className=\"text-xl font-bold font-headline mb-3\">{benefit.title}</h3>\n                        <p className=\"text-muted-foreground\">{benefit.description}</p>\n                    </Card>\n                ))}\n            </div>\n         </div>\n      </section>\n\n      {/* How it works Section */}\n      <section className=\"py-20 md:py-28 bg-background\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"grid md:grid-cols-2 gap-16 items-center\">\n            <div>\n              <h2 className=\"text-3xl font-headline font-bold mb-4 text-primary\">Quy trình hợp tác đơn giản, hiệu quả</h2>\n              <p className=\"text-muted-foreground mb-6 text-lg\">\n                Nền tảng của chúng tôi được thiết kế để tối ưu hóa quy trình tuyển dụng, giúp bạn tiết kiệm thời gian, chi phí và nhanh chóng tìm được ứng viên phù hợp.\n              </p>\n              <ul className=\"space-y-6\">\n                  <li className=\"flex gap-4\">\n                    <CheckCircle className=\"h-8 w-8 text-accent-green mt-1 flex-shrink-0\" />\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Đăng ký và Xác thực</h3>\n                      <p className=\"text-muted-foreground text-sm\">Tạo tài khoản đối tác và cung cấp thông tin để chúng tôi xác thực doanh nghiệp/nghiệp đoàn của bạn.</p>\n                    </div>\n                  </li>\n                   <li className=\"flex gap-4\">\n                    <CheckCircle className=\"h-8 w-8 text-accent-green mt-1 flex-shrink-0\" />\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Đăng tin & Tìm kiếm</h3>\n                      <p className=\"text-muted-foreground text-sm\">Dễ dàng đăng tin tuyển dụng hoặc chủ động tìm kiếm trong kho hồ sơ ứng viên khổng lồ của chúng tôi.</p>\n                    </div>\n                  </li>\n                   <li className=\"flex gap-4\">\n                    <CheckCircle className=\"h-8 w-8 text-accent-green mt-1 flex-shrink-0\" />\n                    <div>\n                      <h3 className=\"font-bold text-lg\">Phỏng vấn & Tuyển chọn</h3>\n                      <p className=\"text-muted-foreground text-sm\">Sử dụng công cụ của chúng tôi để lên lịch phỏng vấn, trao đổi và quản lý quá trình tuyển chọn ứng viên.</p>\n                    </div>\n                  </li>\n              </ul>\n            </div>\n             <div>\n              <Image\n                src=\"https://placehold.co/600x600.png\"\n                alt=\"Quy trình tuyển dụng\"\n                width={600}\n                height={600}\n                className=\"rounded-lg shadow-xl\"\n                data-ai-hint=\"recruitment process flowchart\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"bg-gradient-to-r from-blue-600 to-sky-500 text-white py-20 md:py-28\">\n        <div className=\"container mx-auto px-4 md:px-6 text-center\">\n            <h2 className=\"text-3xl font-headline font-bold mb-4\">Sẵn sàng tìm kiếm nhân tài Việt Nam?</h2>\n            <p className=\"text-white/80 mb-8 max-w-2xl mx-auto text-lg\">Hãy để lại thông tin, đội ngũ HelloJob sẽ liên hệ và tư vấn chi tiết về mô hình hợp tác, giúp bạn giải quyết bài toán nhân sự một cách hiệu quả nhất.</p>\n            <Dialog>\n                <DialogTrigger asChild>\n                    <Button size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                      Liên hệ với chúng tôi\n                    </Button>\n                </DialogTrigger>\n                <DialogContent className=\"sm:max-w-[425px]\">\n                    <DialogHeader>\n                        <DialogTitle className=\"font-headline text-2xl\">Đăng ký hợp tác</DialogTitle>\n                        <DialogDescription>\n                            Vui lòng để lại thông tin của bạn. Chúng tôi sẽ liên hệ lại trong thời gian sớm nhất.\n                        </DialogDescription>\n                    </DialogHeader>\n                    <div className=\"grid gap-4 py-4\">\n                       <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"name\" className=\"text-right\">Tên công ty</Label>\n                            <Input id=\"name\" placeholder=\"HelloJob Japan\" className=\"col-span-3\" />\n                        </div>\n                        <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"phone\" className=\"text-right\">Số điện thoại</Label>\n                            <Input id=\"phone\" placeholder=\"0987654321\" className=\"col-span-3\" />\n                        </div>\n                         <div className=\"grid grid-cols-4 items-center gap-4\">\n                            <Label htmlFor=\"email\" className=\"text-right\">Email</Label>\n                            <Input id=\"email\" type=\"email\" placeholder=\"contact@hellojob.jp\" className=\"col-span-3\" />\n                        </div>\n                    </div>\n                    <DialogFooter>\n                        <Button type=\"submit\" className=\"bg-primary text-white\">Gửi thông tin</Button>\n                    </DialogFooter>\n                </DialogContent>\n            </Dialog>\n        </div>\n      </section>\n    </>\n  );\n}\n",
  "src/app/globals.css": "\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\nbody {\n  font-family: 'Montserrat', sans-serif;\n}\n\n@layer base {\n  :root {\n    --background: 210 29% 97%;\n    --foreground: 222 47% 11%;\n    --card: 0 0% 100%;\n    --card-foreground: 222 47% 11%;\n    --popover: 0 0% 100%;\n    --popover-foreground: 222 47% 11%;\n    --primary: 196 84% 56%; /* #19A6DF - Xanh Nhạt */\n    --primary-foreground: 0 0% 98%;\n    --secondary: 210 29% 92%;\n    --secondary-foreground: 222 47% 11%;\n    --muted: 210 29% 90%;\n    --muted-foreground: 215 28% 45%;\n    --accent: 199 89% 42%; /* #0D8DC8 - Xanh Đậm */\n    --accent-foreground: 0 0% 98%;\n    --accent-orange: 45 89% 56%; /* #F2B92A - Cam */\n    --accent-blue: 196 84% 56%; /* #19A6DF - Xanh Nhạt */\n    --accent-green: 74 46% 54%; /* #AFC536 - Xanh Lá */\n    --accent-red: 0 84% 60%; /* #F14A4A - Đỏ */\n    --accent-yellow: 45 89% 56%; /* #F2B92A - Vàng/Cam */\n    --destructive: 0 84.2% 60.2%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 210 29% 88%;\n    --input: 210 29% 94%;\n    --ring: 196 84% 56%; /* #19A6DF - Xanh Nhạt */\n    --chart-1: 45 89% 56%; /* cam */\n    --chart-2: 199 89% 42%; /* xanh đậm */\n    --chart-3: 74 46% 54%; /* xanh lá */\n    --chart-4: 196 84% 56%; /* xanh nhạt */\n    --chart-5: 181 49% 44%; /* old accent */\n    --radius: 0.75rem;\n  }\n  .dark {\n    --background: 222 47% 11%;\n    --foreground: 210 40% 98%;\n    --card: 222 47% 11%;\n    --card-foreground: 210 40% 98%;\n    --popover: 222 47% 11%;\n    --popover-foreground: 210 40% 98%;\n    --primary: 196 84% 56%;\n    --primary-foreground: 210 40% 98%;\n    --secondary: 217 33% 17%;\n    --secondary-foreground: 210 40% 98%;\n    --muted: 217 33% 17%;\n    --muted-foreground: 215 28% 45%;\n    --accent: 199 89% 42%;\n    --accent-foreground: 0 0% 98%;\n    --accent-orange: 45 89% 56%;\n    --accent-blue: 196 84% 56%;\n    --accent-green: 74 46% 54%;\n    --accent-red: 0 84% 60%;\n    --accent-yellow: 45 89% 56%;\n    --destructive: 0 62.8% 30.6%;\n    --destructive-foreground: 0 0% 98%;\n    --border: 217 33% 17%;\n    --input: 217 33% 17%;\n    --ring: 196 84% 56%;\n    --chart-1: 45 89% 56%;\n    --chart-2: 199 89% 42%;\n    --chart-3: 74 46% 54%;\n    --chart-4: 196 84% 56%;\n    --chart-5: 181 49% 44%;\n    --radius: 0.75rem;\n  }\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n  body {\n    @apply bg-background text-foreground;\n  }\n   .prose {\n    @apply text-foreground max-w-full;\n  }\n  .prose h2 {\n    @apply text-2xl font-bold font-headline mb-4 mt-8 border-b pb-2 text-accent;\n  }\n  .prose p {\n    @apply mb-4 leading-relaxed;\n  }\n  .prose ul, .prose ol {\n    @apply mb-4 pl-6;\n  }\n  .prose ul > li {\n    @apply mb-2 pl-2 relative before:content-[''] before:absolute before:w-1.5 before:h-1.5 before:rounded-full before:bg-primary before:left-0 before:top-2;\n  }\n  .prose ol > li {\n      @apply mb-2;\n  }\n  .prose a {\n      @apply text-primary hover:underline;\n  }\n  .prose strong {\n      @apply font-bold;\n  }\n  .prose .lead {\n    @apply text-xl text-muted-foreground italic;\n  }\n}\n\n@layer utilities {\n  .bg-accent-orange {\n    background-color: hsl(var(--accent-orange));\n  }\n  .bg-accent-blue {\n    background-color: hsl(var(--accent-blue));\n  }\n  .bg-accent-green {\n    background-color: hsl(var(--accent-green));\n  }\n  .bg-accent-red {\n    background-color: hsl(var(--accent-red));\n  }\n  .bg-accent-yellow {\n    background-color: hsl(var(--accent-yellow));\n  }\n  .text-accent-orange {\n    color: hsl(var(--accent-orange));\n  }\n  .text-accent-blue {\n    color: hsl(var(--accent-blue));\n  }\n  .text-accent-green {\n    color: hsl(var(--accent-green));\n  }\n  .text-accent-red {\n    color: hsl(var(--accent-red));\n  }\n  .text-accent-yellow {\n    color: hsl(var(--accent-yellow));\n  }\n  .border-accent-orange {\n    border-color: hsl(var(--accent-orange));\n  }\n   .border-accent-green {\n    border-color: hsl(var(--accent-green));\n  }\n   .border-accent-blue {\n    border-color: hsl(var(--accent-blue));\n  }\n}\n",
  "src/app/handbook/[slug]/page.tsx": "\n\n'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Scroll, Timer, UserCircle, Briefcase, ChevronRight, Video, FileText } from 'lucide-react';\nimport Image from 'next/image';\nimport { notFound } from 'next/navigation';\nimport { useEffect, useState, use } from 'react';\nimport { articles, type HandbookArticle } from '@/lib/handbook-data';\nimport { cn } from '@/lib/utils';\nimport Link from 'next/link';\nimport { jobData } from '@/lib/mock-data';\nimport { JobCard } from '@/components/job-card';\nimport { Button } from '@/components/ui/button';\n\n\nexport default function ArticlePage({ params }: { params: Promise<{ slug: string }> }) {\n  const [activeId, setActiveId] = useState('');\n  \n  const resolvedParams = use(params);\n  const article = articles.find((a) => a.slug === resolvedParams.slug);\n\n  useEffect(() => {\n    if (!article || article.type !== 'article' || !article.content) return;\n\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveId(entry.target.id);\n          }\n        });\n      },\n      { rootMargin: '0px 0px -80% 0px' }\n    );\n\n    article.content.forEach((section) => {\n      const el = document.getElementById(section.slug);\n      if (el) observer.observe(el);\n    });\n\n    return () => {\n       article.content?.forEach((section) => {\n        const el = document.getElementById(section.slug);\n        if (el) observer.unobserve(el);\n      });\n    };\n  }, [article]);\n\n  if (!article) {\n    notFound();\n  }\n  \n  const otherArticles = articles.filter(a => a.slug !== resolvedParams.slug && a.type === 'article').slice(0, 3);\n  const hotJobs = jobData.slice(0, 3); // Demo with first 3 jobs\n\n  const MainContent = () => {\n    if (article.type === 'video' && article.videoUrl) {\n      return (\n         <div className=\"aspect-video w-full rounded-lg overflow-hidden shadow-lg bg-black\">\n            <iframe \n                className=\"w-full h-full\" \n                src={`${article.videoUrl}?autoplay=1&rel=0`}\n                title={article.title}\n                frameBorder=\"0\" \n                allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n                allowFullScreen\n            ></iframe>\n        </div>\n      );\n    }\n\n    return (\n      <>\n        <div className=\"relative aspect-video w-full rounded-lg overflow-hidden mb-8 shadow-lg\">\n            <Image src={article.image} alt={article.title} fill className=\"object-cover\" data-ai-hint={article.dataAiHint} />\n        </div>\n        \n        <div className=\"prose prose-lg max-w-none\">\n            <p className=\"lead\">{article.excerpt}</p>\n            {article.content && article.content.map((section, index) => (\n            <div key={index} id={section.slug} className=\"pt-8 scroll-mt-24\">\n                <h2>{section.title}</h2>\n                <div dangerouslySetInnerHTML={{ __html: section.body }} />\n            </div>\n            ))}\n        </div>\n      </>\n    );\n  }\n\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12 md:py-16\">\n        <div className=\"grid lg:grid-cols-12 gap-8 lg:gap-12\">\n          \n          {/* Article Outline (Only for articles) */}\n          {article.type === 'article' && article.content && (\n            <aside className=\"hidden lg:block lg:col-span-3\">\n              <div className=\"sticky top-24\">\n                <h3 className=\"text-lg font-bold mb-4 flex items-center text-accent\">\n                  <Scroll className=\"mr-2\" />\n                  Nội dung bài viết\n                </h3>\n                <ul className=\"space-y-3\">\n                  {article.content.map((section) => (\n                    <li key={section.slug}>\n                      <a\n                        href={`#${section.slug}`}\n                        className={cn(\n                          \"block text-sm transition-colors hover:text-primary\",\n                          activeId === section.slug\n                            ? 'text-primary font-bold border-l-2 border-primary pl-3'\n                            : 'text-muted-foreground pl-3.5'\n                        )}\n                      >\n                        {section.title}\n                      </a>\n                    </li>\n                  ))}\n                </ul>\n                 <Card className=\"mt-8\">\n                    <CardHeader>\n                      <CardTitle className=\"text-base font-bold flex items-center\"><Briefcase className=\"mr-2 h-4 w-4\"/>Việc làm nổi bật</CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"space-y-4\">\n                      {hotJobs.slice(0,2).map(job => (\n                        <Link href=\"#\" key={job.id} className=\"group block\">\n                           <p className=\"font-semibold text-sm group-hover:text-primary transition-colors line-clamp-2\">{job.title}</p>\n                           <p className=\"text-xs text-muted-foreground\">{job.recruiter.company}</p>\n                        </Link>\n                      ))}\n                       <Button asChild variant=\"outline\" size=\"sm\" className=\"w-full\">\n                         <Link href=\"/jobs\">Xem thêm việc làm <ChevronRight /></Link>\n                      </Button>\n                    </CardContent>\n                 </Card>\n              </div>\n            </aside>\n          )}\n\n          {/* Main Article Content */}\n          <main className={cn(\n            \"lg:col-span-9 xl:col-span-6\",\n            article.type !== 'article' && \"lg:col-start-4 xl:col-start-4\" // Center content if not an article\n            )}>\n            <article>\n              <header className=\"mb-8\">\n                <Badge className=\"mb-4 bg-accent-orange text-white\">{article.category}</Badge>\n                <h1 className=\"text-3xl md:text-4xl font-headline font-bold mb-4 text-accent\">{article.title}</h1>\n                <div className=\"flex items-center text-sm text-muted-foreground gap-6\">\n                  <div className=\"flex items-center gap-2\">\n                    <UserCircle className=\"h-5 w-5\" />\n                    <span>{article.author}</span>\n                  </div>\n                  <div className=\"flex items-center gap-2\">\n                    <Timer className=\"h-5 w-5\" />\n                    <span>{article.readTime} đọc</span>\n                  </div>\n                </div>\n              </header>\n\n              <MainContent />\n            </article>\n\n            {/* Hot Jobs Section */}\n            <section className=\"mt-16 pt-8 border-t\">\n                 <h2 className=\"text-3xl font-headline font-bold mb-6 flex items-center text-accent\">\n                    <Briefcase className=\"mr-3 text-primary\" />\n                    Việc làm nổi bật liên quan\n                </h2>\n                <div className=\"space-y-4\">\n                    {hotJobs.map(job => (\n                        <JobCard key={job.id} job={job} />\n                    ))}\n                </div>\n            </section>\n          </main>\n          \n          {/* Related Articles */}\n          <aside className=\"hidden xl:block xl:col-span-3\">\n             <div className=\"sticky top-24\">\n              <h3 className=\"text-lg font-bold mb-4 text-accent flex items-center\"><FileText className=\"mr-2\"/>Bài viết liên quan</h3>\n              <div className=\"space-y-6\">\n                {otherArticles.map(other => (\n                  <Link href={`/handbook/${other.slug}`} key={other.slug} className=\"group block\">\n                      <Card className=\"overflow-hidden hover:shadow-lg transition-shadow\">\n                        <div className=\"relative aspect-video w-full\">\n                          <Image src={other.image} alt={other.title} fill className=\"object-cover transition-transform duration-300 group-hover:scale-105\" data-ai-hint={other.dataAiHint} />\n                        </div>\n                        <div className=\"p-4\">\n                           <p className=\"text-sm font-semibold group-hover:text-primary transition-colors line-clamp-2\">{other.title}</p>\n                           <p className=\"text-xs text-muted-foreground mt-1\">{other.category}</p>\n                        </div>\n                      </Card>\n                  </Link>\n                ))}\n              </div>\n            </div>\n          </aside>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/handbook/page.tsx": "\n\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription, CardFooter } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { LifeBuoy, Search, ArrowRight, Video, FileText, Newspaper } from 'lucide-react';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { articles, HandbookArticle } from '@/lib/handbook-data';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { cn } from '@/lib/utils';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Cẩm nang HelloJob - Thông tin việc làm & cuộc sống tại Nhật',\n  description: 'Tất cả thông tin bạn cần về Kỹ năng đặc định (Tokutei Ginou), kinh nghiệm phỏng vấn, thủ tục visa, và cuộc sống tại Nhật Bản được cập nhật liên tục.',\n};\n\n\nconst ArticleCard = ({ article, className }: { article: HandbookArticle, className?: string }) => (\n  <Link href={`/handbook/${article.slug}`} className={cn(\"group block\", className)}>\n    <Card className=\"flex flex-col h-full overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1.5 rounded-xl\">\n      <CardHeader className=\"p-0\">\n        <div className=\"relative aspect-video\">\n          <Image\n            src={article.image}\n            alt={article.title}\n            fill\n            className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={article.dataAiHint}\n          />\n           {article.type === 'video' && (\n            <div className=\"absolute inset-0 flex items-center justify-center bg-black/30\">\n              <Video className=\"h-12 w-12 text-white/80\" />\n            </div>\n          )}\n        </div>\n      </CardHeader>\n      <CardContent className=\"p-5 flex-grow flex flex-col\">\n        <Badge className={cn(\"mb-3 w-fit\", \n            article.category === 'Kỹ năng đặc định' ? 'bg-accent-blue/20 text-accent-blue border-accent-blue/30' : \n            'bg-accent-green/20 text-accent-green border-accent-green/30'\n        )}>{article.category}</Badge>\n        <CardTitle className=\"font-headline text-lg mb-3 flex-grow group-hover:text-primary transition-colors leading-tight\">{article.title}</CardTitle>\n        <p className=\"text-muted-foreground text-sm line-clamp-3\">{article.excerpt}</p>\n      </CardContent>\n    </Card>\n  </Link>\n);\n\nconst PostCard = ({ article }: { article: HandbookArticle }) => (\n  <Link href={`/handbook/${article.slug}`} className=\"group block\">\n    <Card className=\"overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 rounded-xl\">\n       <CardContent className=\"p-5\">\n         <Badge className={cn(\"mb-3 w-fit\", \n            article.category === 'Kinh nghiệm phỏng vấn' ? 'bg-accent-orange/20 text-accent-orange border-accent-orange/30' : \n            'bg-accent-red/20 text-accent-red border-accent-red/30'\n        )}>{article.category}</Badge>\n         <p className=\"font-semibold text-foreground group-hover:text-primary transition-colors\">{article.title}</p>\n         <p className=\"text-xs text-muted-foreground mt-2\">{article.readTime} đọc</p>\n      </CardContent>\n    </Card>\n  </Link>\n)\n\nconst VideoCard = ({ article }: { article: HandbookArticle }) => (\n  <Link href={`/handbook/${article.slug}`} className=\"group block\">\n      <Card className=\"relative overflow-hidden rounded-xl shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-1 aspect-[9/16]\">\n          <Image\n            src={article.image}\n            alt={article.title}\n            fill\n            className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n            data-ai-hint={article.dataAiHint}\n          />\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/70 via-black/30 to-transparent\" />\n          <div className=\"absolute inset-0 flex flex-col justify-end p-4 text-white\">\n             <Video className=\"h-10 w-10 mb-4 text-white/80\" />\n             <h4 className=\"font-headline text-lg font-bold leading-tight line-clamp-3\">{article.title}</h4>\n             <p className=\"text-xs mt-2 opacity-80\">{article.category}</p>\n          </div>\n      </Card>\n  </Link>\n);\n\n\nexport default function HandbookPage() {\n\n  const featuredArticle = articles.find(a => a.slug === 'tokutei-ginou-la-gi')!;\n  const mainArticles = articles.filter(a => a.type === 'article' && a.slug !== featuredArticle.slug);\n  const videos = articles.filter(a => a.type === 'video');\n  const posts = articles.filter(a => a.type === 'post');\n\n\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"text-center mb-12\">\n          <LifeBuoy className=\"h-16 w-16 mx-auto text-primary mb-4\" />\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-accent\">\n            Cẩm nang HelloJob\n          </h1>\n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto whitespace-nowrap\">\n            Tất cả thông tin bạn cần biết về thị trường lao động, kỹ năng và cuộc sống tại Nhật Bản.\n          </p>\n        </div>\n\n        {/* Search */}\n        <div className=\"max-w-xl mx-auto mb-16\">\n          <div className=\"relative\">\n             <Input placeholder=\"Tìm kiếm bài viết (VD: Tokutei, chi phí...)\" className=\"pl-12 h-12 text-lg rounded-full shadow-lg\"/>\n             <Search className=\"absolute left-4 top-1/2 -translate-y-1/2 h-6 w-6 text-muted-foreground\" />\n          </div>\n        </div>\n\n        {/* Layout */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-12 gap-12\">\n            {/* Main Content */}\n            <main className=\"lg:col-span-8 space-y-16\">\n                {/* Featured Article */}\n                <section>\n                    <Link href={`/handbook/${featuredArticle.slug}`} className=\"group\">\n                        <Card className=\"overflow-hidden shadow-xl hover:shadow-2xl transition-shadow duration-300 rounded-2xl\">\n                            <div className=\"grid md:grid-cols-2\">\n                                <div className=\"relative min-h-[300px] md:min-h-full\">\n                                    <Image\n                                        src={featuredArticle.image}\n                                        alt={featuredArticle.title}\n                                        fill\n                                        className=\"object-cover transition-transform duration-300 group-hover:scale-105\"\n                                        data-ai-hint={featuredArticle.dataAiHint}\n                                    />\n                                </div>\n                                <div className=\"p-8 flex flex-col justify-center\">\n                                    <Badge className=\"mb-4 w-fit bg-accent-orange text-white\">{featuredArticle.category}</Badge>\n                                    <CardTitle className=\"font-headline text-2xl xl:text-3xl mb-4 group-hover:text-primary transition-colors\">{featuredArticle.title}</CardTitle>\n                                    <CardDescription className=\"text-base mb-6\">{featuredArticle.excerpt}</CardDescription>\n                                    <div className=\"flex items-center gap-3 font-bold text-primary\">\n                                        <span>Đọc bài viết</span>\n                                        <ArrowRight className=\"transition-transform group-hover:translate-x-1\" />\n                                    </div>\n                                </div>\n                            </div>\n                        </Card>\n                    </Link>\n                </section>\n                \n                 {/* Latest Articles */}\n                <section>\n                    <h2 className=\"text-3xl font-headline font-bold mb-6 flex items-center text-foreground\">\n                        <FileText className=\"mr-3 text-primary\"/> Bài viết mới\n                    </h2>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 gap-8\">\n                       {mainArticles.map((article) => (\n                           <ArticleCard key={article.slug} article={article}/>\n                       ))}\n                    </div>\n                </section>\n            </main>\n            \n            {/* Sidebar */}\n            <aside className=\"lg:col-span-4 space-y-16\">\n                {/* Short Videos */}\n                <section>\n                    <h2 className=\"text-3xl font-headline font-bold mb-6 flex items-center text-foreground\">\n                        <Video className=\"mr-3 text-primary\"/> Video ngắn\n                    </h2>\n                     <div className=\"grid grid-cols-2 gap-4\">\n                       {videos.map((video) => (\n                           <VideoCard key={video.slug} article={video} />\n                       ))}\n                    </div>\n                </section>\n                \n                {/* Short Posts */}\n                <section>\n                    <h2 className=\"text-3xl font-headline font-bold mb-6 flex items-center text-foreground\">\n                        <Newspaper className=\"mr-3 text-primary\"/> Tin tức & Bài đăng\n                    </h2>\n                    <div className=\"space-y-4\">\n                       {posts.map((post) => (\n                           <PostCard key={post.slug} article={post} />\n                       ))}\n                    </div>\n                </section>\n            </aside>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/home-client.tsx": "\n'use client';\n\nimport { useState, useEffect, useCallback } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';\nimport { Briefcase, Users, ArrowRight, BookOpen, Search, MapIcon, GraduationCap, Building, MapPin, TrendingUp, Cpu, ListFilter, ChevronLeft, ChevronsUpDown, Check } from 'lucide-react';\nimport Link from 'next/link';\nimport Image from 'next/image';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue, SelectGroup, SelectLabel } from '@/components/ui/select';\nimport { Label } from '@/components/ui/label';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Slider } from '@/components/ui/slider';\nimport {\n  Popover,\n  PopoverContent,\n  PopoverTrigger,\n} from \"@/components/ui/popover\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandInput,\n  CommandItem,\n  CommandList,\n} from \"@/components/ui/command\"\nimport { cn } from '@/lib/utils';\nimport { industriesByJobType, type Industry } from '@/lib/industry-data';\nimport { jobData } from '@/lib/mock-data';\nimport { JobCard } from '@/components/job-card';\n\n\nconst featuredEmployers = [\n  { id: 'samsung', name: 'Samsung', logo: 'https://placehold.co/150x50.png', dataAiHint: 'samsung logo' },\n  { id: 'vinfast', name: 'Vinfast', logo: 'https://placehold.co/150x50.png', dataAiHint: 'vinfast logo' },\n  { id: 'fpt-software', name: 'FPT Software', logo: 'https://placehold.co/150x50.png', dataAiHint: 'fpt logo' },\n  { id: 'lg-electronics', name: 'LG Electronics', logo: 'https://placehold.co/150x50.png', dataAiHint: 'lg logo' },\n  { id: 'hoaphat', name: 'Hòa Phát Group', logo: 'https://placehold.co/150x50.png', dataAiHint: 'hoaphat logo' },\n];\n\nconst featuredCourses = [\n   {\n    id: 'tieng-nhat-giao-tiep',\n    title: 'Tiếng Nhật giao tiếp cho người đi làm',\n    category: 'Ngoại ngữ',\n    image: 'https://placehold.co/600x400.png',\n    dataAiHint: 'Japanese language',\n  },\n  {\n    id: 'ky-nang-lam-viec-nhom',\n    title: 'Kỹ năng làm việc nhóm hiệu quả',\n    category: 'Kỹ năng mềm',\n    image: 'https://placehold.co/600x400.png',\n    dataAiHint: 'teamwork collaboration',\n  },\n  {\n    id: 'an-toan-lao-dong',\n    title: 'An toàn lao động trong sản xuất',\n    category: 'Kỹ thuật',\n    image: 'https://placehold.co/600x400.png',\n    dataAiHint: 'factory safety',\n  },\n]\n\nconst japanJobTypes = [\n    'Thực tập sinh 3 năm',\n    'Thực tập sinh 1 năm',\n    'Thực tập sinh 3 Go',\n    'Đặc định đầu Việt',\n    'Đặc định đầu Nhật',\n    'Đặc định đi mới',\n    'Kỹ sư, tri thức đầu Việt',\n    'Kỹ sư, tri thức đầu Nhật'\n];\n\nconst japanLocations = {\n    regions: ['Hokkaido', 'Tohoku', 'Kanto', 'Chubu', 'Kansai', 'Chugoku', 'Shikoku', 'Kyushu'],\n    prefectures: [\n        'Aichi', 'Akita', 'Aomori', 'Chiba', 'Ehime', 'Fukui', 'Fukuoka', 'Fukushima', 'Gifu', 'Gunma', 'Hiroshima', 'Hokkaido', 'Hyogo', 'Ibaraki', 'Ishikawa', 'Iwate', 'Kagawa', 'Kagoshima', 'Kanagawa', 'Kochi', 'Kumamoto', 'Kyoto', 'Mie', 'Miyagi', 'Miyazaki', 'Nagano', 'Nagasaki', 'Nara', 'Niigata', 'Oita', 'Okayama', 'Okinawa', 'Osaka', 'Saga', 'Saitama', 'Shiga', 'Shimane', 'Shizuoka', 'Tochigi', 'Tokushima', 'Tokyo', 'Tottori', 'Toyama', 'Wakayama', 'Yamagata', 'Yamaguchi', 'Yamanashi'\n    ]\n};\n\n\nexport default function HomeClient() {\n  const [selectedJobType, setSelectedJobType] = useState('');\n  const [selectedIndustry, setSelectedIndustry] = useState('');\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedLocation, setSelectedLocation] = useState('');\n  const [availableIndustries, setAvailableIndustries] = useState<Industry[]>([]);\n  const [isSearching, setIsSearching] = useState(false);\n  const [comboboxOpen, setComboboxOpen] = useState(false);\n  \n  const finalSearchTerm = searchQuery || selectedIndustry;\n\n  useEffect(() => {\n    let industries: Industry[] = [];\n    if (!selectedJobType) {\n        // Collect all industries from all types and remove duplicates\n        const allIndustries = Object.values(industriesByJobType).flat();\n        const uniqueIndustries = Array.from(new Map(allIndustries.map(item => [item['slug'], item])).values());\n        industries = uniqueIndustries;\n    } else {\n        let jobTypeKey: keyof typeof industriesByJobType | 'Default' = 'Default';\n        if (selectedJobType.includes('Thực tập sinh')) jobTypeKey = 'Thực tập sinh';\n        else if (selectedJobType.includes('Đặc định')) jobTypeKey = 'Kỹ năng đặc định';\n        else if (selectedJobType.includes('Kỹ sư, tri thức')) jobTypeKey = 'Kỹ sư, tri thức';\n        industries = industriesByJobType[jobTypeKey];\n    }\n    \n    setAvailableIndustries(industries);\n    setSelectedIndustry('');\n    setSearchQuery('');\n  }, [selectedJobType]);\n\n  const handleSearchClick = () => {\n    setIsSearching(true);\n  };\n  \n  const handleBackToSearch = () => {\n      setIsSearching(false);\n  }\n\n  const getFilteredIndustries = () => {\n    if (!searchQuery) return availableIndustries;\n    const lowercasedQuery = searchQuery.toLowerCase();\n    return availableIndustries.filter(industry => \n      industry.name.toLowerCase().includes(lowercasedQuery) || \n      industry.keywords.some(keyword => keyword.toLowerCase().includes(lowercasedQuery))\n    );\n  }\n\n  const CompactSearchForm = () => (\n     <div className=\"bg-primary p-2 md:hidden sticky top-16 z-40 shadow-lg\">\n        <Button \n            variant=\"outline\" \n            className=\"w-full justify-start text-left h-auto py-2 px-3 bg-background text-foreground hover:bg-background/90\"\n            onClick={handleBackToSearch}\n        >\n            <ChevronLeft className=\"mr-2 text-muted-foreground\"/>\n            <div className=\"flex-grow overflow-hidden\">\n                <p className=\"font-bold text-base truncate\">{selectedJobType || 'Tất cả loại hình'} - {finalSearchTerm || 'Tất cả ngành nghề'}</p>\n                <p className=\"text-sm text-muted-foreground truncate\">{selectedLocation || 'Tất cả địa điểm'}</p>\n            </div>\n        </Button>\n    </div>\n  );\n\n  const FilterSidebar = () => (\n    <div className=\"md:col-span-1 lg:col-span-1\">\n        <Card>\n            <CardHeader>\n                <CardTitle className=\"text-xl\">Bộ lọc</CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n                <div className=\"space-y-2\">\n                    <Label>Mức lương (triệu VND)</Label>\n                    <Slider defaultValue={[20, 50]} max={100} step={1} />\n                    <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>20tr</span>\n                        <span>100tr</span>\n                    </div>\n                </div>\n                <div className=\"space-y-2\">\n                    <Label>Loại hình công việc</Label>\n                    <div className=\"space-y-2\">\n                        {['Toàn thời gian', 'Bán thời gian', 'Thực tập'].map(item => (\n                            <div key={item} className=\"flex items-center space-x-2\">\n                                <Checkbox id={`type-${item}`} />\n                                <Label htmlFor={`type-${item}`} className=\"font-normal\">{item}</Label>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <div className=\"space-y-2\">\n                    <Label>Cấp bậc</Label>\n                    <div className=\"space-y-2\">\n                        {['Thực tập sinh', 'Nhân viên', 'Chuyên viên', 'Trưởng nhóm'].map(item => (\n                            <div key={item} className=\"flex items-center space-x-2\">\n                                <Checkbox id={`level-${item}`} />\n                                <Label htmlFor={`level-${item}`} className=\"font-normal\">{item}</Label>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n                <Button className=\"w-full bg-primary text-white\">Áp dụng</Button>\n            </CardContent>\n        </Card>\n    </div>\n  );\n\n  const SearchResults = () => (\n     <div className=\"w-full bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6 py-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 lg:grid-cols-4 gap-8\">\n                <div className=\"hidden md:block\">\n                  <FilterSidebar />\n                </div>\n\n                <div className=\"md:col-span-3 lg:col-span-3\">\n                    <div className=\"flex justify-between items-center mb-4\">\n                        <h2 className=\"text-xl font-bold\">Kết quả ({jobData.length})</h2>\n                        <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-1 md:hidden\">\n                            <ListFilter className=\"w-4 h-4\" />\n                            Lọc\n                        </Button>\n                         <Select>\n                            <SelectTrigger className=\"w-[180px] hidden md:flex\">\n                                <SelectValue placeholder=\"Sắp xếp theo\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectItem value=\"newest\">Mới nhất</SelectItem>\n                                <SelectItem value=\"salary_desc\">Lương cao đến thấp</SelectItem>\n                                <SelectItem value=\"salary_asc\">Lương thấp đến cao</SelectItem>\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <div className=\"grid grid-cols-1 gap-4\">\n                      {jobData.map((job) => (\n                        <JobCard key={job.id} job={job} />\n                      ))}\n                    </div>\n                </div>\n            </div>\n        </div>\n     </div>\n  );\n\n\n  const MainContent = () => (\n    <>\n      {/* Why Choose Us for Candidates */}\n      <section className=\"w-full pt-20 md:pt-28 bg-background\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <h2 className=\"text-3xl md:text-4xl font-headline font-bold text-center mb-16\">\n            Con đường phát triển của bạn tại Nhật Bản\n          </h2>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            <Card className=\"text-center shadow-lg hover:shadow-2xl transition-shadow duration-300 transform hover:-translate-y-2\">\n              <CardHeader>\n                <div className=\"mx-auto bg-green-100 rounded-full p-4 w-fit\">\n                  <MapIcon className=\"h-10 w-10 text-green-600\" />\n                </div>\n                <CardTitle className=\"font-headline mt-4\">Lộ trình rõ ràng</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Xem lộ trình phát triển sự nghiệp (SWR) để định hướng con đường từ Thực tập sinh đến chuyên gia tại Nhật.\n                </p>\n              </CardContent>\n            </Card>\n            <Card className=\"text-center shadow-lg hover:shadow-2xl transition-shadow duration-300 transform hover:-translate-y-2\">\n              <CardHeader>\n                <div className=\"mx-auto bg-orange-100 rounded-full p-4 w-fit\">\n                  <GraduationCap className=\"h-10 w-10 text-orange-500\" />\n                </div>\n                <CardTitle className=\"font-headline mt-4\">Nâng cao kỹ năng</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Tham gia các khóa học E-learning miễn phí về tiếng Nhật, văn hóa và kỹ năng làm việc để chuẩn bị tốt nhất.\n                </p>\n              </CardContent>\n            </Card>\n            <Card className=\"text-center shadow-lg hover:shadow-2xl transition-shadow duration-300 transform hover:-translate-y-2\">\n              <CardHeader>\n                <div className=\"mx-auto bg-sky-100 rounded-full p-4 w-fit\">\n                  <Briefcase className=\"h-10 w-10 text-sky-500\" />\n                </div>\n                <CardTitle className=\"font-headline mt-4\">Việc làm chất lượng</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground\">\n                  Tiếp cận hàng ngàn công việc chất lượng cao từ các nhà tuyển dụng hàng đầu trên khắp nước Nhật.\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* Skilled Labor CTA Section */}\n      <section className=\"w-full py-20 md:py-28 bg-accent/20\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <Card className=\"overflow-hidden shadow-2xl\">\n            <div className=\"grid grid-cols-1 md:grid-cols-2 items-center\">\n              <div className=\"relative h-64 md:h-full order-last md:order-first\">\n                <Image \n                  src=\"https://placehold.co/600x600.png\"\n                  alt=\"Lao động lành nghề tại Nhật\"\n                  fill\n                  className=\"object-cover\"\n                  data-ai-hint=\"happy factory worker japan\"\n                />\n              </div>\n              <div className=\"p-8 md:p-12 text-center md:text-left\">\n                <h2 className=\"text-3xl md:text-4xl font-headline font-bold text-primary mb-4\">\n                  Ginou 2 - Lao động lành nghề tại Nhật{' '}\n                  <span className=\"text-foreground\">thu nhập bao nhiêu?</span>\n                </h2>\n                <p className=\"text-muted-foreground mb-8 max-w-md mx-auto md:mx-0\">\n                  Khám phá lộ trình phát triển sự nghiệp để trở thành lao động tay nghề cao và đạt được mức thu nhập mơ ước.\n                </p>\n                <Button asChild size=\"lg\" className=\"bg-accent-green hover:bg-accent-green/90 text-white\">\n                  <Link href=\"/roadmap\">\n                    <TrendingUp /> Xem ngay lộ trình\n                  </Link>\n                </Button>\n              </div>\n            </div>\n          </Card>\n        </div>\n      </section>\n\n      {/* Featured Employers */}\n      <section className=\"w-full py-20 md:py-28 bg-background\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n           <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-headline font-bold\">Các đối tác tuyển dụng hàng đầu</h2>\n            <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n              Những công ty và nghiệp đoàn lớn uy tín tại Nhật Bản đang tìm kiếm những ứng viên như bạn.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-5 gap-8 items-center\">\n            {featuredEmployers.map(emp => (\n              <Link href={`/employers/${emp.id}`} key={emp.id} className=\"flex justify-center\">\n                <Image src={emp.logo} alt={emp.name} width={150} height={50} className=\"grayscale hover:grayscale-0 transition-all duration-300\" data-ai-hint={emp.dataAiHint}/>\n              </Link>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Featured E-Learning Courses */}\n      <section className=\"w-full py-20 md:py-28 bg-secondary\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n           <div className=\"text-center mb-16\">\n            <h2 className=\"text-3xl md:text-4xl font-headline font-bold\">Nâng cao kỹ năng với E-Learning</h2>\n            <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n              Đầu tư vào bản thân với các khóa học được thiết kế riêng, giúp bạn thăng tiến trong sự nghiệp tại Nhật.\n            </p>\n          </div>\n          <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n            {featuredCourses.map(course => (\n              <Card key={course.id} className=\"flex flex-col overflow-hidden shadow-lg hover:shadow-2xl transition-all duration-300 transform hover:-translate-y-2 group\">\n                <CardHeader className=\"p-0\">\n                   <Link href={`/learn/${course.id}`} className=\"block\">\n                      <Image\n                        src={course.image}\n                        alt={course.title}\n                        width={600}\n                        height={400}\n                        className=\"w-full h-48 object-cover\"\n                        data-ai-hint={course.dataAiHint}\n                      />\n                   </Link>\n                </CardHeader>\n                <CardContent className=\"p-6 flex-grow\">\n                  <p className=\"text-sm font-bold mb-2 text-primary\">{course.category}</p>\n                  <Link href={`/learn/${course.id}`}>\n                      <CardTitle className=\"font-headline text-xl mb-2 h-14 group-hover:text-primary transition-colors\">{course.title}</CardTitle>\n                  </Link>\n                </CardContent>\n                <CardFooter className=\"p-6 pt-0 mt-auto\">\n                   <Link href={`/learn/${course.id}`} className=\"font-bold text-primary hover:underline flex items-center\">\n                    Tìm hiểu thêm <ArrowRight className=\"ml-2\" />\n                  </Link>\n                </CardFooter>\n              </Card>\n            ))}\n          </div>\n           <div className=\"text-center mt-16\">\n            <Button asChild size=\"lg\">\n              <Link href=\"/learn\">Khám phá tất cả khóa học <BookOpen /></Link>\n            </Button>\n          </div>\n        </div>\n      </section>\n\n      {/* For Employers & Franchise */}\n      <section className=\"w-full py-20 md:py-28 bg-background\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"flex flex-col md:flex-row items-center gap-12 rounded-lg bg-accent text-primary-foreground p-12 lg:p-16\">\n            <div className=\"md:w-1/2\">\n              <h2 className=\"text-3xl md:text-4xl font-headline font-bold mb-4\">Giải pháp cho các đối tác tuyển Tokutei đầu Nhật</h2>\n              <p className=\"text-lg text-primary-foreground/80 mb-8\">\n                Hợp tác cùng HelloJob để tiếp cận nguồn ứng viên dồi dào, chất lượng cao và tối ưu hóa quy trình tuyển dụng Kỹ năng Đặc định.\n              </p>\n              <Button asChild size=\"lg\" className=\"bg-white text-primary hover:bg-white/90\">\n                <Link href=\"/franchise\">Tìm hiểu về Mô hình Đối tác</Link>\n              </Button>\n            </div>\n             <div className=\"md:w-1/2 flex justify-center\">\n              <Image\n                src=\"https://placehold.co/600x400.png\"\n                alt=\"Hợp tác tuyển dụng tại Nhật\"\n                width={500}\n                height={350}\n                className=\"rounded-lg shadow-xl\"\n                data-ai-hint=\"recruitment partnership japan\"\n              />\n            </div>\n          </div>\n        </div>\n      </section>\n    </>\n  );\n\n  const SearchModule = () => (\n    <section className=\"w-full bg-gradient-to-r from-blue-600 to-sky-500 text-white pt-20 md:pt-28 pb-10\">\n        <div className=\"container mx-auto px-4 md:px-6\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h1 className=\"text-4xl md:text-6xl font-headline font-bold mb-4\">\n              Tìm việc làm tại Nhật Bản\n            </h1>\n            <p className=\"text-lg md:text-xl max-w-3xl mx-auto mb-10 text-white/80\">\n             Chúng tôi không chỉ cung cấp việc làm, mà còn đào tạo tư duy và xây dựng lộ trình phát triển sự nghiệp (SWR) rõ ràng, giúp bạn từ lao động phổ thông trở thành chuyên gia lành nghề.\n            </p>\n          </div>\n        </div>\n        <div className=\"container mx-auto px-4 md:px-6 mt-[-6rem] md:mt-4 relative z-10\">\n            <Card className=\"max-w-6xl mx-auto shadow-2xl\">\n                <CardContent className=\"p-4 md:p-6\">\n                <div className=\"grid grid-cols-1 md:grid-cols-12 gap-4 items-end\">\n                    <div className=\"md:col-span-4 space-y-2\">\n                        <Label htmlFor=\"search-type\" className=\"text-foreground\">Loại hình, kỹ năng</Label>\n                        <Select onValueChange={setSelectedJobType} value={selectedJobType}>\n                            <SelectTrigger id=\"search-type\">\n                            <SelectValue placeholder=\"Chọn loại hình\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                            {japanJobTypes.map(type => (\n                                <SelectItem key={type} value={type}>{type}</SelectItem>\n                            ))}\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <div className=\"md:col-span-3 space-y-2\">\n                        <Label htmlFor=\"search-industry\" className=\"text-foreground\">Ngành nghề</Label>\n                        <Popover open={comboboxOpen} onOpenChange={setComboboxOpen}>\n                            <PopoverTrigger asChild>\n                                <Button\n                                    variant=\"outline\"\n                                    role=\"combobox\"\n                                    aria-expanded={comboboxOpen}\n                                    className=\"w-full justify-between h-10 font-normal text-sm\"\n                                >\n                                    <span className=\"truncate\">{finalSearchTerm || \"Tất cả ngành nghề\"}</span>\n                                    <ChevronsUpDown className=\"ml-2 h-4 w-4 shrink-0 opacity-50\" />\n                                </Button>\n                            </PopoverTrigger>\n                            <PopoverContent className=\"w-[--radix-popover-trigger-width] p-0\">\n                                <Command shouldFilter={false}>\n                                    <CommandInput \n                                        placeholder=\"Tìm ngành nghề...\" \n                                        value={searchQuery}\n                                        onValueChange={setSearchQuery}\n                                    />\n                                    <CommandList>\n                                        <CommandEmpty>Không tìm thấy.</CommandEmpty>\n                                        <CommandGroup>\n                                            {getFilteredIndustries().map((industry) => (\n                                                <CommandItem\n                                                    key={industry.slug}\n                                                    value={industry.name}\n                                                    onSelect={(currentValue) => {\n                                                        setSelectedIndustry(currentValue === selectedIndustry ? \"\" : industry.name);\n                                                        setSearchQuery(\"\");\n                                                        setComboboxOpen(false);\n                                                    }}\n                                                >\n                                                    <Check\n                                                        className={cn(\n                                                            \"mr-2 h-4 w-4\",\n                                                            selectedIndustry === industry.name ? \"opacity-100\" : \"opacity-0\"\n                                                        )}\n                                                    />\n                                                    {industry.name}\n                                                </CommandItem>\n                                            ))}\n                                        </CommandGroup>\n                                    </CommandList>\n                                </Command>\n                            </PopoverContent>\n                        </Popover>\n                    </div>\n                    <div className=\"md:col-span-3 space-y-2\">\n                        <Label htmlFor=\"search-location\" className=\"text-foreground\">Địa điểm, khu vực</Label>\n                        <Select onValueChange={setSelectedLocation}>\n                            <SelectTrigger id=\"search-location\">\n                            <SelectValue placeholder=\"Toàn quốc Nhật Bản\" />\n                            </SelectTrigger>\n                            <SelectContent>\n                                <SelectGroup>\n                                    <SelectLabel>Vùng</SelectLabel>\n                                    {japanLocations.regions.map(region => (\n                                        <SelectItem key={region} value={region}>{region}</SelectItem>\n                                    ))}\n                                </SelectGroup>\n                                <SelectGroup>\n                                    <SelectLabel>Tỉnh/Thành phố</SelectLabel>\n                                    {japanLocations.prefectures.map(loc => (\n                                        <SelectItem key={loc} value={loc}>{loc}</SelectItem>\n                                    ))}\n                                </SelectGroup>\n                            </SelectContent>\n                        </Select>\n                    </div>\n                    <div className=\"md:col-span-2\">\n                        <Button size=\"lg\" className=\"w-full bg-primary hover:bg-primary/90 text-white text-lg\" onClick={handleSearchClick}>\n                            <Search className=\"mr-2 h-5 w-5\" /> Tìm kiếm\n                        </Button>\n                    </div>\n                </div>\n                </CardContent>\n            </Card>\n        </div>\n    </section>\n  );\n\n  return (\n    <div className=\"flex flex-col items-center min-h-screen\">\n      <div className=\"w-full\">\n        {isSearching ? (\n          <>\n            <div className=\"md:hidden\">\n              <CompactSearchForm />\n            </div>\n            <div className=\"hidden md:block\">\n              <SearchModule />\n            </div>\n          </>\n        ) : (\n          <SearchModule />\n        )}\n      </div>\n      \n      <div className=\"w-full flex-grow\">\n        {isSearching ? <SearchResults /> : <MainContent />}\n      </div>\n    </div>\n  );\n}\n",
  "src/app/jobs/page.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { Button } from '@/components/ui/button';\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from '@/components/ui/dropdown-menu';\nimport { ChevronDown, ListFilter, Plus, Search } from 'lucide-react';\nimport { JobCard } from '@/components/job-card';\nimport { jobData, Job } from '@/lib/mock-data';\nimport { Input } from '@/components/ui/input';\n\nconst jobTypes = ['Thực tập sinh', 'Kỹ năng đặc định', 'Kỹ sư, Trí thức', 'Bán thời gian'];\n\nconst internIndustries = ['Ngư nghiệp', 'Nông Nghiệp', 'Thực phẩm', 'Sản xuất, dịch vụ tổng hợp', 'Cơ khí, kim loại', 'Xây dựng', 'May mặc'];\n\nexport default function JobsPage() {\n  const [activeTab, setActiveTab] = useState('Thị trường');\n  const [activeJobType, setActiveJobType] = useState('Thực tập sinh');\n  const [activeIndustry, setActiveIndustry] = useState('Thực phẩm');\n\n\n  return (\n    <div className=\"bg-secondary min-h-screen\">\n      <div className=\"container mx-auto px-2 md:px-4 py-4\">\n        {/* Job Type Navigation */}\n        <div className=\"bg-background md:rounded-lg shadow-sm mb-1\">\n          <div className=\"p-2 whitespace-nowrap overflow-x-auto\">\n            {jobTypes.map((type) => (\n              <Button\n                key={type}\n                variant={activeJobType === type ? 'default' : 'ghost'}\n                className={`mr-2 rounded-full ${activeJobType === type ? 'bg-primary text-white' : ''}`}\n                onClick={() => setActiveJobType(type)}\n              >\n                {type}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Intern Industries Sub-navigation */}\n        {activeJobType === 'Thực tập sinh' && (\n          <div className=\"bg-background md:rounded-lg shadow-sm mb-4\">\n            <div className=\"p-2 whitespace-nowrap overflow-x-auto\">\n              {internIndustries.map((industry) => (\n                 <Button\n                    key={industry}\n                    variant={activeIndustry === industry ? 'secondary' : 'ghost'}\n                    size=\"sm\"\n                    className={`mr-2 rounded-full text-sm font-semibold ${activeIndustry === industry ? 'bg-primary/10 text-primary' : 'text-muted-foreground'}`}\n                    onClick={() => setActiveIndustry(industry)}\n                 >\n                    {industry}\n                 </Button>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        {/* Main Content */}\n        <div className=\"bg-background rounded-lg shadow-sm\">\n          {/* Tabs */}\n          <div className=\"flex border-b\">\n            <button \n              className={`flex-1 py-3 text-center font-semibold transition-colors ${activeTab === 'Thị trường' ? 'text-primary border-b-2 border-primary' : 'text-muted-foreground'}`}\n              onClick={() => setActiveTab('Thị trường')}\n            >\n              Thị trường\n            </button>\n            <button \n              className={`flex-1 py-3 text-center font-semibold transition-colors ${activeTab === 'Của bạn' ? 'text-primary border-b-2 border-primary' : 'text-muted-foreground'}`}\n              onClick={() => setActiveTab('Của bạn')}\n            >\n              Của bạn\n            </button>\n          </div>\n\n          {/* Filters and Header */}\n          <div className=\"p-4 flex flex-col md:flex-row justify-between items-center gap-4 text-sm\">\n            <div className=\"relative w-full md:w-auto md:flex-grow max-w-xs\">\n                <Input placeholder=\"Tìm kiếm công việc...\" className=\"pl-10 rounded-full\" />\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-5 w-5 text-muted-foreground\" />\n            </div>\n            <div className=\"flex items-center gap-2 sm:gap-4\">\n              <span className=\"font-semibold text-muted-foreground whitespace-nowrap\">3318 việc làm</span>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-1\">\n                    Tuyển tại <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent>\n                  <DropdownMenuItem>Nhật Bản</DropdownMenuItem>\n                  <DropdownMenuItem>Việt Nam</DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"flex items-center gap-1\">\n                    Sắp xếp <ChevronDown className=\"w-4 h-4\" />\n                  </Button>\n                </DropdownMenuTrigger>\n                 <DropdownMenuContent>\n                  <DropdownMenuItem>Mới nhất</DropdownMenuItem>\n                  <DropdownMenuItem>Lương cao nhất</DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n              <Button variant=\"outline\" className=\"text-primary border-primary rounded-full px-3 py-1 h-auto\">\n                <ListFilter className=\"w-4 h-4\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Job Listings */}\n          <div className=\"p-2 md:p-4 grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n            {jobData.map((job) => (\n              <JobCard key={job.id} job={job} />\n            ))}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/layout.tsx": "import type { Metadata } from 'next';\nimport './globals.css';\nimport { Header } from '@/components/header';\nimport { Footer } from '@/components/footer';\nimport { Toaster } from '@/components/ui/toaster';\nimport { MobileFooter } from '@/components/mobile-footer';\n\nconst siteConfig = {\n  name: \"HelloJob\",\n  url: \"https://hellojob.vn\", // Replace with your actual domain\n  description: \"Nền tảng việc làm và phát triển sự nghiệp tại Nhật Bản. Tìm kiếm việc làm Kỹ năng đặc định (Tokutei Ginou), Thực tập sinh, Kỹ sư. Xây dựng lộ trình sự nghiệp (SWR) bền vững.\",\n  ogImage: \"https://hellojob.vn/og-image.png\", // Replace with your actual OG image URL\n};\n\nexport const metadata: Metadata = {\n  metadataBase: new URL(siteConfig.url),\n  title: {\n    default: siteConfig.name,\n    template: `%s | ${siteConfig.name}`,\n  },\n  description: siteConfig.description,\n  keywords: [\n    \"việc làm Nhật Bản\",\n    \"Tokutei Ginou\",\n    \"Kỹ năng đặc định\",\n    \"Thực tập sinh Nhật Bản\",\n    \"xuất khẩu lao động\",\n    \"HelloJob\",\n    \"SWR\",\n    \"lộ trình sự nghiệp\"\n  ],\n  authors: [{ name: \"HelloJob Team\", url: siteConfig.url }],\n  creator: \"HelloJob Team\",\n  openGraph: {\n    type: \"website\",\n    locale: \"vi_VN\",\n    url: siteConfig.url,\n    title: siteConfig.name,\n    description: siteConfig.description,\n    siteName: siteConfig.name,\n    images: [\n      {\n        url: siteConfig.ogImage,\n        width: 1200,\n        height: 630,\n        alt: siteConfig.name,\n      },\n    ],\n  },\n  twitter: {\n    card: \"summary_large_image\",\n    title: siteConfig.name,\n    description: siteConfig.description,\n    images: [siteConfig.ogImage],\n    creator: \"@hellojob\", // Replace with your Twitter handle\n  },\n  icons: {\n    icon: \"/favicon.ico\",\n  },\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"vi\" className=\"scroll-smooth\">\n      <head>\n        <link rel=\"preconnect\" href=\"https://fonts.googleapis.com\" />\n        <link rel=\"preconnect\" href=\"https://fonts.gstatic.com\" crossOrigin=\"anonymous\" />\n        <link\n          href=\"https://fonts.googleapis.com/css2?family=Montserrat:wght@400;700;900&display=swap\"\n          rel=\"stylesheet\"\n        />\n      </head>\n      <body className=\"antialiased pb-20 md:pb-0\">\n        <Header />\n        <main className=\"min-h-screen\">{children}</main>\n        <Footer />\n        <MobileFooter />\n        <Toaster />\n      </body>\n    </html>\n  );\n}\n",
  "src/app/learn/[id]/page.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { CheckCircle, Clock, FileText, Layers, Star, Users, PlayCircle, BookCheck } from 'lucide-react';\n\n// Mock data, in a real app this would be fetched based on params.id\nconst courseDetails = {\n  id: 'tieng-nhat-giao-tiep',\n  title: 'Tiếng Nhật giao tiếp cho người đi làm (Minna no Nihongo)',\n  category: 'Ngoại ngữ',\n  description: 'Khóa học được thiết kế đặc biệt cho người lao động, bám sát giáo trình Minna no Nihongo uy tín, tập trung vào các mẫu câu giao tiếp và từ vựng chuyên ngành thường dùng trong môi trường nhà máy Nhật Bản.',\n  instructor: {\n    name: 'Dung Mochi',\n    avatar: 'https://placehold.co/100x100.png',\n    dataAiHint: 'Japanese teacher',\n    title: 'Giáo viên tiếng Nhật',\n  },\n  stats: {\n    students: 1258,\n    rating: 4.8,\n    lessons: 25,\n    level: 'N5',\n  },\n  curriculum: [\n    { title: 'Bài 1: Giới thiệu bản thân', duration: '15:20', videoId: 'e-kFz1d4kE8' },\n    { title: 'Bài 2: Cái này, cái đó, cái kia', duration: '18:45', videoId: 'zUo2N2pG0qI' },\n    { title: 'Bài 3: Địa điểm, nơi chốn', duration: '20:10', videoId: '5p2sVqGgE_I' },\n    { title: 'Bài 4: Động từ và thời gian', duration: '22:55', videoId: 'zFzOqkUG4Ow' },\n    { title: 'Bài 5: Di chuyển', duration: '19:30', videoId: 'V92_uXn2o5o' },\n  ]\n};\n\nconst categoryColors: { [key: string]: string } = {\n  'Ngoại ngữ': 'bg-accent-orange text-white',\n};\n\nexport default function LearnDetailPage({ params }: { params: { id: string } }) {\n  const [activeVideo, setActiveVideo] = useState(courseDetails.curriculum[0].videoId);\n\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-12\">\n        <div className=\"grid lg:grid-cols-3 gap-8\">\n\n          {/* Main Content */}\n          <div className=\"lg:col-span-2 space-y-8\">\n            <Card className=\"overflow-hidden shadow-xl\">\n               <CardContent className=\"p-0\">\n                <div className=\"aspect-video bg-black\">\n                   <iframe \n                      className=\"w-full h-full\" \n                      src={`https://www.youtube.com/embed/${activeVideo}?autoplay=1`} \n                      title=\"YouTube video player\" \n                      frameBorder=\"0\" \n                      allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" \n                      allowFullScreen\n                    ></iframe>\n                </div>\n                <div className=\"p-6\">\n                    <p className={`inline-block px-3 py-1 text-sm font-semibold rounded-full mb-4 ${categoryColors[courseDetails.category]}`}>{courseDetails.category}</p>\n                    <CardTitle className=\"font-headline text-3xl mb-4\">{courseDetails.title}</CardTitle>\n                    <CardDescription className=\"text-base text-muted-foreground\">{courseDetails.description}</CardDescription>\n                </div>\n              </CardContent>\n            </Card>\n\n             <Card className=\"shadow-xl\">\n                 <CardHeader>\n                    <CardTitle className=\"font-headline text-xl\">Giảng viên</CardTitle>\n                </CardHeader>\n                <CardContent className=\"flex items-center gap-4\">\n                    <Avatar className=\"h-16 w-16\">\n                        <AvatarImage src={courseDetails.instructor.avatar} alt={courseDetails.instructor.name} data-ai-hint={courseDetails.instructor.dataAiHint} />\n                        <AvatarFallback>{courseDetails.instructor.name.charAt(0)}</AvatarFallback>\n                    </Avatar>\n                    <div>\n                        <p className=\"font-bold\">{courseDetails.instructor.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{courseDetails.instructor.title}</p>\n                    </div>\n                </CardContent>\n            </Card>\n          </div>\n\n          {/* Sidebar - Playlist */}\n          <div className=\"lg:col-span-1 space-y-6\">\n            <Card className=\"shadow-xl\">\n              <CardHeader>\n                <CardTitle className=\"font-headline text-xl\">Nội dung khóa học</CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-2 max-h-[600px] overflow-y-auto\">\n                 {courseDetails.curriculum.map((lesson, index) => (\n                    <button \n                        key={index} \n                        onClick={() => setActiveVideo(lesson.videoId)}\n                        className={`w-full text-left p-4 rounded-lg flex items-start gap-4 transition-colors ${activeVideo === lesson.videoId ? 'bg-primary/10' : 'hover:bg-secondary'}`}\n                    >\n                        <PlayCircle className={`h-6 w-6 mt-1 flex-shrink-0 ${activeVideo === lesson.videoId ? 'text-primary' : 'text-muted-foreground'}`}/>\n                        <div>\n                            <p className={`font-semibold ${activeVideo === lesson.videoId ? 'text-primary' : ''}`}>{lesson.title}</p>\n                            <p className=\"text-xs text-muted-foreground\">{lesson.duration}</p>\n                        </div>\n                    </button>\n                 ))}\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-xl\">\n                <CardHeader>\n                    <CardTitle className=\"font-headline text-xl\">Thông tin</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center gap-3 text-sm\">\n                        <Layers className=\"w-5 h-5 text-muted-foreground\"/>\n                        <span><strong>Cấp độ:</strong> {courseDetails.stats.level}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 text-sm\">\n                        <BookCheck className=\"w-5 h-5 text-muted-foreground\"/>\n                        <span><strong>Số bài học:</strong> {courseDetails.stats.lessons}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 text-sm\">\n                        <Users className=\"w-5 h-5 text-muted-foreground\"/>\n                        <span><strong>Học viên:</strong> {courseDetails.stats.students.toLocaleString()}</span>\n                    </div>\n                    <div className=\"flex items-center gap-3 text-sm\">\n                        <Star className=\"w-5 h-5 text-yellow-500 fill-yellow-500\"/>\n                        <span><strong>Đánh giá:</strong> {courseDetails.stats.rating} / 5</span>\n                    </div>\n                </CardContent>\n            </Card>\n          </div>\n\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/learn/page.tsx": "\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport Image from 'next/image';\nimport { ArrowRight, BookOpen, CheckCircle } from 'lucide-react';\nimport Link from 'next/link';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'E-Learning: Chinh phục tiếng Nhật và Kỹ năng làm việc',\n  description: 'Nâng cao kỹ năng, mở rộng cơ hội với các khóa học E-learning được thiết kế riêng cho người lao động Việt Nam muốn làm việc tại Nhật Bản.',\n};\n\n\nconst course = {\n  id: 'tieng-nhat-giao-tiep',\n  title: 'Tiếng Nhật giao tiếp cho người đi làm',\n  category: 'Ngoại ngữ',\n  description: 'Khóa học tiếng Nhật bám sát giáo trình Minna no Nihongo, tập trung vào các mẫu câu giao tiếp và từ vựng chuyên ngành thường dùng trong môi trường nhà máy Nhật Bản. Bắt đầu hành trình chinh phục tiếng Nhật của bạn ngay hôm nay!',\n  image: 'https://placehold.co/1200x600.png',\n  dataAiHint: 'Japanese language class',\n  features: [\n    'Hệ thống bài giảng video chi tiết',\n    'Tập trung vào giao tiếp thực tế',\n    'Từ vựng chuyên ngành sản xuất',\n    'Học mọi lúc, mọi nơi',\n  ]\n};\n\nexport default function LearnPage() {\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"text-center mb-16\">\n          <BookOpen className=\"h-16 w-16 mx-auto text-primary mb-4\" />\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold\">\n            E-Learning: Chinh phục tiếng Nhật\n          </h1>\n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n            Nâng cao kỹ năng, mở rộng cơ hội. Học mọi lúc, mọi nơi với các khóa học được thiết kế riêng cho người lao động.\n          </p>\n        </div>\n\n        <Card className=\"max-w-5xl mx-auto shadow-xl overflow-hidden\">\n            <div className=\"grid md:grid-cols-2\">\n                 <div className=\"relative min-h-[300px]\">\n                    <Image\n                      src={course.image}\n                      alt={course.title}\n                      fill\n                      className=\"object-cover\"\n                      data-ai-hint={course.dataAiHint}\n                    />\n                 </div>\n                 <div className=\"p-8 flex flex-col justify-center\">\n                    <p className=\"text-sm font-bold mb-2 text-primary\">{course.category}</p>\n                    <CardTitle className=\"font-headline text-3xl mb-4\">{course.title}</CardTitle>\n                    <p className=\"text-muted-foreground text-base mb-6\">{course.description}</p>\n                    <ul className=\"space-y-3 mb-8\">\n                        {course.features.map((feature, i) => (\n                            <li key={i} className=\"flex items-center gap-3\">\n                                <CheckCircle className=\"h-5 w-5 text-green-500\" />\n                                <span className=\"text-foreground\">{feature}</span>\n                            </li>\n                        ))}\n                    </ul>\n                    <Button asChild className=\"w-full md:w-auto bg-accent-orange hover:bg-accent-orange/90 text-white text-lg self-start\">\n                        <Link href={`/learn/${course.id}`}>\n                            Bắt đầu học ngay <ArrowRight className=\"ml-2\" />\n                        </Link>\n                    </Button>\n                 </div>\n            </div>\n        </Card>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/page.tsx": "\nimport type { Metadata } from 'next';\nimport HomeClient from './home-client';\n\nexport const metadata: Metadata = {\n    title: 'HelloJob: Việc làm tại Nhật Bản - Xây dựng sự nghiệp bền vững',\n    description: 'Tìm kiếm hàng ngàn cơ hội việc làm Kỹ năng đặc định (Tokutei Ginou), Thực tập sinh, Kỹ sư tại Nhật Bản. HelloJob đồng hành cùng bạn xây dựng lộ trình sự nghiệp (SWR) rõ ràng và hiệu quả.',\n}\n\nexport default function HomePage() {\n  return <HomeClient />;\n}\n",
  "src/app/post-job/page.tsx": "'use client';\n\nimport { useState } from 'react';\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { Briefcase, Send, Upload, FileText } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\n\ntype JobData = {\n    title: string;\n    industry: string;\n    type: string;\n    location: string;\n    description: string;\n    requirements: string;\n    benefits: string;\n};\n\nexport default function PostJobPage() {\n  const [activeTab, setActiveTab] = useState('ai');\n  const [jobData, setJobData] = useState<JobData>({\n    title: '',\n    industry: '',\n    type: '',\n    location: '',\n    description: '',\n    requirements: '',\n    benefits: '',\n  });\n\n  const handleInputChange = (field: keyof JobData, value: string) => {\n    setJobData((prev) => ({ ...prev, [field]: value }));\n  };\n\n  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    if (event.target.files && event.target.files[0]) {\n      // Simulate AI processing and pre-filling the form\n      const mockData: JobData = {\n        title: \"Kỹ sư Vận hành Dây chuyền Tự động\",\n        industry: \"dientu\",\n        type: \"full-time\",\n        location: \"Khu công nghệ cao Hòa Lạc, Hà Nội\",\n        description: \"- Chịu trách nhiệm vận hành, giám sát và bảo trì các dây chuyền sản xuất tự động.\\n- Đảm bảo các máy móc hoạt động ổn định, đạt năng suất và chất lượng theo yêu cầu.\\n- Phối hợp với các bộ phận khác để xử lý sự cố và cải tiến quy trình.\",\n        requirements: \"- Tốt nghiệp Cao đẳng/Đại học chuyên ngành Cơ điện tử, Tự động hóa hoặc các ngành liên quan.\\n- Có ít nhất 1 năm kinh nghiệm ở vị trí tương đương.\\n- Có khả năng đọc hiểu bản vẽ kỹ thuật.\",\n        benefits: \"- Mức lương cạnh tranh, thỏa thuận theo năng lực.\\n- Môi trường làm việc chuyên nghiệp, năng động.\\n- Được hưởng đầy đủ các chế độ phúc lợi theo quy định của pháp luật.\"\n      };\n      setJobData(mockData);\n      \n      // Switch to the manual tab to show the pre-filled data\n      setActiveTab('manual');\n    }\n  };\n\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"max-w-4xl mx-auto\">\n          <Card className=\"shadow-xl\">\n            <CardHeader className=\"text-center\">\n              <div className=\"mx-auto bg-primary/10 rounded-full p-4 w-fit mb-4\">\n                <Briefcase className=\"h-10 w-10 text-primary\" />\n              </div>\n              <CardTitle className=\"font-headline text-4xl\">Đăng tin tuyển dụng</CardTitle>\n              <CardDescription className=\"!mt-3 text-lg\">\n                Tiếp cận hàng ngàn ứng viên tiềm năng trên hệ thống HelloJob.\n              </CardDescription>\n            </CardHeader>\n            <CardContent className=\"p-6 md:p-8\">\n              <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\n                <TabsList className=\"grid w-full grid-cols-2 mb-8\">\n                  <TabsTrigger value=\"ai\">Đăng tin bằng AI</TabsTrigger>\n                  <TabsTrigger value=\"manual\">Đăng tin thủ công</TabsTrigger>\n                </TabsList>\n                \n                <TabsContent value=\"ai\">\n                   <div className=\"text-center p-6 border rounded-lg border-dashed\">\n                      <h3 className=\"text-xl font-bold font-headline mb-2\">Tải lên tin tuyển dụng</h3>\n                      <p className=\"text-muted-foreground mb-6\">Hệ thống sẽ tự động phân tích và điền thông tin giúp bạn.</p>\n                      <div className=\"relative border-2 border-dashed border-border rounded-lg p-10 flex flex-col items-center justify-center hover:border-primary transition-colors\">\n                          <Upload className=\"h-12 w-12 text-muted-foreground mb-4\" />\n                          <p className=\"mb-2 text-foreground\">Kéo thả tệp hoặc <span className=\"font-bold text-primary\">chọn tệp</span></p>\n                          <p className=\"text-xs text-muted-foreground\">Hỗ trợ PDF, DOCX, PNG, JPG</p>\n                          <Input id=\"ai-upload\" type=\"file\" className=\"absolute inset-0 w-full h-full opacity-0 cursor-pointer\" onChange={handleFileChange} />\n                      </div>\n                   </div>\n                </TabsContent>\n\n                <TabsContent value=\"manual\">\n                  <form className=\"space-y-8\">\n                    {/* Job Information */}\n                    <div className=\"space-y-4 p-6 border rounded-lg\">\n                      <h3 className=\"text-xl font-bold font-headline\">Thông tin việc làm</h3>\n                      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-title\">Chức danh</Label>\n                          <Input id=\"job-title\" placeholder=\"VD: Kỹ sư vận hành máy CNC\" value={jobData.title} onChange={(e) => handleInputChange('title', e.target.value)} />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-industry\">Ngành</Label>\n                          <Select value={jobData.industry} onValueChange={(value) => handleInputChange('industry', value)}>\n                            <SelectTrigger id=\"job-industry\"><SelectValue placeholder=\"Chọn ngành nghề\" /></SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"it\">Công nghệ thông tin</SelectItem>\n                              <SelectItem value=\"cokhi\">Cơ khí</SelectItem>\n                              <SelectItem value=\"detmay\">Dệt may</SelectItem>\n                              <SelectItem value=\"dientu\">Điện tử</SelectItem>\n                              <SelectItem value=\"logistics\">Logistics</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-type\">Loại hình công việc</Label>\n                          <Select value={jobData.type} onValueChange={(value) => handleInputChange('type', value)}>\n                            <SelectTrigger id=\"job-type\"><SelectValue placeholder=\"Chọn loại hình\" /></SelectTrigger>\n                            <SelectContent>\n                              <SelectItem value=\"full-time\">Toàn thời gian</SelectItem>\n                              <SelectItem value=\"part-time\">Bán thời gian</SelectItem>\n                              <SelectItem value=\"internship\">Thực tập</SelectItem>\n                            </SelectContent>\n                          </Select>\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-location\">Địa điểm làm việc</Label>\n                          <Input id=\"job-location\" placeholder=\"VD: Khu công nghệ cao, Q.9, TP.HCM\" value={jobData.location} onChange={(e) => handleInputChange('location', e.target.value)} />\n                        </div>\n                      </div>\n                    </div>\n\n                    {/* Job Description */}\n                    <div className=\"space-y-4 p-6 border rounded-lg\">\n                      <h3 className=\"text-xl font-bold font-headline\">Mô tả chi tiết</h3>\n                      <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-description\">Mô tả công việc</Label>\n                          <Textarea id=\"job-description\" placeholder=\"Mô tả công việc, trách nhiệm...\" rows={5} value={jobData.description} onChange={(e) => handleInputChange('description', e.target.value)} />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-requirements\">Yêu cầu ứng viên</Label>\n                          <Textarea id=\"job-requirements\" placeholder=\"Yêu cầu về kỹ năng, kinh nghiệm, học vấn...\" rows={5} value={jobData.requirements} onChange={(e) => handleInputChange('requirements', e.target.value)} />\n                        </div>\n                        <div className=\"space-y-2\">\n                          <Label htmlFor=\"job-benefits\">Quyền lợi</Label>\n                          <Textarea id=\"job-benefits\" placeholder=\"Phúc lợi, lương thưởng, cơ hội phát triển...\" rows={3} value={jobData.benefits} onChange={(e) => handleInputChange('benefits', e.target.value)} />\n                        </div>\n                    </div>\n\n                    {/* Contact Information */}\n                    <div className=\"space-y-4 p-6 border rounded-lg\">\n                      <h3 className=\"text-xl font-bold font-headline\">Thông tin liên hệ</h3>\n                        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"contact-name\">Người liên hệ</Label>\n                              <Input id=\"contact-name\" placeholder=\"Nguyễn Văn B\" />\n                            </div>\n                            <div className=\"space-y-2\">\n                              <Label htmlFor=\"contact-email\">Email liên hệ</Label>\n                              <Input id=\"contact-email\" type=\"email\" placeholder=\"hr@congty.com\" />\n                            </div>\n                        </div>\n                    </div>\n                    \n                    <div className=\"flex items-center space-x-2\">\n                        <Checkbox id=\"terms\" />\n                        <Label htmlFor=\"terms\" className=\"text-sm text-muted-foreground\">Tôi đồng ý với các <a href=\"#\" className=\"underline text-primary\">điều khoản dịch vụ</a> của HelloJob.</Label>\n                    </div>\n\n                    <div className=\"text-center pt-4\">\n                        <Button size=\"lg\" className=\"bg-primary text-white w-full md:w-auto\">\n                            <Send className=\"mr-2\"/> Đăng tin ngay\n                        </Button>\n                    </div>\n                  </form>\n                </TabsContent>\n              </Tabs>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/register/page.tsx": "\nimport { RegisterForm } from '@/components/register-form';\n\nexport default function RegisterPage() {\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h1 className=\"text-4xl md:text-5xl font-headline font-bold\">\n              Tạo hồ sơ ứng viên\n            </h1>\n            <p className=\"text-lg text-muted-foreground mt-4\">\n              Hoàn thành các bước sau để nhà tuyển dụng có thể tìm thấy bạn.\n            </p>\n          </div>\n          <RegisterForm />\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/roadmap/page.tsx": "\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { HardHat, School, Star, Plane, UserCheck, ShieldCheck, TrendingUp, Briefcase, MapIcon, Compass } from 'lucide-react';\nimport React from 'react';\nimport Image from 'next/image';\nimport { cn } from '@/lib/utils';\nimport type { Metadata } from 'next';\n\nexport const metadata: Metadata = {\n  title: 'Lộ trình sự nghiệp (SWR) tại Nhật Bản',\n  description: 'Khám phá lộ trình phát triển sự nghiệp (SWR) bền vững từ Thực tập sinh, Kỹ năng đặc định (Tokutei Ginou) 1 & 2, đến chuyên gia tay nghề cao tại Nhật Bản cùng HelloJob.',\n};\n\nconst roadmapSteps = [\n  {\n    icon: Compass,\n    title: 'Bước 1: Định hướng nghề nghiệp',\n    description: 'Bắt đầu từ tốt nghiệp PTTH, HelloJob sẽ cùng bạn đánh giá năng lực, định hướng con đường phù hợp nhất để trở thành lao động lành nghề, dù là làm việc trong nước hay chinh phục thị trường Nhật Bản.',\n    salary: 'Mức lương khởi điểm',\n    color: 'orange',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'career guidance compass',\n  },\n  {\n    icon: Plane,\n    title: 'Bước 2: Thực tập sinh tại Nhật (3-5 năm)',\n    description: 'Bắt đầu hành trình tại Nhật với vai trò Thực tập sinh kỹ năng. Đây là giai đoạn để bạn làm quen với môi trường, văn hóa làm việc chuyên nghiệp và tích lũy kinh nghiệm nền tảng đầu tiên.',\n    salary: '~30 triệu VNĐ/tháng',\n    color: 'light-blue',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'trainee learning japan',\n  },\n  {\n    icon: Star,\n    title: 'Bước 3: Kỹ năng đặc định 1 (Tối đa 5 năm)',\n    description: 'Sau khi hoàn thành chương trình thực tập sinh, bạn sẽ được nâng cấp lên visa Kỹ năng đặc định (Tokutei Ginou 1). Tay nghề cao hơn, được phép chuyển việc trong ngành và nhận mức thu nhập cải thiện rõ rệt.',\n    salary: '40-50 triệu VNĐ/tháng',\n    color: 'dark-blue',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'skilled worker certificate',\n  },\n  {\n    icon: ShieldCheck,\n    title: 'Bước 4: Kỹ năng đặc định 2 (Lâu dài)',\n    description: 'Đây là cấp độ cao nhất của lao động kỹ năng. Với visa Tokutei Ginou 2, bạn có cơ hội bảo lãnh gia đình sang sinh sống và làm việc, đồng thời mở ra con đường xin visa vĩnh trú tại Nhật.',\n    salary: 'Tiếp tục tăng',\n    color: 'green',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'family in japan',\n  },\n  {\n    icon: TrendingUp,\n    title: 'Bước 5: Chuyên gia lành nghề',\n    description: 'Với sự đồng hành và đào tạo chuyên sâu từ HelloJob, bạn sẽ trở thành chuyên gia trong lĩnh vực của mình, đảm nhận những vị trí quan trọng và đạt được mức thu nhập đỉnh cao.',\n    salary: '60-70 triệu VNĐ/tháng',\n    color: 'dark-blue',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'expert engineer meeting',\n  },\n  {\n    icon: Briefcase,\n    title: 'Bước 6: Sự nghiệp rộng mở',\n    description: 'Lựa chọn trở về Việt Nam với vị thế một chuyên gia được săn đón, hoặc tiếp tục con đường định cư và phát triển sự nghiệp lâu dài tại Nhật Bản. HelloJob luôn là đối tác tin cậy của bạn.',\n    salary: 'Thu nhập chuyên gia',\n    color: 'light-blue',\n    image: 'https://placehold.co/500x300.png',\n    dataAiHint: 'manager working office',\n  },\n];\n\nconst colorClasses: { [key: string]: { bg: string; text: string; border: string } } = {\n  orange: { bg: 'bg-accent-orange', text: 'text-accent-orange', border: 'border-accent-orange' },\n  'light-blue': { bg: 'bg-primary', text: 'text-primary', border: 'border-primary' },\n  'dark-blue': { bg: 'bg-accent', text: 'text-accent', border: 'border-accent' },\n  green: { bg: 'bg-accent-green', text: 'text-accent-green', border: 'border-accent-green' },\n};\n\n\nexport default function RoadmapPage() {\n  return (\n    <div className=\"bg-secondary\">\n      <div className=\"container mx-auto px-4 md:px-6 py-16 md:py-24\">\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-headline font-bold text-accent\">\n            Lộ trình phát triển sự nghiệp (SWR)\n          </h1>\n          <p className=\"text-lg text-muted-foreground mt-4 max-w-3xl mx-auto\">\n            Chúng tôi cam kết đồng hành cùng bạn trên con đường phát triển sự nghiệp bền vững, từ bước đầu tiên đến khi trở thành chuyên gia tay nghề cao.\n          </p>\n        </div>\n\n        <div className=\"relative max-w-6xl mx-auto\">\n          {/* Vertical line */}\n          <div className=\"absolute left-1/2 -translate-x-1/2 top-4 bottom-4 w-1 bg-border rounded-full hidden md:block\" />\n\n          <div className=\"space-y-12 md:space-y-4\">\n            {roadmapSteps.map((step, index) => {\n              const colors = colorClasses[step.color] || colorClasses['light-blue'];\n              return (\n              <div key={index} className=\"relative flex flex-col md:flex-row items-center group md:h-80\">\n                {/* Timeline circle for desktop */}\n                <div className=\"hidden md:block absolute left-1/2 -translate-x-1/2 z-10\">\n                   <div className={cn(\n                        \"w-12 h-12 rounded-full flex items-center justify-center border-4 border-secondary group-hover:scale-110 transition-transform duration-300\",\n                        colors.bg\n                    )}>\n                      <step.icon className=\"h-6 w-6 text-white\" />\n                    </div>\n                </div>\n                \n                {/* Mobile Icon */}\n                 <div className=\"md:hidden flex items-center gap-4 mb-4 w-full\">\n                    <div className={cn(\"w-12 h-12 rounded-full flex items-center justify-center flex-shrink-0\", colors.bg)}>\n                        <step.icon className=\"h-6 w-6 text-white\" />\n                    </div>\n                    <h2 className={cn(\"font-headline text-2xl\", colors.text)}>{step.title}</h2>\n                </div>\n\n\n                {/* Content: Right side (for even index on desktop) or all on mobile */}\n                <div className={`w-full md:w-1/2 ${index % 2 !== 0 ? 'md:pl-16' : 'md:pr-16 md:text-right'} ${index % 2 !== 0 ? 'md:order-2' : ''}`}>\n                   <Card className={cn(\"shadow-lg hover:shadow-xl transition-shadow duration-300 border-t-4\", colors.border)}>\n                     <CardHeader className=\"hidden md:block\">\n                      <CardTitle className={cn(\"font-headline text-2xl\", colors.text)}>\n                          {step.title}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent className=\"pt-6\">\n                      <p className=\"text-muted-foreground mb-4\">{step.description}</p>\n                       <div className={`font-bold text-lg ${index % 2 !== 0 ? 'md:text-left' : 'md:text-right'}`}>\n                         <span className=\"text-accent-green\">{step.salary}</span>\n                       </div>\n                    </CardContent>\n                  </Card>\n                </div>\n\n                {/* Image: Left side (for even index on desktop) */}\n                <div className={`hidden md:flex w-1/2 h-full items-center ${index % 2 !== 0 ? 'md:pr-16 md:order-1' : 'md:pl-16'}`}>\n                   <Image src={step.image} alt={step.title} width={500} height={300} className=\"rounded-lg shadow-xl object-cover w-full h-64\" data-ai-hint={step.dataAiHint} />\n                </div>\n              </div>\n            )})}\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n",
  "src/app/sitemap.ts": "import { MetadataRoute } from 'next';\nimport { articles } from '@/lib/handbook-data';\n\nexport default function sitemap(): MetadataRoute.Sitemap {\n  const siteUrl = 'https://hellojob.vn'; // Replace with your actual domain\n\n  // Static pages\n  const staticRoutes = [\n    '',\n    '/roadmap',\n    '/career-orientation',\n    '/career-orientation/holland',\n    '/career-orientation/disc',\n    '/career-orientation/mbti',\n    '/ai-profile',\n    '/learn',\n    '/handbook',\n    '/about',\n    '/candidate-profile',\n    '/employers',\n    '/franchise',\n    '/post-job',\n    '/dashboard'\n  ].map((route) => ({\n    url: `${siteUrl}${route}`,\n    lastModified: new Date(),\n    changeFrequency: 'weekly' as const,\n    priority: route === '' ? 1 : 0.8,\n  }));\n\n  // Dynamic handbook articles\n  const handbookRoutes = articles.map((article) => ({\n    url: `${siteUrl}/handbook/${article.slug}`,\n    lastModified: new Date(),\n    changeFrequency: 'monthly' as const,\n    priority: 0.7,\n  }));\n  \n  // You can add more dynamic routes here, e.g., for jobs, employers, etc.\n\n  return [...staticRoutes, ...handbookRoutes];\n}\n",
  "src/components/custom-icons.tsx": "import { cn } from \"@/lib/utils\";\n\nexport const ZaloIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg viewBox=\"0 0 262 263\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n        <path d=\"M131 0C58.649 0 0 58.649 0 131C0 203.351 58.649 262 131 262C203.351 262 262 203.351 262 131C262 58.649 203.351 0 131 0ZM197.838 170.368L173.962 194.244C171.139 197.067 167.247 197.68 163.639 196.223L126.541 182.903C125.129 182.413 123.824 181.711 122.625 180.892L74.832 144.37C71.748 142.029 70.832 137.989 72.585 134.577L84.975 111.758C86.728 108.347 90.722 106.889 94.276 108.347L131.374 121.612C132.786 122.102 134.091 122.748 135.29 123.623L183.083 160.145C186.167 162.486 187.083 166.526 185.33 169.937L197.838 170.368Z\" fill=\"#0068FF\"/>\n    </svg>\n)\n\nexport const JpgIcon = ({className, ...props}: React.SVGProps<SVGSVGElement>) => (\n    <svg className={cn(\"w-6 h-6\", className)} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n        <rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#FFDDC2\"/>\n        <path d=\"M6 7H7.5L9 11L10.5 7H12V17H10.5V11L9 15H7.5L6 11V17H4.5V7H6Z\" fill=\"#FF6B00\"/>\n        <path d=\"M14.5 17C16.9853 17 19 14.9853 19 12.5C19 10.0147 16.9853 8 14.5 8C12.0147 8 10 10.0147 10 12.5C10 14.9853 12.0147 17 14.5 17ZM14.5 15.5C16.1569 15.5 17.5 14.1569 17.5 12.5C17.5 10.8431 16.1569 9.5 14.5 9.5C12.8431 9.5 11.5 10.8431 11.5 12.5C11.5 14.1569 12.8431 15.5 14.5 15.5Z\" fill=\"#FF6B00\"/>\n        <path d=\"M20 7H22V15.5H20V7Z\" fill=\"#FF6B00\"/>\n    </svg>\n);\n\nexport const PdfIcon = ({className, ...props}: React.SVGProps<SVGSVGElement>) => (\n    <svg className={cn(\"w-6 h-6\", className)} viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\" {...props}>\n        <rect width=\"24\" height=\"24\" rx=\"4\" fill=\"#FFC2C2\"/>\n        <path d=\"M6.5 7H11C12.3807 7 13.5 8.11929 13.5 9.5V9.5C13.5 10.8807 12.3807 12 11 12H8V7\" stroke=\"#FF0000\" strokeWidth=\"1.5\"/>\n        <path d=\"M8 12V17\" stroke=\"#FF0000\" strokeWidth=\"1.5\"/>\n        <path d=\"M15.5 17C17.433 17 19 15.433 19 13.5V10.5C19 8.567 17.433 7 15.5 7C13.567 7 12 8.567 12 10.5V13.5C12 15.433 13.567 17 15.5 17Z\" stroke=\"#FF0000\" strokeWidth=\"1.5\"/>\n        <path d=\"M22 7V17H20.5\" stroke=\"#FF0000\" strokeWidth=\"1.5\"/>\n    </svg>\n);\n\nexport const VnFlagIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 900 600\" {...props}>\n    <rect fill=\"#da251d\" width=\"900\" height=\"600\"/>\n    <path fill=\"#ff0\" d=\"m450 152l-117.6 362.4l307.7-224H142.3l307.7 224z\"/>\n  </svg>\n);\n\nexport const JpFlagIcon = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 900 600\" {...props}>\n    <rect fill=\"#fff\" width=\"900\" height=\"600\"/>\n    <circle fill=\"#bc002d\" cx=\"450\" cy=\"300\" r=\"180\"/>\n  </svg>\n);\n\nexport const EnFlagIcon = (props: React.SVGProps<SVGSVGElement>) => (\n    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 60 30\" {...props}>\n        <clipPath id=\"s\">\n            <path d=\"M0,0 v30 h60 v-30 z\"/>\n        </clipPath>\n        <clipPath id=\"t\">\n            <path d=\"M30,15 h30 v15 z v15 h-30 z h-30 v-15 z v-15 h30 z\"/>\n        </clipPath>\n        <g clipPath=\"url(#s)\">\n            <path d=\"M0,0 v30 h60 v-30 z\" fill=\"#012169\"/>\n            <path d=\"M0,0 L60,30 M60,0 L0,30\" stroke=\"#fff\" strokeWidth=\"6\"/>\n            <path d=\"M0,0 L60,30 M60,0 L0,30\" clipPath=\"url(#t)\" stroke=\"#C8102E\" strokeWidth=\"4\"/>\n            <path d=\"M30,0 v30 M0,15 h60\" stroke=\"#fff\" strokeWidth=\"10\"/>\n            <path d=\"M30,0 v30 M0,15 h60\" stroke=\"#C8102E\" strokeWidth=\"6\"/>\n        </g>\n    </svg>\n);\n",
  "src/components/dashboard-charts.tsx": "'use client';\n\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { PieChart, Pie, Cell, ResponsiveContainer, BarChart, Bar, XAxis, YAxis, Tooltip, Legend } from 'recharts';\n\nconst pieData = [\n  { name: 'Cơ khí', value: 400 },\n  { name: 'Điện tử', value: 300 },\n  { name: 'Dệt may', value: 300 },\n  { name: 'Chế biến TP', value: 200 },\n  { name: 'IT/Phần mềm', value: 278 },\n  { name: 'Logistics', value: 189 },\n];\n\nconst barData = [\n  { name: 'Vận hành máy', value: 2400 },\n  { name: 'Lắp ráp', value: 1398 },\n  { name: 'Kiểm tra chất lượng', value: 9800 },\n  { name: 'Sửa chữa', value: 3908 },\n  { name: 'Lập trình', value: 4800 },\n  { name: 'Ngoại ngữ', value: 3800 },\n];\n\n// Updated vibrant colors from globals.css\nconst COLORS = [\n  'hsl(var(--chart-1))', \n  'hsl(var(--chart-2))', \n  'hsl(var(--chart-3))', \n  'hsl(var(--chart-4))', \n  'hsl(var(--chart-5))',\n  '#38A3A5' // Fallback\n];\n\n\nexport function DashboardCharts() {\n  return (\n    <>\n      <Card className=\"lg:col-span-2 shadow-xl hover:shadow-2xl transition-shadow duration-300\">\n        <CardHeader>\n          <CardTitle className=\"font-headline text-2xl\">Ngành nghề quan tâm</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div style={{ width: '100%', height: 300 }}>\n            <ResponsiveContainer>\n              <PieChart>\n                <Pie\n                  data={pieData}\n                  cx=\"50%\"\n                  cy=\"50%\"\n                  labelLine={false}\n                  outerRadius={110}\n                  innerRadius={50}\n                  fill=\"#8884d8\"\n                  dataKey=\"value\"\n                  paddingAngle={5}\n                  label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\n                >\n                  {pieData.map((entry, index) => (\n                    <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                  ))}\n                </Pie>\n                <Tooltip \n                  cursor={{fill: 'hsla(var(--muted), 0.5)'}}\n                  contentStyle={{\n                    backgroundColor: 'hsl(var(--background))',\n                    borderRadius: 'var(--radius)',\n                    border: '1px solid hsl(var(--border))'\n                  }}\n                />\n              </PieChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n      <Card className=\"lg:col-span-3 shadow-xl hover:shadow-2xl transition-shadow duration-300\">\n        <CardHeader>\n          <CardTitle className=\"font-headline text-2xl\">Kỹ năng phổ biến</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div style={{ width: '100%', height: 300 }}>\n            <ResponsiveContainer>\n              <BarChart data={barData} layout=\"vertical\" margin={{ top: 5, right: 30, left: 50, bottom: 5 }}>\n                <XAxis type=\"number\" />\n                <YAxis dataKey=\"name\" type=\"category\" width={100} tickLine={false} axisLine={false} />\n                <Tooltip \n                  cursor={{fill: 'hsla(var(--muted), 0.5)'}}\n                  contentStyle={{\n                    backgroundColor: 'hsl(var(--background))',\n                    borderRadius: 'var(--radius)',\n                    border: '1px solid hsl(var(--border))'\n                  }}\n                />\n                <Legend />\n                <Bar dataKey=\"value\" name=\"Số lượng ứng viên\" fill=\"hsl(var(--primary))\" radius={[0, 8, 8, 0]} />\n              </BarChart>\n            </ResponsiveContainer>\n          </div>\n        </CardContent>\n      </Card>\n    </>\n  );\n}\n",
  "src/components/dashboard-table.tsx": "\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';\nimport { Badge } from '@/components/ui/badge';\nimport Link from 'next/link';\n\nconst candidates = [\n  { id: 1, name: 'Lê Thị An', school: 'ĐH Bách Khoa', skills: ['Lập trình', 'Tiếng Anh'], industry: 'IT' },\n  { id: 2, name: 'Trần Văn Bình', school: 'CĐ Kỹ thuật Cao Thắng', skills: ['Vận hành máy', 'Sửa chữa'], industry: 'Cơ khí' },\n  { id: 3, name: 'Phạm Thị Cúc', school: 'ĐH Công nghiệp', skills: ['Kiểm tra chất lượng'], industry: 'Dệt may' },\n  { id: 4, name: 'Nguyễn Hùng Dũng', school: 'THPT', skills: ['Lắp ráp'], industry: 'Điện tử' },\n  { id: 5, name: 'Võ Thị Em', school: 'ĐH Kinh tế', skills: ['Tiếng Nhật', 'Logistics'], industry: 'Logistics' },\n  { id: 6, name: 'Đặng Văn Giang', school: 'CĐ Nghề', skills: ['Vận hành máy'], industry: 'Cơ khí' },\n  { id: 7, name: 'Hoàng Thị Hoa', school: 'ĐH Sư phạm Kỹ thuật', skills: ['Kiểm tra chất lượng', 'Tiếng Hàn'], industry: 'Điện tử' },\n  { id: 8, name: 'Lý Văn Ích', school: 'THPT', skills: ['Lắp ráp'], industry: 'Dệt may' },\n  { id: 9, name: 'Bùi Thị Kim', school: 'ĐH Khoa học Tự nhiên', skills: ['Lập trình', 'Phân tích dữ liệu'], industry: 'IT' },\n  { id: 10, name: 'Dương Văn Long', school: 'CĐ Giao thông Vận tải', skills: ['Vận hành xe nâng'], industry: 'Logistics' },\n];\n\nconst industryColors: { [key: string]: string } = {\n  IT: 'bg-sky-100 text-sky-700',\n  'Cơ khí': 'bg-orange-100 text-orange-700',\n  'Dệt may': 'bg-indigo-100 text-indigo-700',\n  'Điện tử': 'bg-blue-100 text-blue-700',\n  'Logistics': 'bg-green-100 text-green-700',\n};\n\nexport function CandidatesTable() {\n  return (\n    <div className=\"rounded-lg border overflow-hidden\">\n      <Table>\n        <TableHeader>\n          <TableRow className=\"bg-secondary\">\n            <TableHead className=\"w-[200px]\">Tên ứng viên</TableHead>\n            <TableHead>Trường/Trình độ</TableHead>\n            <TableHead>Kỹ năng</TableHead>\n            <TableHead>Ngành mong muốn</TableHead>\n          </TableRow>\n        </TableHeader>\n        <TableBody>\n          {candidates.map((candidate) => (\n            <TableRow key={candidate.id} className=\"hover:bg-secondary/50\">\n              <TableCell className=\"font-medium\">\n                <Link href=\"/candidate-profile\" className=\"hover:underline text-primary\">\n                    {candidate.name}\n                </Link>\n              </TableCell>\n              <TableCell>{candidate.school}</TableCell>\n              <TableCell>\n                <div className=\"flex flex-wrap gap-2\">\n                  {candidate.skills.map((skill) => (\n                    <Badge key={skill} variant=\"secondary\" className=\"font-normal\">{skill}</Badge>\n                  ))}\n                </div>\n              </TableCell>\n              <TableCell>\n                <Badge className={`font-semibold ${industryColors[candidate.industry] || 'bg-gray-100 text-gray-700'}`}>{candidate.industry}</Badge>\n              </TableCell>\n            </TableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </div>\n  );\n}\n",
  "src/components/footer.tsx": "import Link from 'next/link';\n\nconst Logo = () => (\n    <span className=\"text-2xl font-black font-headline\">\n      <span className=\"text-accent\">H</span>\n      <span className=\"text-accent-orange\">e</span>\n      <span className=\"text-primary\">l</span>\n      <span className=\"text-accent-orange\">l</span>\n      <span className=\"text-accent-green\">o</span>\n      <span className=\"text-primary\">Job</span>\n    </span>\n);\n\nexport function Footer() {\n  return (\n    <footer className=\"bg-secondary text-secondary-foreground hidden md:block\">\n      <div className=\"container mx-auto px-4 md:px-6 py-8\">\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-8\">\n          <div>\n            <Link href=\"/\" className=\"flex items-center gap-2 mb-4\">\n              <Logo />\n            </Link>\n            <p className=\"text-sm text-muted-foreground\">\n              Giải pháp nhân lực toàn diện cho các khu công nghiệp tại Việt Nam.\n            </p>\n          </div>\n          <div>\n            <h4 className=\"font-bold mb-4\">Dành cho ứng viên</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/register\" className=\"hover:text-primary\">Đăng ký hồ sơ</Link></li>\n              <li><Link href=\"/candidate-profile\" className=\"hover:text-primary\">Hồ sơ của tôi</Link></li>\n              <li><Link href=\"/roadmap\" className=\"hover:text-primary\">Lộ trình sự nghiệp</Link></li>\n              <li><Link href=\"/learn\" className=\"hover:text-primary\">Khóa học online</Link></li>\n              <li><Link href=\"/consultant-profile\" className=\"hover:text-primary\">Tư vấn viên</Link></li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-bold mb-4\">Dành cho nhà tuyển dụng</h4>\n            <ul className=\"space-y-2 text-sm\">\n              <li><Link href=\"/post-job\" className=\"hover:text-primary\">Đăng tin tuyển dụng</Link></li>\n              <li><Link href=\"/employers\" className=\"hover:text-primary\">Danh sách công ty</Link></li>\n              <li><Link href=\"/dashboard\" className=\"hover:text-primary\">Báo cáo dữ liệu</Link></li>\n              <li><Link href=\"/franchise\" className=\"hover:text-primary\">Đối tác tại Nhật</Link></li>\n            </ul>\n          </div>\n          <div>\n            <h4 className=\"font-bold mb-4\">Liên hệ</h4>\n            <p className=\"text-sm text-muted-foreground\">\n              HelloJob JSC<br />\n              Email: contact@hellojob.vn<br />\n              Hotline: 1900 1234\n            </p>\n          </div>\n        </div>\n        <div className=\"mt-8 border-t pt-4 text-center text-sm text-muted-foreground\">\n          <p>&copy; {new Date().getFullYear()} HelloJob. All Rights Reserved.</p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n",
  "src/components/header.tsx": "\n'use client';\n\nimport Link from 'next/link';\nimport { Briefcase, Menu, X, Building, PlusCircle, User, LogOut, Shield, FileText, Gift, MessageSquareWarning, Settings, LifeBuoy, LayoutGrid, Sparkles, BookOpen, Compass, Home, Info, Handshake, ChevronDown } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Sheet, SheetContent, SheetHeader, SheetTitle, SheetClose, SheetTrigger } from '@/components/ui/sheet';\nimport { useState } from 'react';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/utils';\nimport {\n  Accordion,\n  AccordionContent,\n  AccordionItem,\n  AccordionTrigger,\n} from '@/components/ui/accordion';\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuLabel, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger,\n  DropdownMenuGroup\n} from '@/components/ui/dropdown-menu';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { VnFlagIcon, JpFlagIcon, EnFlagIcon } from './custom-icons';\n\nconst mainNavLinks = [\n  { href: '/', label: 'Trang chủ'},\n  { href: '/roadmap', label: 'Lộ trình' },\n  { href: '/career-orientation', label: 'Hướng nghiệp' },\n  { href: '/ai-profile', label: 'Tạo hồ sơ AI', icon: Sparkles },\n  { href: '/learn', label: 'E-Learning' },\n  { href: '/handbook', label: 'Cẩm nang'},\n  { href: '/about', label: 'Giới thiệu' },\n];\n\nconst employerLinks = [\n  { href: '/post-job', label: 'Đăng việc làm' },\n  { href: '/dashboard', label: 'Dữ liệu' },\n  { href: '/franchise', label: 'Đối tác tại Nhật' },\n];\n\nconst quickAccessLinks = [\n    { href: '/ai-profile', label: 'Tạo hồ sơ AI', icon: Sparkles },\n    { href: '/roadmap', label: 'Lộ trình', icon: Compass },\n    { href: '/learn', label: 'E-Learning', icon: BookOpen },\n    { href: '/post-job', label: 'Đăng tuyển dụng', icon: PlusCircle },\n    { href: '/dashboard', label: 'Dữ liệu & Báo cáo', icon: FileText },\n    { href: '/franchise', label: 'Đối tác tại Nhật', icon: Handshake },\n    { href: '/consultant-profile', label: 'Tư vấn viên', icon: User },\n    { href: '/handbook', label: 'Cẩm nang', icon: LifeBuoy },\n    { href: '/about', label: 'Giới thiệu', icon: Info },\n    { href: '#', label: 'Góp ý', icon: MessageSquareWarning },\n];\n\nconst LanguageSwitcher = () => {\n    return (\n        <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" className=\"flex items-center gap-2\">\n                    <VnFlagIcon className=\"h-5 w-5 rounded-sm\" />\n                    <span className=\"font-bold hidden sm:inline\">VN</span>\n                </Button>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-40\">\n                <DropdownMenuItem className=\"flex items-center gap-2 cursor-pointer\">\n                    <VnFlagIcon className=\"h-5 w-5 rounded-sm\" />\n                    <span>VN</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"flex items-center gap-2 cursor-pointer\">\n                    <JpFlagIcon className=\"h-5 w-5 rounded-sm\" />\n                    <span>JP</span>\n                </DropdownMenuItem>\n                <DropdownMenuItem className=\"flex items-center gap-2 cursor-pointer\">\n                    <EnFlagIcon className=\"h-5 w-5 rounded-sm\" />\n                    <span>EN</span>\n                </DropdownMenuItem>\n            </DropdownMenuContent>\n        </DropdownMenu>\n    );\n};\n\n\nexport function Header() {\n  const pathname = usePathname();\n\n  const Logo = () => (\n    <span className=\"text-3xl font-black font-headline\">\n      <span className=\"text-accent\">H</span>\n      <span className=\"text-accent-orange\">e</span>\n      <span className=\"text-primary\">l</span>\n      <span className=\"text-accent-orange\">l</span>\n      <span className=\"text-accent-green\">o</span>\n      <span className=\"text-primary\">Job</span>\n    </span>\n  );\n\n  const NavLink = ({ href, label, className, icon: Icon, onClick }: { href: string; label: string, className?: string, icon?: React.ElementType, onClick?: (e: React.MouseEvent<HTMLAnchorElement>) => void }) => (\n    <Link\n      href={href}\n      className={cn(\n        'transition-colors hover:text-primary py-2 block font-medium flex items-center gap-2',\n        pathname.startsWith(href) && href !== '/' || pathname === href ? 'text-primary font-bold' : 'text-foreground/80',\n        className\n      )}\n       onClick={(e) => {\n        if(onClick) onClick(e);\n      }}\n    >\n      {Icon && <Icon className=\"h-5 w-5\" />}\n      {label}\n    </Link>\n  );\n  \n  const handleHomeClick = (e: React.MouseEvent<HTMLAnchorElement>) => {\n      if (pathname === '/') {\n        e.preventDefault();\n        window.location.reload();\n      }\n  }\n\n  return (\n    <header className=\"sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n      <div className=\"container mx-auto flex h-16 items-center justify-between px-4 md:px-6\">\n        <Link href=\"/\" className=\"flex items-center gap-2\">\n          <Logo />\n        </Link>\n        <nav className=\"hidden md:flex items-center gap-6 text-sm\">\n          {mainNavLinks.map((link) => (\n             <NavLink \n                key={link.href} \n                href={link.href}\n                label={link.label}\n                icon={link.href === '/ai-profile' ? link.icon : undefined}\n                onClick={link.href === '/' ? handleHomeClick : undefined} \n             />\n          ))}\n        </nav>\n        <div className=\"hidden md:flex items-center gap-2\">\n            <LanguageSwitcher />\n             <Button asChild variant=\"outline\">\n                <Link href=\"/candidate-profile\">Hồ sơ của tôi</Link>\n            </Button>\n            \n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                 <Button variant=\"ghost\" size=\"icon\" className=\"rounded-full\">\n                  <LayoutGrid className=\"h-5 w-5\" />\n                  <span className=\"sr-only\">Open Menu</span>\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent className=\"w-[360px]\" align=\"end\" forceMount>\n                <DropdownMenuLabel className=\"font-normal\">\n                  <div className=\"flex items-center gap-3\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src=\"https://placehold.co/100x100.png\" alt=\"User\" data-ai-hint=\"user avatar\" />\n                      <AvatarFallback>A</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-base font-medium leading-none\">HelloJob</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        Cán bộ tuyển dụng\n                      </p>\n                    </div>\n                  </div>\n                </DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuGroup>\n                  <div className=\"grid grid-cols-4 gap-2 p-2\">\n                     {quickAccessLinks.map((link) => (\n                         <DropdownMenuItem asChild key={link.href}>\n                           <Link href={link.href} className=\"flex flex-col items-center justify-start p-2 h-20 cursor-pointer rounded-md hover:bg-accent\">\n                             <div className=\"h-8 flex items-center justify-center\"><link.icon/></div>\n                             <span className=\"text-xs text-center leading-tight\">{link.label}</span>\n                           </Link>\n                        </DropdownMenuItem>\n                     ))}\n                  </div>\n                </DropdownMenuGroup>\n              </DropdownMenuContent>\n            </DropdownMenu>\n\n        </div>\n        <div className=\"md:hidden\">\n            <LanguageSwitcher />\n        </div>\n      </div>\n    </header>\n  );\n}\n",
  "src/components/job-card.tsx": "import Image from 'next/image';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent } from '@/components/ui/card';\nimport { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';\nimport { Heart, Phone, Briefcase, User, MoreHorizontal, MapPin } from 'lucide-react';\nimport { Job } from '@/lib/mock-data';\nimport { ZaloIcon } from './custom-icons';\nimport {\n    DropdownMenu,\n    DropdownMenuContent,\n    DropdownMenuItem,\n    DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { cn } from '@/lib/utils';\n\nexport const JobCard = ({ job }: { job: Job }) => {\n  // Desktop layout\n  const DesktopLayout = () => (\n    <div className=\"hidden md:flex flex-row items-stretch w-full p-4 gap-4\">\n      {/* Left side: Image */}\n      <div className=\"relative w-1/4 flex-shrink-0 aspect-video rounded-lg overflow-hidden\">\n        <Image src={job.image.src} alt={job.title} fill className=\"object-cover\" />\n        <div className=\"absolute top-2 left-2 bg-black/60 text-white text-xs font-bold px-2 py-1 rounded-full flex items-center gap-1.5\">\n          <div className={cn(\"w-2 h-2 rounded-full\", job.isRecording ? 'bg-red-500 animate-pulse' : 'bg-gray-400')}></div>\n          <span>{job.id}</span>\n        </div>\n      </div>\n\n      {/* Middle side: Main Content */}\n      <div className=\"flex-grow flex flex-col justify-between py-1\">\n        <div>\n          <h3 className=\"font-bold text-lg mb-2 hover:text-primary cursor-pointer leading-tight\">{job.title}</h3>\n          <div className=\"flex items-center gap-2 mb-3\">\n              {job.salary.actual && <Badge variant=\"secondary\" className=\"text-sm bg-green-100 text-green-800 border-green-200 py-1 px-3\">Thực lĩnh: {job.salary.actual}</Badge>}\n              <Badge variant=\"secondary\" className=\"text-sm py-1 px-3\">Cơ bản: {job.salary.basic}</Badge>\n          </div>\n          <p className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n              <MapPin className=\"h-4 w-4\" />\n              <span>Nagasaki</span>\n          </p>\n        </div>\n        \n        <div className=\"mt-auto flex items-center gap-4 text-sm\">\n          <Avatar className=\"w-10 h-10\">\n            <AvatarImage src={job.recruiter.avatar} alt={job.recruiter.name} />\n            <AvatarFallback>{job.recruiter.name.charAt(0)}</AvatarFallback>\n          </Avatar>\n          <div>\n            <p className=\"font-semibold text-primary\">{job.recruiter.name}</p>\n            <p className=\"text-muted-foreground\">{job.recruiter.company}</p>\n          </div>\n           <Button variant=\"outline\" size=\"sm\" className=\"h-9\"><Phone className=\"text-green-500 h-5 w-5\"/></Button>\n           <ZaloIcon className=\"h-8 w-8 cursor-pointer\" />\n        </div>\n      </div>\n      \n      {/* Right side: Actions and Meta */}\n      <div className=\"w-1/4 flex flex-col items-end justify-between text-right py-1\">\n          <div className=\"flex items-center gap-2 text-muted-foreground\">\n              <span>{job.likes}</span>\n              <Heart className=\"w-5 h-5 text-red-500/80 hover:fill-current cursor-pointer\" />\n          </div>\n          <div className=\"space-y-2\">\n            {job.tags.slice(0, 2).map(tag => <Badge key={tag} className=\"ml-1\">{tag}</Badge>)}\n          </div>\n          <Button className=\"w-full bg-primary text-white mt-4\">Xem chi tiết <Briefcase/></Button>\n      </div>\n\n    </div>\n  );\n\n  // Mobile layout\n  const MobileLayout = () => (\n     <div className=\"md:hidden flex flex-row items-stretch w-full\">\n      <div className=\"relative w-1/3 flex-shrink-0 aspect-[4/3]\">\n        <Image src={job.image.src} alt={job.title} fill className=\"object-cover\" />\n         <div className=\"absolute top-1 left-1 bg-black/50 text-white text-[10px] font-bold px-1.5 py-0.5 rounded-full flex items-center gap-1\">\n          <div className={cn(\"w-1.5 h-1.5 rounded-full\", job.isRecording ? 'bg-red-500 animate-pulse' : 'bg-gray-400')}></div>\n          <span>{job.id}</span>\n        </div>\n        <div className=\"absolute bottom-1 right-1 flex items-center gap-2\">\n            <div className=\"bg-black/50 text-white text-xs px-2 py-1 rounded-full flex items-center gap-1\">\n                <span>{job.likes}</span>\n                <Heart className=\"w-4 h-4 text-red-500 fill-current\" />\n            </div>\n        </div>\n      </div>\n\n      <div className=\"w-2/3 p-3 flex-grow flex flex-col justify-between\">\n        <div>\n            <h3 className=\"font-bold text-sm mb-2 hover:text-primary cursor-pointer leading-tight\">{job.title}</h3>\n            <div className=\"flex flex-wrap gap-1 mb-2\">\n                {job.salary.actual && <Badge variant=\"secondary\" className=\"text-xs bg-green-100 text-green-800\">Thực lĩnh: {job.salary.actual}</Badge>}\n                <Badge variant=\"secondary\" className=\"text-xs\">Cơ bản: {job.salary.basic}</Badge>\n            </div>\n             <p className=\"flex items-center gap-1 text-xs text-muted-foreground mb-2\">\n                <MapPin className=\"h-3 w-3\" />\n                <span>Nagasaki</span>\n            </p>\n        </div>\n        \n        <div className=\"mt-auto space-y-2\">\n            <div className=\"flex items-center gap-2 text-xs\">\n              <Avatar className=\"w-6 h-6\">\n                <AvatarImage src={job.recruiter.avatar} alt={job.recruiter.name} />\n                <AvatarFallback>{job.recruiter.name.charAt(0)}</AvatarFallback>\n              </Avatar>\n              <div className=\"flex-grow\">\n                <p className=\"font-semibold text-blue-600 truncate\">{job.recruiter.name}</p>\n                <p className=\"text-muted-foreground truncate\">{job.recruiter.company}</p>\n              </div>\n            </div>\n\n            <div className=\"flex justify-between items-center border-t pt-2\">\n                <div className=\"flex items-center gap-1\">\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\"><Phone className=\"text-green-500 h-5 w-5\"/></Button>\n                    <ZaloIcon className=\"h-5 w-5 cursor-pointer\" />\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\"><User className=\"h-5 w-5\"/></Button>\n                </div>\n                <div>\n                     <DropdownMenu>\n                        <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"icon\" className=\"h-7 w-7\">\n                                <MoreHorizontal />\n                            </Button>\n                        </DropdownMenuTrigger>\n                        <DropdownMenuContent>\n                            <DropdownMenuItem><Briefcase className=\"mr-2 h-4 w-4\" /> Xem chi tiết</DropdownMenuItem>\n                        </DropdownMenuContent>\n                    </DropdownMenu>\n                </div>\n            </div>\n        </div>\n      </div>\n    </div>\n  );\n\n  return (\n    <Card className=\"rounded-lg overflow-hidden shadow-sm border border-border hover:shadow-lg transition-shadow duration-300\">\n        <MobileLayout />\n        <DesktopLayout />\n    </Card>\n  );\n};\n\n    ",
  "src/components/mobile-footer.tsx": "\n'use client';\n\nimport Link from 'next/link';\nimport { Home, Sparkles, User, LogOut, PlusCircle, Shield, FileText, MessageSquareWarning, LayoutGrid, X, Compass, BookOpen, LifeBuoy, Info, Handshake, ChevronDown } from 'lucide-react';\nimport { usePathname } from 'next/navigation';\nimport { cn } from '@/lib/utils';\nimport {\n  Sheet,\n  SheetContent,\n  SheetHeader,\n  SheetTitle,\n  SheetClose,\n  SheetTrigger,\n} from '@/components/ui/sheet';\nimport { useState } from 'react';\nimport { Button } from './ui/button';\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\nimport { DropdownMenuSeparator } from './ui/dropdown-menu';\nimport { VnFlagIcon, JpFlagIcon, EnFlagIcon } from './custom-icons';\n\n\nconst quickAccessLinks = [\n    { href: '/roadmap', label: 'Lộ trình', icon: Compass },\n    { href: '/learn', label: 'E-Learning', icon: BookOpen },\n    { href: '/handbook', label: 'Cẩm nang', icon: LifeBuoy },\n    { href: '/about', label: 'Giới thiệu', icon: Info },\n    { href: '/ai-profile', label: 'Tạo hồ sơ AI', icon: Sparkles },\n    { href: '/post-job', label: 'Đăng tuyển dụng', icon: PlusCircle },\n    { href: '/dashboard', label: 'Dữ liệu & Báo cáo', icon: FileText },\n    { href: '/franchise', label: 'Đối tác tại Nhật', icon: Handshake },\n    { href: '/consultant-profile', label: 'Tư vấn viên', icon: User },\n    { href: '#', label: 'Góp ý', icon: MessageSquareWarning },\n];\n\nconst Logo = () => (\n    <span className=\"text-2xl font-black font-headline\">\n      <span className=\"text-accent\">H</span>\n      <span className=\"text-accent-orange\">e</span>\n      <span className=\"text-primary\">l</span>\n      <span className=\"text-accent-orange\">l</span>\n      <span className=\"text-accent-green\">o</span>\n      <span className=\"text-primary\">Job</span>\n    </span>\n);\n\nexport function MobileFooter() {\n  const pathname = usePathname();\n  const [isOpen, setIsOpen] = useState(false);\n\n  const footerLinks = [\n    { href: '/', icon: Home, label: 'Trang chủ' },\n    { href: '/ai-profile', icon: Sparkles, label: 'Tạo hồ sơ AI' },\n    { href: '/candidate-profile', icon: User, label: 'Hồ sơ' },\n  ];\n  \n\n  return (\n    <footer className=\"md:hidden fixed bottom-0 left-0 right-0 bg-background border-t z-50\">\n      <div className=\"flex justify-around items-center h-16\">\n        {footerLinks.map(({ href, icon: Icon, label }) => {\n           const isActive = (pathname === href) || (pathname.startsWith(href) && href !== '/');\n           return (\n            <Link href={href} key={href} className=\"flex flex-col items-center justify-center text-xs text-muted-foreground hover:text-primary transition-colors w-1/4 pt-1\">\n              <Icon className={cn(\"h-6 w-6 mb-1\", isActive ? 'text-primary' : '')} />\n              <span className={cn( \"text-center leading-tight\", isActive ? 'text-primary font-bold' : '')}>{label}</span>\n            </Link>\n           )\n        })}\n        <Sheet open={isOpen} onOpenChange={setIsOpen}>\n          <SheetTrigger asChild>\n             <button className=\"flex flex-col items-center justify-center text-xs text-muted-foreground hover:text-primary transition-colors w-1/4 pt-1\">\n               <LayoutGrid className=\"h-6 w-6 mb-1\" />\n               <span className=\"text-center leading-tight\">Menu</span>\n             </button>\n          </SheetTrigger>\n          <SheetContent side=\"right\" className=\"w-full max-w-sm flex flex-col p-0\">\n            <SheetHeader className=\"p-4 border-b flex flex-row items-center justify-between\">\n               <SheetTitle asChild>\n                 <Link\n                    href=\"/\"\n                    className=\"flex items-center gap-2\"\n                    onClick={() => setIsOpen(false)}\n                  >\n                    <Logo />\n                  </Link>\n               </SheetTitle>\n            </SheetHeader>\n            <div className=\"flex flex-col h-full overflow-y-auto\">\n              <div className=\"p-4\">\n                 <div className=\"flex items-center gap-3 p-2 rounded-lg bg-secondary\">\n                    <Avatar className=\"h-12 w-12\">\n                      <AvatarImage src=\"https://placehold.co/100x100.png\" alt=\"User\" data-ai-hint=\"user avatar\" />\n                      <AvatarFallback>A</AvatarFallback>\n                    </Avatar>\n                    <div className=\"flex flex-col space-y-1\">\n                      <p className=\"text-base font-medium leading-none\">HelloJob</p>\n                      <p className=\"text-xs leading-none text-muted-foreground\">\n                        Cán bộ tuyển dụng\n                      </p>\n                    </div>\n                 </div>\n                 <Button asChild variant=\"outline\" className=\"mt-4 w-full\" onClick={() => setIsOpen(false)}>\n                    <Link href=\"/candidate-profile\">Hồ sơ của tôi</Link>\n                 </Button>\n              </div>\n              \n              <DropdownMenuSeparator />\n\n              <div className=\"p-2\">\n                 <div className=\"grid grid-cols-3 gap-2\">\n                    {quickAccessLinks.map((link) => (\n                       <Link \n                        key={link.href}\n                        href={link.href}\n                        onClick={() => setIsOpen(false)}\n                        className=\"flex flex-col items-center justify-start p-2 h-24 cursor-pointer rounded-md bg-secondary hover:bg-accent/80\">\n                         <div className=\"h-10 flex items-center justify-center text-primary\"><link.icon className=\"h-8 w-8\"/></div>\n                         <span className=\"text-xs text-center leading-tight font-medium\">{link.label}</span>\n                       </Link>\n                    ))}\n                </div>\n              </div>\n              \n              <div className=\"mt-auto p-4\">\n                  <DropdownMenuSeparator />\n                  <SheetClose asChild>\n                    <Button variant=\"ghost\" className=\"w-full justify-center mt-4\">\n                        <X className=\"mr-2 h-4 w-4\"/> Đóng\n                      </Button>\n                  </SheetClose>\n              </div>\n            </div>\n          </SheetContent>\n        </Sheet>\n      </div>\n    </footer>\n  );\n}\n",
  "src/components/register-form.tsx": "\n'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport { Progress } from '@/components/ui/progress';\nimport { ChevronLeft, ChevronRight, Eye } from 'lucide-react';\nimport { useToast } from '@/hooks/use-toast';\n\nconst TOTAL_STEPS = 4;\n\ntype FormData = {\n  name: string;\n  birthYear: string;\n  gender: string;\n  school: string;\n  educationLevel: string;\n  district: string;\n  interests: string[];\n  skills: string[];\n  languageLevel: string;\n  industry: string;\n  jobType: string;\n};\n\nexport function RegisterForm() {\n  const [step, setStep] = useState(1);\n  const router = useRouter();\n  const { toast } = useToast();\n  const [formData, setFormData] = useState<FormData>({\n    name: '',\n    birthYear: '',\n    gender: '',\n    school: '',\n    educationLevel: '',\n    district: '',\n    interests: [],\n    skills: [],\n    languageLevel: '',\n    industry: '',\n    jobType: '',\n  });\n\n  const handleNext = () => setStep((prev) => (prev < TOTAL_STEPS ? prev + 1 : prev));\n  const handleBack = () => setStep((prev) => (prev > 1 ? prev - 1 : prev));\n\n  const handleChange = (field: keyof FormData, value: string | string[]) => {\n    setFormData((prev) => ({ ...prev, [field]: value }));\n  };\n  \n  const handleCheckboxChange = (field: 'interests' | 'skills', value: string) => {\n    const currentValues = formData[field];\n    const newValues = currentValues.includes(value)\n      ? currentValues.filter((item) => item !== value)\n      : [...currentValues, value];\n    handleChange(field, newValues);\n  };\n  \n  const handleSubmit = () => {\n      toast({\n          title: \"Đăng ký thành công!\",\n          description: \"Hồ sơ của bạn đã được tạo. Chuyển hướng đến trang hồ sơ...\",\n          className: \"bg-green-500 text-white\"\n      });\n      // Simulate API call\n      setTimeout(() => {\n          router.push('/candidate-profile');\n      }, 1500);\n  }\n\n  const progressValue = (step / TOTAL_STEPS) * 100;\n\n  return (\n    <Card className=\"shadow-xl border-t-4 border-accent-orange\">\n      <CardHeader>\n        <Progress value={progressValue} className=\"mb-4 h-2 [&>div]:bg-accent-orange\" />\n        <CardTitle className=\"font-headline text-2xl\">Bước {step}/{TOTAL_STEPS}</CardTitle>\n        <CardDescription className=\"!mt-2\">\n          {step === 1 && 'Thông tin cá nhân cơ bản của bạn.'}\n          {step === 2 && 'Trình độ học vấn và nơi ở hiện tại.'}\n          {step === 3 && 'Lĩnh vực bạn quan tâm và các kỹ năng bạn có.'}\n          {step === 4 && 'Hãy kiểm tra lại thông tin và gửi hồ sơ!'}\n        </CardDescription>\n      </CardHeader>\n      <CardContent className=\"min-h-[300px]\">\n        {step === 1 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"name\">Họ và tên</Label>\n              <Input id=\"name\" placeholder=\"Nguyễn Văn A\" value={formData.name} onChange={(e) => handleChange('name', e.target.value)} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"birthYear\">Năm sinh</Label>\n              <Input id=\"birthYear\" type=\"number\" placeholder=\"1999\" value={formData.birthYear} onChange={(e) => handleChange('birthYear', e.target.value)} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"gender\">Giới tính</Label>\n              <Select onValueChange={(value) => handleChange('gender', value)} value={formData.gender}>\n                <SelectTrigger id=\"gender\">\n                  <SelectValue placeholder=\"Chọn giới tính\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Nam\">Nam</SelectItem>\n                  <SelectItem value=\"Nữ\">Nữ</SelectItem>\n                  <SelectItem value=\"Khác\">Khác</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        )}\n        {step === 2 && (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"school\">Trường học</Label>\n              <Input id=\"school\" placeholder=\"Đại học Bách Khoa\" value={formData.school} onChange={(e) => handleChange('school', e.target.value)} />\n            </div>\n            <div className=\"space-y-2\">\n              <Label htmlFor=\"educationLevel\">Trình độ</Label>\n              <Select onValueChange={(value) => handleChange('educationLevel', value)} value={formData.educationLevel}>\n                <SelectTrigger id=\"educationLevel\">\n                  <SelectValue placeholder=\"Chọn trình độ\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"THPT\">Tốt nghiệp THPT</SelectItem>\n                  <SelectItem value=\"Trung cấp\">Trung cấp</SelectItem>\n                  <SelectItem value=\"Cao đẳng\">Cao đẳng</SelectItem>\n                  <SelectItem value=\"Đại học\">Đại học</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n             <div className=\"space-y-2 md:col-span-2\">\n              <Label htmlFor=\"district\">Quận/Huyện đang ở</Label>\n              <Input id=\"district\" placeholder=\"Quận 1, TP.HCM\" value={formData.district} onChange={(e) => handleChange('district', e.target.value)} />\n            </div>\n          </div>\n        )}\n        {step === 3 && (\n          <div className=\"space-y-8\">\n            <div>\n              <Label className=\"font-bold text-lg\">Lĩnh vực quan tâm</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-3\">\n                {['Cơ khí', 'Điện tử', 'Dệt may', 'Chế biến thực phẩm', 'IT', 'Logistics'].map((interest) => (\n                  <div key={interest} className=\"flex items-center space-x-3 p-3 bg-secondary rounded-lg\">\n                    <Checkbox id={`interest-${interest}`} onCheckedChange={() => handleCheckboxChange('interests', interest)} checked={formData.interests.includes(interest)}/>\n                    <Label htmlFor={`interest-${interest}`} className=\"cursor-pointer\">{interest}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n            <div>\n              <Label className=\"font-bold text-lg\">Kỹ năng</Label>\n              <div className=\"grid grid-cols-2 md:grid-cols-3 gap-4 mt-3\">\n                {['Vận hành máy', 'Lắp ráp', 'Kiểm tra chất lượng', 'Sửa chữa', 'Lập trình', 'Ngoại ngữ'].map((skill) => (\n                  <div key={skill} className=\"flex items-center space-x-3 p-3 bg-secondary rounded-lg\">\n                    <Checkbox id={`skill-${skill}`} onCheckedChange={() => handleCheckboxChange('skills', skill)} checked={formData.skills.includes(skill)} />\n                    <Label htmlFor={`skill-${skill}`} className=\"cursor-pointer\">{skill}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n             <div className=\"space-y-2\">\n              <Label htmlFor=\"languageLevel\" className=\"font-bold text-lg\">Trình độ ngoại ngữ (Tiếng Anh/Nhật/Hàn)</Label>\n              <Select onValueChange={(value) => handleChange('languageLevel', value)} value={formData.languageLevel}>\n                <SelectTrigger id=\"languageLevel\" className=\"mt-2\">\n                  <SelectValue placeholder=\"Chọn trình độ\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"Cơ bản\">Cơ bản</SelectItem>\n                  <SelectItem value=\"Giao tiếp\">Giao tiếp tốt</SelectItem>\n                  <SelectItem value=\"Thành thạo\">Thành thạo</SelectItem>\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n        )}\n        {step === 4 && (\n          <div className=\"space-y-4 p-4 rounded-lg bg-secondary\">\n            <h3 className=\"font-bold font-headline text-xl text-primary\">Tổng hợp thông tin</h3>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-x-8 gap-y-4\">\n              <p><strong>Họ tên:</strong> {formData.name || 'Chưa điền'}</p>\n              <p><strong>Năm sinh:</strong> {formData.birthYear || 'Chưa điền'}</p>\n              <p><strong>Giới tính:</strong> {formData.gender || 'Chưa điền'}</p>\n              <p><strong>Trường:</strong> {formData.school || 'Chưa điền'}</p>\n              <p><strong>Trình độ:</strong> {formData.educationLevel || 'Chưa điền'}</p>\n              <p><strong>Ngoại ngữ:</strong> {formData.languageLevel || 'Chưa điền'}</p>\n              <p className=\"md:col-span-2\"><strong>Lĩnh vực quan tâm:</strong> {formData.interests.length > 0 ? formData.interests.join(', ') : 'Chưa chọn'}</p>\n              <p className=\"md:col-span-2\"><strong>Kỹ năng:</strong> {formData.skills.length > 0 ? formData.skills.join(', ') : 'Chưa chọn'}</p>\n            </div>\n          </div>\n        )}\n      </CardContent>\n      <CardFooter className=\"flex justify-between mt-6\">\n        {step > 1 ? (\n          <Button variant=\"outline\" onClick={handleBack}>\n            <ChevronLeft /> Quay lại\n          </Button>\n        ) : <div />}\n        {step < TOTAL_STEPS ? (\n          <Button onClick={handleNext} className=\"bg-accent-blue text-white hover:bg-accent-green/90\">\n            Tiếp theo <ChevronRight />\n          </Button>\n        ) : (\n          <Button className=\"bg-accent-green text-white hover:bg-accent-green/90\" onClick={handleSubmit}>\n            Hoàn tất & Xem hồ sơ <Eye />\n          </Button>\n        )}\n      </CardFooter>\n    </Card>\n  );\n}\n",
  "src/components/ui/accordion.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n",
  "src/components/ui/alert-dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n",
  "src/components/ui/alert.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n",
  "src/components/ui/avatar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n",
  "src/components/ui/badge.tsx": "import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n",
  "src/components/ui/button.tsx": "import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-all duration-300 focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 transform hover:scale-105 hover:shadow-lg [&>svg]:pointer-events-none [&>svg]:size-5 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground hover:scale-100 hover:shadow-none\",\n        link: \"text-primary underline-offset-4 hover:underline hover:scale-100 hover:shadow-none\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n",
  "src/components/ui/calendar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n",
  "src/components/ui/card.tsx": "\nimport * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-md\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h3\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n\n    ",
  "src/components/ui/carousel.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-4 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-4 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n",
  "src/components/ui/chart.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n",
  "src/components/ui/checkbox.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n",
  "src/components/ui/collapsible.tsx": "\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n",
  "src/components/ui/command.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\ninterface CommandDialogProps extends DialogProps {}\n\nconst CommandDialog = ({ children, ...props }: CommandDialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none aria-selected:bg-accent aria-selected:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n",
  "src/components/ui/dialog.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n",
  "src/components/ui/dropdown-menu.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n",
  "src/components/ui/form.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({ ...props }: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n",
  "src/components/ui/input.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-border bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n",
  "src/components/ui/label.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n",
  "src/components/ui/menubar.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n",
  "src/components/ui/popover.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n",
  "src/components/ui/progress.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n",
  "src/components/ui/radio-group.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n",
  "src/components/ui/scroll-area.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n",
  "src/components/ui/select.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:-translate-y-1\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n",
  "src/components/ui/separator.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n",
  "src/components/ui/sheet.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-transparent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-5 w-5\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n",
  "src/components/ui/skeleton.tsx": "import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n",
  "src/components/ui/slider.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n     {/* Also render a second thumb if there is a second value */}\n     {Array.isArray(props.value) && props.value.length > 1 && (\n        <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n      )}\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n\n    ",
  "src/components/ui/switch.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n",
  "src/components/ui/table.tsx": "import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n",
  "src/components/ui/tabs.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n",
  "src/components/ui/textarea.tsx": "import * as React from 'react';\n\nimport {cn} from '@/lib/utils';\n\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\n  ({className, ...props}, ref) => {\n    return (\n      <textarea\n        className={cn(\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    );\n  }\n);\nTextarea.displayName = 'Textarea';\n\nexport {Textarea};\n",
  "src/components/ui/toast.tsx": "\n\"use client\"\n\nimport * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      \"group-[.bg-accent-green]:text-white/70 group-[.bg-accent-green]:hover:text-white\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n",
  "src/components/ui/toaster.tsx": "\"use client\"\n\nimport { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n",
  "src/components/ui/tooltip.tsx": "\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n",
  "src/hooks/use-toast.ts": "\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n",
  "src/lib/disc-data.ts": "\nexport type DISCGroup = 'D' | 'I' | 'S' | 'C';\n\nexport type DISCWord = {\n  id: number;\n  word: string;\n  group: DISCGroup;\n};\n\nexport type DISCQuestion = {\n  id: number;\n  words: DISCWord[];\n};\n\nexport const discQuestions: DISCQuestion[] = [\n  { id: 1, words: [\n      { id: 1, word: 'Thích phiêu lưu, mạo hiểm', group: 'D' },\n      { id: 2, word: 'Hoạt bát, năng nổ', group: 'I' },\n      { id: 3, word: 'Dễ đoán, dễ lường', group: 'S' },\n      { id: 4, word: 'Thích nghi, hòa hợp', group: 'C' },\n  ]},\n  { id: 2, words: [\n      { id: 5, word: 'Sống động, náo nhiệt', group: 'I' },\n      { id: 6, word: 'Nhút nhát, e dè', group: 'S' },\n      { id: 7, word: 'Hài lòng, thỏa mãn', group: 'C' },\n      { id: 8, word: 'Mạnh mẽ, quyết liệt', group: 'D' },\n  ]},\n  { id: 3, words: [\n      { id: 9, word: 'Kiên định, không thay đổi', group: 'S' },\n      { id: 10, word: 'Vui vẻ, lạc quan', group: 'I' },\n      { id: 11, word: 'Hay đòi hỏi, yêu sách', group: 'D' },\n      { id: 12, word: 'Nhún nhường, phục tùng', group: 'C' },\n  ]},\n  { id: 4, words: [\n      { id: 13, word: 'Hay do dự, lưỡng lự', group: 'C' },\n      { id: 14, word: 'Can đảm, dũng cảm', group: 'D' },\n      { id: 15, word: 'Lôi cuốn, hấp dẫn', group: 'I' },\n      { id: 16, word: 'Điềm tĩnh, bình thản', group: 'S' },\n  ]},\n  { id: 5, words: [\n      { id: 17, word: 'Dễ thương, đáng mến', group: 'S' },\n      { id: 18, word: 'Thúc đẩy, khuyến khích', group: 'I' },\n      { id: 19, word: 'Quả quyết, chắc chắn', group: 'D' },\n      { id: 20, word: 'Kín đáo, dè dặt', group: 'C' },\n  ]},\n  { id: 6, words: [\n      { id: 21, word: 'Sẵn lòng, sẵn sàng', group: 'C' },\n      { id: 22, word: 'Nhiệt tình, hăng hái', group: 'I' },\n      { id: 23, word: 'Táo bạo, gan góc', group: 'D' },\n      { id: 24, word: 'Dịu dàng, ôn hòa', group: 'S' },\n  ]},\n  { id: 7, words: [\n      { id: 25, word: 'Trung thành, chung thủy', group: 'S' },\n      { id: 26, word: 'Thuyết phục, có sức ảnh hưởng', group: 'I' },\n      { id: 27, word: 'Cứng đầu, bướng bỉnh', group: 'D' },\n      { id: 28, word: 'Nhẹ nhàng, từ tốn', group: 'C' },\n  ]},\n  { id: 8, words: [\n      { id: 29, word: 'Hiếu động, thích kiểm soát', group: 'D' },\n      { id: 30, word: 'Cởi mở, dễ tiếp thu', group: 'C' },\n      { id: 31, word: 'Hay giúp đỡ, tốt bụng', group: 'S' },\n      { id: 32, word: 'Sôi nổi, hoạt náo', group: 'I' },\n  ]},\n  { id: 9, words: [\n      { id: 33, word: 'Tự tin, tràn đầy sức sống', group: 'I' },\n      { id: 34, word: 'Đồng cảm, thấu hiểu', group: 'S' },\n      { id: 35, word: 'Khoan dung, độ lượng', group: 'C' },\n      { id: 36, word: 'Quyết đoán, kiên quyết', group: 'D' },\n  ]},\n  { id: 10, words: [\n      { id: 37, word: 'Tự chủ, độc lập', group: 'D' },\n      { id: 38, word: 'Tinh tế, nhạy bén', group: 'C' },\n      { id: 39, word: 'Thích giao du, hòa đồng', group: 'I' },\n      { id: 40, word: 'Kiên nhẫn, bền bỉ', group: 'S' },\n  ]},\n  { id: 11, words: [\n      { id: 41, word: 'Tốt bụng, tử tế', group: 'S' },\n      { id: 42, word: 'Truyền cảm hứng', group: 'I' },\n      { id: 43, word: 'Thích cạnh tranh, ganh đua', group: 'D' },\n      { id: 44, word: 'Chu đáo, ân cần', group: 'C' },\n  ]},\n  { id: 12, words: [\n      { id: 45, word: 'Hay suy nghĩ, trầm tư', group: 'C' },\n      { id: 46, word: 'Ngoan cường, kiên trì', group: 'D' },\n      { id: 47, word: 'Lạc quan, yêu đời', group: 'I' },\n      { id: 48, word: 'Thích chiều chuộng, hay nhượng bộ', group: 'S' },\n  ]},\n  { id: 13, words: [\n      { id: 49, word: 'Thân thiện, cởi mở', group: 'I' },\n      { id: 50, word: 'Chính xác, đúng đắn', group: 'C' },\n      { id: 51, word: 'Thẳng thắn, bộc trực', group: 'D' },\n      { id: 52, word: 'Điềm đạm, không nóng vội', group: 'S' },\n  ]},\n  { id: 14, words: [\n      { id: 53, word: 'Dễ dãi, thoải mái', group: 'S' },\n      { id: 54, word: 'Hay nói, nói nhiều', group: 'I' },\n      { id: 55, word: 'Can đảm, không sợ hãi', group: 'D' },\n      { id: 56, word: 'Hòa nhã, lịch thiệp', group: 'C' },\n  ]},\n  { id: 15, words: [\n      { id: 57, word: 'Có kỷ luật, tuân thủ', group: 'C' },\n      { id: 58, word: 'Hào phóng, rộng lượng', group: 'I' },\n      { id: 59, word: 'Sống động, giàu năng lượng', group: 'D' },\n      { id: 60, word: 'Ổn định, vững vàng', group: 'S' },\n  ]},\n  { id: 16, words: [\n      { id: 61, word: 'Thích thuyết phục, tranh luận', group: 'D' },\n      { id: 62, word: 'Dễ chịu, thoải mái', group: 'S' },\n      { id: 63, word: 'Khiêm tốn, giản dị', group: 'C' },\n      { id: 64, word: 'Nguyên bản, độc đáo', group: 'I' },\n  ]},\n  { id: 17, words: [\n      { id: 65, word: 'Hay chỉ trích, phán xét', group: 'C' },\n      { id: 66, word: 'Bốc đồng, hấp tấp', group: 'I' },\n      { id: 67, word: 'Cứng rắn, nghiêm khắc', group: 'D' },\n      { id: 68, word: 'Không quyết đoán, do dự', group: 'S' },\n  ]},\n  { id: 18, words: [\n      { id: 69, word: 'Hay lo lắng, bất an', group: 'S' },\n      { id: 70, word: 'Lạnh lùng, xa cách', group: 'C' },\n      { id: 71, word: 'Dễ nổi nóng, cáu kỉnh', group: 'D' },\n      { id: 72, word: 'Vô kỷ luật, bừa bãi', group: 'I' },\n  ]},\n  { id: 19, words: [\n      { id: 73, word: 'Thờ ơ, lãnh đạm', group: 'S' },\n      { id: 74, word: 'Thiếu nhiệt tình, hờ hững', group: 'C' },\n      { id: 75, 'word': 'Không thân thiện, khó gần', group: 'D' },\n      { id: 76, word: 'Hay quên, đãng trí', group: 'I' },\n  ]},\n  { id: 20, words: [\n      { id: 77, word: 'Bộc trực, thẳng như ruột ngựa', group: 'D' },\n      { id: 78, word: 'Dễ bị kích động, náo động', group: 'I' },\n      { id: 79, word: 'Nhút nhát, rụt rè', group: 'S' },\n      { id: 80, word: 'Bi quan, tiêu cực', group: 'C' },\n  ]},\n  { id: 21, words: [\n      { id: 81, word: 'Thích tranh luận, cãi lý', group: 'D' },\n      { id: 82, word: 'Bừa bộn, không ngăn nắp', group: 'I' },\n      { id: 83, word: 'Hay nghi ngờ, đa nghi', group: 'C' },\n      { id: 84, word: 'Thụ động, lười biếng', group: 'S' },\n  ]},\n  { id: 22, words: [\n      { id: 85, word: 'Phụ thuộc, dựa dẫm', group: 'S' },\n      { id: 86, word: 'Ngây thơ, cả tin', group: 'I' },\n      { id: 87, word: 'Tiêu cực, hay phản đối', group: 'C' },\n      { id: 88, word: 'Thống trị, áp đặt', group: 'D' },\n  ]},\n  { id: 23, words: [\n      { id: 89, word: 'Vô tâm, không để ý', group: 'D' },\n      { id: 90, word: 'Không an toàn, bất ổn', group: 'S' },\n      { id: 91, word: 'Không được yêu thích', group: 'I' },\n      { id: 92, word: 'Khó đoán, thất thường', group: 'C' },\n  ]},\n  { id: 24, words: [\n      { id: 93, word: 'Thiếu kiên nhẫn, nóng vội', group: 'D' },\n      { id: 94, word: 'Hay thay đổi, không ổn định', group: 'I' },\n      { id: 95, word: 'Cầu toàn, quá kỹ tính', group: 'C' },\n      { id: 96, word: 'Dễ bị tổn thương, nhạy cảm', group: 'S' },\n  ]},\n  { id: 25, words: [\n      { id: 97, word: 'Tự phụ, kiêu ngạo', group: 'D' },\n      { id: 98, word: 'Dễ nản lòng, bỏ cuộc', group: 'S' },\n      { id: 99, word: 'Thích khoe khoang, khoác lác', group: 'I' },\n      { id: 100, word: 'Xa cách, khó gần', group: 'C' },\n  ]},\n  { id: 26, words: [\n      { id: 101, word: 'Hay oán giận, thù dai', group: 'C' },\n      { id: 102, word: 'Nghịch ngợm, phá phách', group: 'I' },\n      { id: 103, word: 'Nổi loạn, chống đối', group: 'D' },\n      { id: 104, word: 'Miễn cưỡng, không sẵn lòng', group: 'S' },\n  ]},\n  { id: 27, words: [\n      { id: 105, word: 'Độc đoán, gia trưởng', group: 'D' },\n      { id: 106, word: 'Hay phàn nàn, càu nhàu', group: 'I' },\n      { id: 107, word: 'Nhân nhượng, dễ dãi', group: 'S' },\n      { id: 108, word: 'Thỏa hiệp, nhượng bộ', group: 'C' },\n  ]},\n  { id: 28, words: [\n      { id: 109, word: 'Đầy tham vọng, cầu tiến', group: 'D' },\n      { id: 110, word: 'Dễ chịu, hòa đồng', group: 'I' },\n      { id: 111, word: 'Điềm tĩnh, ôn hòa', group: 'S' },\n      { id: 112, word: 'Cẩn thận, chu đáo', group: 'C' },\n  ]},\n];\n\nexport const discProfile = {\n  D: {\n    name: \"Dominance (Thống trị)\",\n    description: \"Người thuộc nhóm D có xu hướng mạnh mẽ, tự tin, quyết đoán và tập trung vào kết quả. Họ thích thử thách, kiểm soát và giải quyết vấn đề một cách nhanh chóng. Họ là những nhà lãnh đạo bẩm sinh, luôn hướng tới mục tiêu và không ngại đối đầu.\",\n    strengths: [\"Quyết đoán\", \"Tự tin\", \"Tập trung vào mục tiêu\", \"Thích cạnh tranh\", \"Chấp nhận rủi ro\"],\n    weaknesses: [\"Thiếu kiên nhẫn\", \"Có thể độc đoán\", \"Ít quan tâm đến chi tiết\", \"Khó lắng nghe người khác\"],\n    careers: [\"Giám đốc điều hành (CEO)\", \"Quản lý dự án\", \"Doanh nhân\", \"Luật sư\", \"Nhà môi giới chứng khoán\", \"Cảnh sát\"],\n    color: \"accent-red\"\n  },\n  I: {\n    name: \"Influence (Ảnh hưởng)\",\n    description: \"Người thuộc nhóm I rất nhiệt tình, lạc quan, hòa đồng và có khả năng thuyết phục người khác. Họ thích giao tiếp, xây dựng mối quan hệ và truyền cảm hứng. Họ là trung tâm của các hoạt động xã hội và luôn mang lại năng lượng tích cực.\",\n    strengths: [\"Nhiệt tình\", \"Lạc quan\", \"Giao tiếp tốt\", \"Sáng tạo\", \"Thích làm việc nhóm\"],\n    weaknesses: [\"Thiếu tổ chức\", \"Hay nói, ít lắng nghe\", \"Sợ bị từ chối\", \"Dễ bị phân tâm\"],\n    careers: [\"Chuyên viên Marketing/PR\", \"Nhân viên bán hàng\", \"Diễn viên/MC\", \"Nhà báo\", \"Tổ chức sự kiện\", \"Chuyên viên nhân sự\"],\n     color: \"accent-yellow\"\n  },\n  S: {\n    name: \"Steadiness (Kiên định)\",\n    description: \"Người thuộc nhóm S có tính cách điềm tĩnh, kiên nhẫn, đáng tin cậy và luôn sẵn sàng hỗ trợ người khác. Họ thích môi trường ổn định, hòa bình và làm việc có kế hoạch. Họ là những người bạn, người đồng nghiệp tuyệt vời, luôn lắng nghe và giúp đỡ.\",\n    strengths: [\"Kiên nhẫn\", \"Đáng tin cậy\", \"Biết lắng nghe\", \"Tận tâm\", \"Hòa giải tốt\"],\n    weaknesses: [\"Ngại thay đổi\", \"Tránh xung đột\", \"Khó đưa ra quyết định nhanh\", \"Có thể quá nhún nhường\"],\n    careers: [\"Chuyên viên tư vấn\", \"Giáo viên\", \"Y tá/Điều dưỡng\", \"Nhân viên chăm sóc khách hàng\", \"Thư ký\", \"Quản trị viên\"],\n    color: \"accent-green\"\n  },\n  C: {\n    name: \"Conscientiousness (Tuân thủ)\",\n    description: \"Người thuộc nhóm C rất cẩn thận, chính xác, có óc phân tích và tuân thủ quy tắc. Họ thích làm việc với dữ liệu, các hệ thống và tập trung vào chất lượng. Họ đảm bảo mọi việc được thực hiện một cách đúng đắn và logic.\",\n    strengths: [\"Cẩn thận\", \"Chính xác\", \"Có óc phân tích\", \"Có tổ chức\", \"Tuân thủ quy tắc\"],\n    weaknesses: [\"Cầu toàn\", \"Hay chỉ trích (bản thân và người khác)\", \"Khó thích nghi với sự thay đổi\", \"Có thể quá chậm chạp\"],\n    careers: [\"Kế toán/Kiểm toán\", \"Lập trình viên\", \"Nhà phân tích dữ liệu\", \"Nhà khoa học\", \"Kỹ sư chất lượng (QC)\", \"Kiến trúc sư\"],\n    color: \"accent-blue\"\n  }\n};\n",
  "src/lib/handbook-data.ts": "\n\nexport type HandbookArticle = {\n  slug: string;\n  type: 'article' | 'video' | 'post'; // Phân loại nội dung\n  title: string;\n  category: string;\n  author: string;\n  readTime: string;\n  image: string;\n  dataAiHint: string;\n  excerpt: string;\n  videoUrl?: string; // URL cho video\n  content?: {\n    slug: string;\n    title: string;\n    body: string;\n  }[];\n};\n\nexport const articles: HandbookArticle[] = [\n  {\n    slug: 'tokutei-ginou-la-gi',\n    type: 'article',\n    title: 'Kỹ năng đặc định (Tokutei Ginou) là gì? Toàn bộ thông tin cần biết 2024',\n    category: 'Kỹ năng đặc định',\n    author: 'HelloJob Team',\n    readTime: '8 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'tokyo city japan',\n    excerpt: 'Tokutei Ginou là một loại visa lao động mới của Nhật Bản, mở ra cơ hội lớn cho người lao động Việt Nam. Hãy cùng tìm hiểu chi tiết về điều kiện, quyền lợi và các ngành nghề tuyển dụng.',\n    content: [\n      {\n        slug: 'gioi-thieu',\n        title: 'Giới thiệu về visa Kỹ năng đặc định',\n        body: `\n          <p>Visa Kỹ năng đặc định (特定技能 - Tokutei Ginou) là một loại tư cách lưu trú mới dành cho lao động người nước ngoài tại Nhật Bản, được chính phủ Nhật Bản triển khai từ tháng 4 năm 2019. Mục đích chính của chương trình này là để giải quyết tình trạng thiếu hụt lao động trầm trọng trong một số ngành công nghiệp cụ thể của Nhật Bản.</p>\n          <p>Chương trình này được chia thành 2 loại chính:</p>\n          <ul>\n            <li><strong>Kỹ năng đặc định loại 1 (Tokutei Ginou 1):</strong> Dành cho lao động có trình độ kỹ năng và kiến thức chuyên môn nhất định, có thể làm việc ngay mà không cần qua đào tạo nhiều. Thời gian lưu trú tối đa là 5 năm và không được bảo lãnh gia đình.</li>\n            <li><strong>Kỹ năng đặc định loại 2 (Tokutei Ginou 2):</strong> Dành cho lao động có kỹ năng tay nghề cao, chuyên nghiệp. Sau khi hoàn thành chương trình loại 1, lao động có thể thi chuyển lên loại 2 để được ở lại Nhật Bản lâu dài, có cơ hội xin vĩnh trú và bảo lãnh người thân sang sinh sống.</li>\n          </ul>\n        `\n      },\n      {\n        slug: 'dieu-kien-tham-gia',\n        title: 'Điều kiện tham gia chương trình',\n        body: `\n          <p>Để tham gia chương trình Kỹ năng đặc định, người lao động cần đáp ứng các điều kiện cơ bản sau:</p>\n          <ol>\n            <li><strong>Độ tuổi:</strong> Đủ 18 tuổi trở lên.</li>\n            <li><strong>Kỳ thi năng lực tiếng Nhật:</strong> Đạt chứng chỉ năng lực tiếng Nhật JLPT cấp độ N4 trở lên hoặc các kỳ thi tương đương như JFT-Basic.</li>\n            <li><strong>Kỳ thi kỹ năng tay nghề:</strong> Vượt qua kỳ thi đánh giá kỹ năng chuyên môn (技能測定試験) cho ngành nghề mà mình đăng ký. Kỳ thi này được tổ chức tại Nhật Bản và một số quốc gia khác, bao gồm cả Việt Nam.</li>\n            <li><strong>Sức khỏe:</strong> Đảm bảo đủ điều kiện sức khỏe để làm việc tại Nhật Bản, không mắc các bệnh truyền nhiễm theo quy định.</li>\n          </ol>\n          <p>Đối với các bạn Thực tập sinh kỹ năng đã hoàn thành chương trình 3 năm hoặc 5 năm, có thể được miễn một số kỳ thi khi chuyển đổi sang visa Tokutei Ginou nếu ngành nghề tương đồng.</p>\n        `\n      },\n      {\n        slug: 'quyen-loi',\n        title: 'Quyền lợi của người lao động',\n        body: `\n          <p>Tham gia chương trình Kỹ năng đặc định mang lại nhiều quyền lợi hấp dẫn cho người lao động:</p>\n          <ul>\n            <li><strong>Mức lương:</strong> Mức lương của lao động Tokutei Ginou được quy định tương đương hoặc cao hơn so với người Nhật cùng vị trí, đảm bảo thu nhập ổn định và xứng đáng.</li>\n            <li><strong>Chế độ đãi ngộ:</strong> Hưởng đầy đủ các chế độ bảo hiểm xã hội, bảo hiểm y tế, bảo hiểm thất nghiệp như người Nhật.</li>\n            <li><strong>Cơ hội chuyển việc:</strong> Người lao động được phép chuyển việc trong cùng một ngành nghề nếu có lý do chính đáng và được công ty mới chấp nhận.</li>\n            <li><strong>Phát triển dài hạn:</strong> Có cơ hội phát triển sự nghiệp lâu dài tại Nhật, đặc biệt khi chuyển lên được visa loại 2.</li>\n          </ul>\n        `\n      },\n    ],\n  },\n  {\n    slug: 'meo-phong-van-video',\n    type: 'video',\n    title: '3 Mẹo phỏng vấn ONLINE qua video với nhà tuyển dụng Nhật',\n    category: 'Kinh nghiệm phỏng vấn',\n    author: 'Dung Mochi',\n    readTime: '1 phút',\n    image: 'https://placehold.co/400x600.png',\n    dataAiHint: 'online job interview',\n    excerpt: 'Tác phong, ánh sáng và cách trả lời là 3 yếu tố quyết định sự thành công của buổi phỏng vấn online. Xem ngay video để không bỏ lỡ cơ hội!',\n    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n  },\n   {\n    slug: 'kinh-nghiem-phong-van-tokutei',\n    type: 'article',\n    title: '5 Kinh nghiệm phỏng vấn Tokutei Ginou chắc chắn đậu',\n    category: 'Kinh nghiệm phỏng vấn',\n    author: 'HelloJob Team',\n    readTime: '7 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'job interview japan',\n    excerpt: 'Buổi phỏng vấn là bước quyết định để bạn có được công việc mơ ước tại Nhật. Hãy chuẩn bị thật kỹ với 5 kinh nghiệm quý báu được đúc kết từ các chuyên gia.',\n    content: [\n      {\n        slug: 'chuan-bi-ky-luong',\n        title: 'Chuẩn bị kỹ lưỡng trước phỏng vấn',\n        body: '<p>Tìm hiểu kỹ về công ty, ngành nghề ứng tuyển. Chuẩn bị câu trả lời cho các câu hỏi thường gặp và luyện tập giới thiệu bản thân (Jikoshoukai) thật trôi chảy.</p>'\n      },\n      {\n        slug: 'tac-phong-chuyen-nghiep',\n        title: 'Tác phong chuyên nghiệp',\n        body: '<p>Trang phục lịch sự, thái độ khiêm tốn, lễ phép và luôn đúng giờ là những yếu tố cực kỳ quan trọng trong văn hóa Nhật Bản.</p>'\n      },\n    ],\n  },\n  {\n    slug: 'chi-phi-sinh-hoat-o-nhat',\n    type: 'article',\n    title: 'Chi phí sinh hoạt ở Nhật Bản hết bao nhiêu một tháng?',\n    category: 'Cuộc sống ở Nhật',\n    author: 'Mai Linh',\n    readTime: '6 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'japanese food market',\n    excerpt: 'Lập kế hoạch tài chính là bước quan trọng trước khi đến Nhật. Bài viết này sẽ phân tích chi tiết các khoản chi phí sinh hoạt hàng tháng bạn cần chuẩn bị.',\n    content: [\n      {\n        slug: 'cac-khoan-chi-phi-chinh',\n        title: 'Các khoản chi phí chính',\n        body: '<p>Chi phí sinh hoạt hàng tháng tại Nhật Bản có thể dao động tùy thuộc vào thành phố bạn sống và phong cách chi tiêu của bạn. Tuy nhiên, các khoản chính bao gồm:</p><ul><li>Tiền thuê nhà</li><li>Tiền ăn uống</li><li>Tiền đi lại</li><li>Tiền điện, nước, gas, internet</li><li>Thuế và bảo hiểm</li><li>Chi phí cá nhân khác</li></ul>'\n      },\n      {\n        slug: 'chi-phi-trung-binh',\n        title: 'Chi phí trung bình tại các thành phố lớn',\n        body: '<p>Tại các thành phố lớn như Tokyo, Osaka, chi phí thuê nhà và sinh hoạt sẽ cao hơn đáng kể so với các vùng nông thôn. Một người độc thân sống ở Tokyo có thể tốn khoảng 120,000 - 150,000 yên/tháng. Trong khi đó ở các tỉnh lẻ, con số này có thể chỉ khoảng 80,000 - 100,000 yên.</p>'\n      },\n    ],\n  },\n   {\n    slug: 'cach-chuyen-tien-nhat-viet',\n    type: 'video',\n    title: 'Hướng dẫn chuyển tiền từ Nhật về Việt Nam an toàn, phí thấp',\n    category: 'Cuộc sống ở Nhật',\n    author: 'HelloJob Team',\n    readTime: '2 phút',\n    image: 'https://placehold.co/400x600.png',\n    dataAiHint: 'money transfer app',\n    excerpt: 'Tổng hợp các cách chuyển tiền phổ biến và uy tín nhất dành cho người lao động tại Nhật Bản.',\n    videoUrl: 'https://www.youtube.com/embed/dQw4w9WgXcQ',\n  },\n  {\n    slug: 'van-hoa-lam-viec-nhat-ban',\n    type: 'post',\n    title: 'Văn hóa làm việc tại công ty Nhật: Hou-Ren-Sou và những điều cần biết',\n    category: 'Cuộc sống ở Nhật',\n    author: 'Akira Lê',\n    readTime: '5 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'japanese office meeting',\n    excerpt: 'Hiểu rõ về Hourensou (Báo cáo - Liên lạc - Thảo luận) và các quy tắc ngầm trong văn hóa công sở sẽ giúp bạn hòa nhập nhanh chóng và làm việc hiệu quả hơn tại Nhật.',\n  },\n  {\n    slug: 'meo-viet-jikoshoukai',\n    type: 'post',\n    title: 'Mẹo viết và trình bày Jikoshoukai (tự giới thiệu bản thân) ấn tượng',\n    category: 'Kinh nghiệm phỏng vấn',\n    author: 'Dung Mochi',\n    readTime: '6 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'person writing resume',\n    excerpt: 'Jikoshoukai là phần không thể thiếu trong bất kỳ buổi phỏng vấn nào tại Nhật. Cùng học cách xây dựng một bài giới thiệu bản thân ngắn gọn, súc tích và ghi điểm với nhà tuyển dụng.',\n  },\n  {\n    slug: 'luu-y-khi-tim-viec-tokutei',\n    type: 'post',\n    title: '5 Lưu ý vàng khi tự tìm việc Tokutei Ginou tại Nhật',\n    category: 'Kinh nghiệm phỏng vấn',\n    author: 'HelloJob Team',\n    readTime: '4 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'person searching job online',\n    excerpt: 'Tránh những sai lầm phổ biến và tăng cơ hội thành công của bạn với những lời khuyên hữu ích này khi tự mình tìm kiếm cơ hội việc làm Kỹ năng đặc định.',\n  },\n  {\n    slug: 'cac-app-ho-tro-cuoc-song-nhat',\n    type: 'post',\n    title: 'Top 5 ứng dụng không thể thiếu cho cuộc sống ở Nhật',\n    category: 'Cuộc sống ở Nhật',\n    author: 'Mai Linh',\n    readTime: '3 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'smartphone apps japan',\n    excerpt: 'Từ ứng dụng tàu điện đến từ điển và khuyến mãi, đây là những công cụ sẽ giúp cuộc sống của bạn tại Nhật Bản trở nên dễ dàng và tiết kiệm hơn rất nhiều.',\n  },\n  {\n    slug: 'so-sanh-tts-vs-tokutei',\n    type: 'article',\n    title: 'So sánh Thực tập sinh và Kỹ năng đặc định: Nên chọn chương trình nào?',\n    category: 'Thủ tục & Visa',\n    author: 'HelloJob Team',\n    readTime: '9 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'crossroads sign japan',\n    excerpt: 'Thực tập sinh (TTS) và Kỹ năng đặc định (Tokutei Ginou) là hai con đường phổ biến để sang Nhật làm việc. Bài viết này sẽ phân tích ưu, nhược điểm của từng loại visa để bạn có lựa chọn phù hợp nhất.',\n    content: [\n      {\n        slug: 'muc-dich',\n        title: 'Về mục đích chương trình',\n        body: '<p>Chương trình TTS tập trung vào việc \"đào tạo kỹ năng\", chuyển giao công nghệ. Trong khi đó, Tokutei Ginou có mục đích chính là \"bù đắp thiếu hụt lao động\" cho Nhật Bản.</p>'\n      },\n    ],\n  },\n  {\n    slug: 'xin-visa-vinh-tru',\n    type: 'article',\n    title: 'Điều kiện xin visa vĩnh trú tại Nhật Bản năm 2024',\n    category: 'Thủ tục & Visa',\n    author: 'HelloJob Team',\n    readTime: '10 phút',\n    image: 'https://placehold.co/1200x600.png',\n    dataAiHint: 'permanent resident card japan',\n    excerpt: 'Visa vĩnh trú là mục tiêu của nhiều người nước ngoài muốn sinh sống và làm việc lâu dài tại Nhật. Bài viết sẽ cập nhật những điều kiện mới nhất bạn cần đáp ứng.',\n    content: [\n      {\n        slug: 'thoi-gian-luu-tru',\n        title: 'Yêu cầu về thời gian lưu trú',\n        body: '<p>Theo nguyên tắc, bạn cần phải sinh sống liên tục tại Nhật Bản ít nhất 10 năm. Tuy nhiên, có một số trường hợp được xét duyệt ưu tiên với thời gian ngắn hơn, ví dụ như người có đóng góp lớn cho Nhật Bản hoặc vợ/chồng của người Nhật.',\n      },\n    ],\n  },\n];\n",
  "src/lib/holland-data.ts": "\nexport type HollandQuestion = {\n  id: number;\n  text: string;\n};\n\nexport type HollandGroup = {\n  code: 'R' | 'I' | 'A' | 'S' | 'E' | 'C';\n  name: string;\n  description: string;\n  questions: HollandQuestion[];\n};\n\n// =================================================================\n// BỘ CÂU HỎI CHO HỌC SINH THCS (12-15 TUỔI)\n// =================================================================\nexport const hollandDataThcs: HollandGroup[] = [\n  {\n    code: 'R',\n    name: 'Realistic - Nhóm Kỹ thuật',\n    description: 'Em có thích làm việc với tay chân, máy móc, và các hoạt động thể chất không?',\n    questions: [\n        { id: 1, text: 'Tháo lắp, sửa chữa đồ chơi hoặc các vật dụng đơn giản trong nhà.' },\n        { id: 2, text: 'Lắp ráp mô hình (robot, máy bay, tàu thủy).' },\n        { id: 3, text: 'Chơi các môn thể thao vận động (đá bóng, bơi lội, chạy bộ).' },\n        { id: 4, text: 'Làm các thí nghiệm vật lý, hóa học đơn giản.' },\n        { id: 5, text: 'Trồng cây, chăm sóc vườn.' },\n        { id: 6, text: 'Sử dụng các dụng cụ như búa, kìm, tua-vít.' },\n        { id: 7, text: 'Chơi các trò chơi điện tử về xây dựng, chiến thuật.' },\n        { id: 8, text: 'Tìm hiểu cách hoạt động của xe đạp, xe máy.' },\n        { id: 9, text: 'Đi cắm trại, dã ngoại, khám phá thiên nhiên.' },\n        { id: 10, text: 'Làm các công việc thủ công, tạo ra sản phẩm cụ thể.' },\n        { id: 11, text: 'Học môn Công nghệ, Kỹ thuật ở trường.' },\n        { id: 12, text: 'Thích các nghề như thợ sửa chữa, kỹ sư, nông dân.' },\n        { id: 13, text: 'Chơi các môn thể thao đối kháng.' },\n        { id: 14, text: 'Tự tay làm một món đồ trang trí cho phòng của mình.' },\n    ],\n  },\n  {\n    code: 'I',\n    name: 'Investigative - Nhóm Nghiên cứu',\n    description: 'Em có thích quan sát, tìm tòi, khám phá và giải quyết các câu hỏi khó không?',\n    questions: [\n        { id: 1, text: 'Đọc sách, xem phim tài liệu về khoa học, lịch sử, vũ trụ.' },\n        { id: 2, text: 'Giải các bài toán khó, các câu đố logic.' },\n        { id: 3, text: 'Tìm hiểu về máy tính, cách viết các dòng lệnh đơn giản.' },\n        { id: 4, text: 'Quan sát các loài động vật, thực vật và tìm hiểu về chúng.' },\n        { id: 5, text: 'Thích các môn học như Toán, Lý, Hóa, Sinh.' },\n        { id: 6, text: 'Thích tự tìm câu trả lời cho những câu hỏi \"Tại sao?\".' },\n        { id: 7, text: 'Chơi các trò chơi đòi hỏi suy luận, điều tra (cờ vua, board game).' },\n        { id: 8, text: 'Tìm hiểu về cơ thể người, các loại bệnh tật.' },\n        { id: 9, text: 'Sưu tầm và phân loại một thứ gì đó (tem, côn trùng, lá cây).' },\n        { id: 10, text: 'Thích làm việc một mình và tập trung suy nghĩ.' },\n        { id: 11, text: 'Tò mò về cách các phát minh ra đời.' },\n        { id: 12, text: 'Thích các nghề như nhà khoa học, bác sĩ, lập trình viên.' },\n        { id: 13, text: 'Phân tích một vấn đề ra thành nhiều phần nhỏ để hiểu rõ hơn.' },\n        { id: 14, text: 'So sánh ưu nhược điểm của các sự vật, hiện tượng.' },\n    ],\n  },\n  {\n    code: 'A',\n    name: 'Artistic - Nhóm Nghệ thuật',\n    description: 'Em có thích sự sáng tạo, tưởng tượng và thể hiện bản thân qua các hình thức nghệ thuật không?',\n    questions: [\n        { id: 1, text: 'Vẽ tranh, tô màu, trang trí.' },\n        { id: 2, text: 'Hát, chơi một loại nhạc cụ.' },\n        { id: 3, text: 'Viết truyện, làm thơ.' },\n        { id: 4, text: 'Chụp ảnh, quay video và chỉnh sửa.' },\n        { id: 5, text: 'Tự nghĩ ra các điệu nhảy, múa.' },\n        { id: 6, text: 'Tham gia các vở kịch, diễn xuất ở trường.' },\n        { id: 7, text: 'Thiết kế quần áo, trang phục cho búp bê hoặc nhân vật game.' },\n        { id: 8, text: 'Thích môn Âm nhạc, Mỹ thuật.' },\n        { id: 9, text: 'Trang trí phòng ốc, góc học tập của mình.' },\n        { id: 10, text: 'Làm các đồ thủ công (handmade) để tặng bạn bè.' },\n        { id: 11, text: 'Thích những ý tưởng mới lạ, độc đáo, không giống ai.' },\n        { id: 12, text: 'Thích các nghề như họa sĩ, ca sĩ, nhà văn, diễn viên.' },\n        { id: 13, text: 'Tưởng tượng ra những câu chuyện, thế giới không có thật.' },\n        { id: 14, text: 'Bày tỏ cảm xúc của mình một cách tự do (qua tranh vẽ, bài hát...).' },\n    ],\n  },\n  {\n    code: 'S',\n    name: 'Social - Nhóm Xã hội',\n    description: 'Em có thích làm việc, trò chuyện và giúp đỡ người khác không?',\n    questions: [\n        { id: 1, text: 'Kèm bạn học, giải thích bài cho bạn bè.' },\n        { id: 2, text: 'Tham gia các hoạt động tình nguyện, công tác xã hội của trường, lớp.' },\n        { id: 3, text: 'Lắng nghe tâm sự và cho bạn bè lời khuyên.' },\n        { id: 4, text: 'Chăm sóc em nhỏ hoặc người thân bị ốm.' },\n        { id: 5, text: 'Thích làm việc nhóm hơn làm việc một mình.' },\n        { id: 6, text: 'Làm quen, nói chuyện với các bạn mới.' },\n        { id: 7, text: 'Tổ chức các hoạt động, trò chơi cho lớp, nhóm.' },\n        { id: 8, text: 'Làm lớp trưởng, lớp phó hoặc các cán bộ lớp.' },\n        { id: 9, text: 'Hòa giải khi bạn bè có mâu thuẫn, cãi nhau.' },\n        { id: 10, text: 'Chia sẻ đồ dùng, đồ ăn của mình cho người khác.' },\n        { id: 11, text: 'Thích các môn học như Giáo dục công dân, Ngữ văn.' },\n        { id: 12, text: 'Thích các nghề như giáo viên, tư vấn tâm lý, nhân viên công tác xã hội.' },\n        { id: 13, text: 'Phát biểu ý kiến trong các buổi sinh hoạt lớp.' },\n        { id: 14, text: 'Quan tâm đến các vấn đề trong xã hội.' },\n    ],\n  },\n  {\n    code: 'E',\n    name: 'Enterprising - Nhóm Quản lý',\n    description: 'Em có thích lãnh đạo, thuyết phục người khác và đặt ra các mục tiêu để thực hiện không?',\n    questions: [\n        { id: 1, text: 'Làm trưởng nhóm trong các bài tập, dự án của lớp.' },\n        { id: 2, text: 'Thuyết phục bố mẹ, bạn bè đồng ý với ý kiến của mình.' },\n        { id: 3, text: 'Nảy ra ý tưởng kinh doanh nhỏ (bán đồ ăn vặt, đồ handmade).' },\n        { id: 4, text: 'Phát biểu, trình bày ý kiến trước lớp.' },\n        { id: 5, text: 'Thích tham gia các cuộc thi, tranh luận.' },\n        { id: 6, text: 'Tổ chức một buổi đi chơi, một sự kiện cho nhóm bạn.' },\n        { id: 7, text: 'Đặt mục tiêu cho bản thân (ví dụ: đạt điểm cao, học một kỹ năng mới) và cố gắng hoàn thành.' },\n        { id: 8, text: 'Thích làm những việc có tầm ảnh hưởng đến người khác.' },\n        { id: 9, text: 'Thích các trò chơi có tính cạnh tranh, thi đấu.' },\n        { id: 10, text: 'Thích được khen ngợi và công nhận.' },\n        { id: 11, text: 'Dám thử những điều mới và chấp nhận rủi ro.' },\n        { id: 12, text: 'Thích các nghề như giám đốc, quản lý, luật sư, nhà kinh doanh.' },\n        { id: 13, text: 'Thương lượng để có được thứ mình muốn.' },\n        { id: 14, text: 'Dẫn dắt một đội, nhóm để giành chiến thắng.' },\n    ],\n  },\n  {\n    code: 'C',\n    name: 'Conventional - Nhóm Nghiệp vụ',\n    description: 'Em có thích làm việc với các con số, giấy tờ, và làm theo các quy tắc, hướng dẫn có sẵn không?',\n    questions: [\n        { id: 1, text: 'Sắp xếp sách vở, góc học tập của mình gọn gàng, ngăn nắp.' },\n        { id: 2, text: 'Lập thời gian biểu và thực hiện theo đúng kế hoạch.' },\n        { id: 3, text: 'Ghi chép bài cẩn thận, sạch sẽ, rõ ràng.' },\n        { id: 4, text: 'Làm thủ quỹ cho lớp, quản lý tiền bạc.' },\n        { id: 5, text: 'Thích các công việc đòi hỏi sự chính xác, tỉ mỉ.' },\n        { id: 6, text: 'Làm việc với bảng biểu, số liệu.' },\n        { id: 7, text: 'Tuân thủ nội quy của trường lớp.' },\n        { id: 8, text: 'Kiểm tra lại bài vở kỹ càng để không có sai sót.' },\n        { id: 9, text: 'Nhập dữ liệu vào máy tính (gõ văn bản, làm slide).' },\n        { id: 10, text: 'Thích các môn học có câu trả lời rõ ràng, đúng hoặc sai.' },\n        { id: 11, text: 'Thích làm theo các hướng dẫn có sẵn hơn là tự sáng tạo.' },\n        { id: 12, text: 'Thích các nghề như kế toán, thư ký, thủ thư, nhân viên ngân hàng.' },\n        { id: 13, text: 'Lưu giữ cẩn thận các giấy tờ, tài liệu quan trọng.' },\n        { id: 14, text: 'Làm các công việc lặp đi lặp lại một cách chính xác.' },\n    ],\n  },\n];\n\n\n// =================================================================\n// BỘ CÂU HỎI CHO HỌC SINH PTTH & SINH VIÊN (16-22 TUỔI)\n// =================================================================\nexport const hollandDataPtthSv: HollandGroup[] = [\n  {\n    code: 'R',\n    name: 'Realistic - Nhóm Kỹ thuật',\n    description: 'Bạn có thiên hướng làm việc với các hệ thống, công cụ, máy móc và các hoạt động đòi hỏi sự khéo léo chân tay không?',\n    questions: [\n        { id: 1, text: 'Sửa chữa, nâng cấp các thiết bị điện tử (máy tính, điện thoại).' },\n        { id: 2, text: 'Tham gia các câu lạc bộ chế tạo robot, xe mô hình.' },\n        { id: 3, text: 'Làm việc trong các xưởng thực hành (cơ khí, mộc).' },\n        { id: 4, text: 'Theo học các ngành kỹ thuật (Cơ khí, Điện, Xây dựng, Tự động hóa).' },\n        { id: 5, text: 'Chơi các môn thể thao đòi hỏi kỹ thuật và sức bền.' },\n        { id: 6, text: 'Đọc và hiểu các bản vẽ kỹ thuật, sơ đồ mạch điện.' },\n        { id: 7, text: 'Tìm hiểu về nông nghiệp công nghệ cao, các hệ thống tưới tiêu tự động.' },\n        { id: 8, text: 'Làm các công việc bán thời gian liên quan đến thể chất (bốc xếp, phục vụ).' },\n        { id: 9, text: 'Tự tay cải tạo, trang trí lại không gian sống của mình.' },\n        { id: 10, text: 'Thích tìm hiểu về cơ chế hoạt động của các loại động cơ, vũ khí.' },\n        { id: 11, text: 'Lái xe (xe máy, ô tô).' },\n        { id: 12, text: 'Ưu tiên các giải pháp thực tế, hiệu quả hơn là các ý tưởng lý thuyết.' },\n        { id: 13, text: 'Thích các công việc ngoài trời hơn là ngồi trong văn phòng.' },\n        { id: 14, text: 'Quan tâm đến các ngành nghề như kiến trúc sư, kỹ sư, phi công, nông dân hiện đại.' },\n    ],\n  },\n  {\n    code: 'I',\n    name: 'Investigative - Nhóm Nghiên cứu',\n    description: 'Bạn có thích tìm tòi, phân tích, giải quyết các vấn đề phức tạp và làm việc với các ý tưởng, lý thuyết không?',\n    questions: [\n        { id: 1, text: 'Thực hiện các đề tài, dự án nghiên cứu khoa học ở trường.' },\n        { id: 2, text: 'Đọc các sách, bài báo chuyên ngành (khoa học, kinh tế, xã hội).' },\n        { id: 3, text: 'Lập trình, viết code, phát triển thuật toán.' },\n        { id: 4, text: 'Phân tích số liệu, làm thống kê để tìm ra các quy luật.' },\n        { id: 5, text: 'Theo học các ngành khoa học cơ bản (Toán, Lý, Hóa, Sinh).' },\n        { id: 6, text: 'Tham gia các cuộc thi học thuật, Olympic.' },\n        { id: 7, text: 'Tìm hiểu sâu về một lĩnh vực mình quan tâm (kinh tế vĩ mô, vật lý lượng tử).' },\n        { id: 8, text: 'Thích tự học, tự tìm tòi kiến thức mới trên Internet.' },\n        { id: 9, text: 'Viết luận, phân tích các tác phẩm văn học, sự kiện lịch sử.' },\n        { id: 10, text: 'Làm việc trong phòng thí nghiệm.' },\n        { id: 11, text: 'Thích tranh luận dựa trên logic và bằng chứng.' },\n        { id: 12, text: 'Quan tâm đến các ngành nghề như nhà khoa học, lập trình viên, nhà phân tích dữ liệu, bác sĩ.' },\n        { id: 13, text: 'Hoài nghi và kiểm chứng lại thông tin trước khi tin.' },\n        { id: 14, text: 'Xây dựng các mô hình lý thuyết để giải thích các hiện tượng.' },\n    ],\n  },\n  {\n    code: 'A',\n    name: 'Artistic - Nhóm Nghệ thuật',\n    description: 'Bạn có thích thể hiện bản thân một cách sáng tạo, độc đáo và làm việc trong môi trường linh hoạt, không theo khuôn mẫu không?',\n    questions: [\n        { id: 1, text: 'Sáng tác (văn, thơ, nhạc, kịch bản).' },\n        { id: 2, text: 'Chơi thành thạo một nhạc cụ hoặc ca hát.' },\n        { id: 3, text: 'Thiết kế đồ họa, website, giao diện ứng dụng.' },\n        { id: 4, text: 'Nhiếp ảnh, quay phim, dựng phim.' },\n        { id: 5, text: 'Tham gia các câu lạc bộ kịch, nhảy, âm nhạc.' },\n        { id: 6, text: 'Vẽ (tranh sơn dầu, màu nước, digital painting).' },\n        { id: 7, text: 'Thiết kế thời trang, phối đồ (mix & match).' },\n        { id: 8, text: 'Viết blog, làm YouTuber, sáng tạo nội dung trên mạng xã hội.' },\n        { id: 9, text: 'Theo học các ngành về thiết kế, mỹ thuật, sân khấu điện ảnh, báo chí.' },\n        { id: 10, text: 'Thích sự khác biệt, phá cách và thể hiện cá tính riêng.' },\n        { id: 11, text: 'Cảm thụ và phân tích các tác phẩm nghệ thuật.' },\n        { id: 12, text: 'Quan tâm đến các nghề như nhà thiết kế, nhạc sĩ, đạo diễn, nhà báo, content creator.' },\n        { id: 13, text: 'Làm việc dựa trên cảm hứng và trực giác.' },\n        { id: 14, text: 'Tạo ra những thứ mới mẻ, chưa từng có trước đây.' },\n    ],\n  },\n  {\n    code: 'S',\n    name: 'Social - Nhóm Xã hội',\n    description: 'Bạn có thích giao tiếp, kết nối, giảng dạy, và giúp đỡ người khác giải quyết các vấn đề của họ không?',\n    questions: [\n        { id: 1, text: 'Tham gia các hoạt động tình nguyện, các tổ chức phi chính phủ (NGO).' },\n        { id: 2, text: 'Làm gia sư, hướng dẫn học tập cho người khác.' },\n        { id: 3, text: 'Tư vấn, tham vấn cho bạn bè về các vấn đề trong học tập, cuộc sống.' },\n        { id: 4, text: 'Làm các công việc bán thời gian trong ngành dịch vụ (nhà hàng, khách sạn).' },\n        { id: 5, text: 'Theo học các ngành Sư phạm, Tâm lý học, Công tác xã hội, Y tế.' },\n        { id: 6, 'text': 'Tổ chức các sự kiện, hoạt động tập thể cho trường, lớp, câu lạc bộ.' },\n        { id: 7, text: 'Thích làm việc trong môi trường có nhiều người, nhiều sự tương tác.' },\n        { id: 8, text: 'Dễ dàng kết bạn và xây dựng các mối quan hệ.' },\n        { id: 9, text: 'Thuyết trình, nói chuyện trước đám đông.' },\n        { id: 10, text: 'Lắng nghe và thấu hiểu cảm xúc của người khác.' },\n        { id: 11, text: 'Làm việc trong các đội, nhóm, dự án chung.' },\n        { id: 12, text: 'Quan tâm đến các nghề như giáo viên, bác sĩ, chuyên viên tư vấn, nhân viên nhân sự.' },\n        { id: 13, text: 'Chăm sóc, hỗ trợ những người yếu thế trong xã hội.' },\n        { id: 14, text: 'Giải quyết các xung đột, mâu thuẫn một cách hòa bình.' },\n    ],\n  },\n  {\n    code: 'E',\n    name: 'Enterprising - Nhóm Quản lý',\n    description: 'Bạn có thích lãnh đạo, quản lý, thuyết phục và tạo ra ảnh hưởng để đạt được các mục tiêu về kinh doanh hoặc tổ chức không?',\n    questions: [\n        { id: 1, text: 'Làm chủ nhiệm câu lạc bộ, trưởng một dự án.' },\n        { id: 2, text: 'Bắt đầu một dự án kinh doanh nhỏ hoặc bán hàng online.' },\n        { id: 3, text: 'Tham gia các cuộc thi về kinh doanh, marketing, hùng biện.' },\n        { id: 4, text: 'Tranh cử vào các vị trí trong hội sinh viên, đoàn trường.' },\n        { id: 5, text: 'Thuyết phục người khác đầu tư hoặc tham gia vào dự án của mình.' },\n        { id: 6, text: 'Theo học các ngành Quản trị kinh doanh, Marketing, Tài chính, Luật.' },\n        { id: 7, text: 'Đọc sách về kinh doanh, khởi nghiệp, kỹ năng lãnh đạo.' },\n        { id: 8, text: 'Quản lý tài chính cá nhân, lập kế hoạch chi tiêu, đầu tư.' },\n        { id: 9, text: 'Thích đặt ra các mục tiêu đầy tham vọng và chinh phục chúng.' },\n        { id: 10, text: 'Đàm phán, thương lượng để đạt được lợi ích tốt nhất.' },\n        { id: 11, text: 'Xây dựng mạng lưới quan hệ (networking).' },\n        { id: 12, text: 'Quan tâm đến các nghề như doanh nhân, giám đốc, chuyên viên marketing, luật sư, chính trị gia.' },\n        { id: 13, text: 'Chịu trách nhiệm về thành công hay thất bại của một nhóm.' },\n        { id: 14, text: 'Nói trước đám đông và truyền cảm hứng cho mọi người.' },\n    ],\n  },\n  {\n    code: 'C',\n    name: 'Conventional - Nhóm Nghiệp vụ',\n    description: 'Bạn có thích làm việc với dữ liệu, các con số, tuân thủ các quy trình và tạo ra sự ngăn nắp, có tổ chức không?',\n    questions: [\n        { id: 1, text: 'Làm việc với phần mềm văn phòng (Word, Excel, PowerPoint).' },\n        { id: 2, text: 'Lập kế hoạch chi tiết cho một chuyến đi hoặc một dự án.' },\n        { id: 3, text: 'Quản lý chi tiêu cá nhân bằng các ứng dụng hoặc sổ sách.' },\n        { id: 4, text: 'Soạn thảo, sắp xếp, lưu trữ tài liệu một cách khoa học.' },\n        { id: 5, text: 'Theo học các ngành Kế toán, Kiểm toán, Thư viện, Hành chính văn phòng.' },\n        { id: 6, text: 'Kiểm tra lại công việc của mình và người khác để tìm lỗi sai.' },\n        { id: 7, text: 'Làm các công việc đòi hỏi sự cẩn thận, chính xác và chú ý đến chi tiết.' },\n        { id: 8, text: 'Thích làm việc trong môi trường ổn định, có quy trình rõ ràng.' },\n        { id: 9, text: 'Tuân thủ các quy định, thời hạn (deadline).' },\n        { id: 10, text: 'Phân tích và xử lý các bộ dữ liệu lớn.' },\n        { id: 11, text: 'Thực hiện các công việc có tính lặp lại một cách hiệu quả.' },\n        { id: 12, text: 'Quan tâm đến các nghề như kế toán viên, nhân viên ngân hàng, chuyên viên phân tích dữ liệu, thư ký.' },\n        { id: 13, text: 'Nhập liệu, quản lý cơ sở dữ liệu.' },\n        { id: 14, text: 'Tạo ra các báo cáo, biểu đồ từ các số liệu cho trước.' },\n    ],\n  },\n];\n\n\n// =================================================================\n// BỘ CÂU HỎI CHO NGƯỜI ĐI LÀM (23+ TUỔI)\n// =================================================================\nexport const hollandDataDiLam: HollandGroup[] = [\n  {\n    code: 'R',\n    name: 'Realistic - Nhóm Kỹ thuật',\n    description: 'Những người thuộc nhóm này có sở thích và khả năng về kỹ thuật, máy móc, công nghệ. Họ thích làm việc với các vật thể cụ thể, cầm nắm được.',\n    questions: [\n        { id: 1, text: 'Sửa chữa các thiết bị điện, điện tử trong gia đình hoặc công ty.' },\n        { id: 2, text: 'Làm các công việc về cơ khí như tiện, phay, hàn.' },\n        { id: 3, text: 'Lái các loại xe lớn hoặc máy móc công trình.' },\n        { id: 4, text: 'Làm việc ngoài trời (ví dụ: công trình xây dựng, trang trại).' },\n        { id: 5, text: 'Chăm sóc, huấn luyện động vật hoặc làm nông nghiệp.' },\n        { id: 6, text: 'Lắp ráp, chế tạo các sản phẩm cơ khí, đồ gỗ.' },\n        { id: 7, text: 'Sử dụng thành thạo các công cụ, dụng cụ cầm tay.' },\n        { id: 8, text: 'Đọc bản vẽ kỹ thuật, bản vẽ xây dựng.' },\n        { id: 9, text: 'Làm công việc về mộc, thiết kế và thi công nội thất.' },\n        { id: 10, text: 'Làm vườn, thiết kế cảnh quan.' },\n        { id: 11, text: 'Sửa chữa, bảo dưỡng xe máy, ô tô.' },\n        { id: 12, text: 'Tham gia các hoạt động thể chất, thể thao đòi hỏi sức mạnh.' },\n        { id: 13, text: 'Làm trong lĩnh vực an ninh, quốc phòng, phòng cháy chữa cháy.' },\n        { id: 14, text: 'Thám hiểm, khảo sát địa chất hoặc các hoạt động ngoài thiên nhiên.' },\n    ],\n  },\n  {\n    code: 'I',\n    name: 'Investigative - Nhóm Nghiên cứu',\n    description: 'Những người thuộc nhóm này có thiên hướng về quan sát, tìm tòi, khám phá. Họ thích làm việc với các ý tưởng, dữ liệu và giải quyết các vấn đề phức tạp.',\n    questions: [\n        { id: 1, text: 'Thực hiện các thí nghiệm, nghiên cứu trong phòng lab.' },\n        { id: 2, text: 'Đọc sách, tài liệu chuyên sâu về một lĩnh vực nào đó.' },\n        { id: 3, text: 'Làm việc trong môi trường y tế, chẩn đoán bệnh.' },\n        { id: 4, text: 'Phân tích dữ liệu, thống kê để đưa ra các dự báo, quyết định.' },\n        { id: 5, text: 'Giải quyết các vấn đề kỹ thuật phức tạp, tìm ra lỗi hệ thống.' },\n        { id: 6, text: 'Nghiên cứu về thị trường, đối thủ cạnh tranh.' },\n        { id: 7, text: 'Lập trình máy tính, phát triển phần mềm, trí tuệ nhân tạo.' },\n        { id: 8, text: 'Nghiên cứu và phát triển (R&D) sản phẩm mới.' },\n        { id: 9, text: 'Viết báo cáo phân tích, các bài báo khoa học.' },\n        { id: 10, text: 'Tìm hiểu, khám phá các nguyên lý khoa học, kinh tế, xã hội.' },\n        { id: 11, text: 'Sử dụng các công cụ phân tích, chẩn đoán chuyên dụng.' },\n        { id: 12, text: 'Làm việc độc lập, đòi hỏi sự tập trung và tư duy logic cao độ.' },\n        { id: 13, text: 'Nghiên cứu các vấn đề trừu tượng, mang tính học thuật.' },\n        { id: 14, text: 'Điều tra, phân tích nguyên nhân của một sự việc, sự cố.' },\n    ],\n  },\n  {\n    code: 'A',\n    name: 'Artistic - Nhóm Nghệ thuật',\n    description: 'Những người thuộc nhóm này có khả năng sáng tạo, trực giác và trí tưởng tượng phong phú. Họ thích làm việc trong các môi trường không có nhiều quy tắc và thể hiện bản thân qua các sản phẩm nghệ thuật.',\n    questions: [\n        { id: 1, text: 'Vẽ, thiết kế đồ họa, thiết kế sản phẩm.' },\n        { id: 2, text: 'Chơi một loại nhạc cụ, biểu diễn hoặc sáng tác âm nhạc.' },\n        { id: 3, text: 'Viết lách (viết sách, báo, kịch bản, nội dung quảng cáo).' },\n        { id: 4, text: 'Viết blog, làm podcast, sáng tạo nội dung cho mạng xã hội.' },\n        { id: 5, text: 'Chụp ảnh, quay phim chuyên nghiệp.' },\n        { id: 6, text: 'Thiết kế thời trang, thiết kế nội thất.' },\n        { id: 7, text: 'Làm trong ngành sân khấu, điện ảnh (diễn viên, đạo diễn).' },\n        { id: 8, text: 'Làm marketing, quảng cáo, xây dựng thương hiệu.' },\n        { id: 9, text: 'Trình diễn nghệ thuật (ca hát, nhảy múa).' },\n        { id: 10, text: 'Làm việc với tư cách là một nghệ sĩ tự do.' },\n        { id: 11, text: 'Làm các đồ thủ công mỹ nghệ có giá trị cao.' },\n        { id: 12, text: 'Nghĩ ra những ý tưởng, chiến dịch mới, độc đáo cho công ty.' },\n        { id: 13, text: 'Thể hiện ý tưởng, cảm xúc của bản thân một cách sáng tạo.' },\n        { id: 14, text: 'Làm việc trong một môi trường linh hoạt, tự do, không gò bó.' },\n    ],\n  },\n  {\n    code: 'S',\n    name: 'Social - Nhóm Xã hội',\n    description: 'Những người thuộc nhóm này thích làm việc với con người, giúp đỡ, hướng dẫn và chăm sóc người khác. Họ có khả năng về giao tiếp và thấu cảm.',\n    questions: [\n        { id: 1, text: 'Dạy học, đào tạo hoặc huấn luyện người khác.' },\n        { id: 2, text: 'Chăm sóc người bệnh, người già, trẻ em (y tá, điều dưỡng).' },\n        { id: 3, text: 'Tư vấn (hướng nghiệp, tâm lý, pháp luật).' },\n        { id: 4, text: 'Làm công việc trong các tổ chức xã hội, phi lợi nhuận.' },\n        { id: 5, text: 'Làm việc nhóm, hợp tác với nhiều phòng ban, đối tác.' },\n        { id: 6, text: 'Tổ chức các sự kiện, hội thảo, hoạt động kết nối.' },\n        { id: 7, text: 'Làm trong ngành dịch vụ khách hàng, quản lý quan hệ khách hàng.' },\n        { id: 8, 'text': 'Gặp gỡ, nói chuyện, xây dựng mối quan hệ với khách hàng, đối tác.' },\n        { id: 9, text: 'Làm công tác nhân sự (tuyển dụng, đào tạo, phát triển nhân viên).' },\n        { id: 10, text: 'Giúp đỡ đồng nghiệp giải quyết các vấn đề khó khăn trong công việc.' },\n        { id: 11, text: 'Thuyết trình, giới thiệu sản phẩm, dự án trước đám đông.' },\n        { id: 12, text: 'Xây dựng và duy trì các mối quan hệ xã hội tốt đẹp.' },\n        { id: 13, text: 'Làm trong lĩnh vực y tế, giáo dục, phúc lợi xã hội.' },\n        { id: 14, text: 'Giải quyết các mâu thuẫn, xung đột trong tổ chức.' },\n    ],\n  },\n  {\n    code: 'E',\n    name: 'Enterprising - Nhóm Kinh doanh',\n    description: 'Những người thuộc nhóm này có khả năng lãnh đạo, thuyết phục và gây ảnh hưởng đến người khác. Họ thích kinh doanh, quản lý và đặt ra các mục tiêu để đạt được thành công.',\n    questions: [\n        { id: 1, text: 'Bán một sản phẩm, dịch vụ hoặc một ý tưởng.' },\n        { id: 2, text: 'Quản lý một đội nhóm, một phòng ban hoặc một dự án.' },\n        { id: 3, text: 'Thuyết phục, tranh luận để bảo vệ quan điểm của mình.' },\n        { id: 4, text: 'Phát biểu, diễn thuyết trước các nhà đầu tư, khách hàng.' },\n        { id: 5, text: 'Khởi nghiệp, điều hành một công ty riêng.' },\n        { id: 6, text: 'Đàm phán, thương lượng các hợp đồng, thương vụ kinh doanh.' },\n        { id: 7, text: 'Đặt ra các mục tiêu kinh doanh (KPIs) và dẫn dắt đội nhóm hoàn thành.' },\n        { id: 8, text: 'Tìm kiếm cơ hội đầu tư, gia tăng tài sản.' },\n        { id: 9, text: 'Tổ chức, điều hành một chiến dịch marketing, bán hàng.' },\n        { id: 10, text: 'Chấp nhận rủi ro có tính toán để đạt được lợi nhuận cao.' },\n        { id: 11, text: 'Làm việc trong môi trường cạnh tranh, áp lực cao.' },\n        { id: 12, text: 'Gây ảnh hưởng, tạo động lực cho người khác.' },\n        { id: 13, text: 'Đưa ra các quyết định chiến lược quan trọng cho tổ chức.' },\n        { id: 14, text: 'Làm lãnh đạo trong một tổ chức, công ty.' },\n    ],\n  },\n  {\n    code: 'C',\n    name: 'Conventional - Nhóm Quy củ',\n    description: 'Những người thuộc nhóm này có khả năng làm việc với các con số, dữ liệu và làm theo các chỉ dẫn, quy trình có sẵn. Họ thích sự rõ ràng, chính xác và có tổ chức.',\n    questions: [\n        { id: 1, text: 'Làm việc với các con số, bảng tính excel, phần mềm kế toán.' },\n        { id: 2, text: 'Sắp xếp hồ sơ, tài liệu, dữ liệu một cách có hệ thống.' },\n        { id: 3, text: 'Làm các công việc đòi hỏi sự chính xác và chú ý đến từng chi tiết.' },\n        { id: 4, text: 'Lập kế hoạch, theo dõi tiến độ dự án.' },\n        { id: 5, text: 'Làm công việc về kế toán, kiểm toán, tài chính.' },\n        { id: 6, text: 'Làm việc trong môi trường văn phòng, có quy củ, nề nếp.' },\n        { id: 7, text: 'Tuân thủ các quy trình, quy định, chính sách của công ty.' },\n        { id: 8, text: 'Kiểm tra, đối chiếu chứng từ, số liệu để đảm bảo không có sai sót.' },\n        { id: 9, text: 'Nhập liệu, xử lý và quản lý cơ sở dữ liệu khách hàng, sản phẩm.' },\n        { id: 10, text: 'Làm việc với các hệ thống phân loại, lưu trữ thông tin.' },\n        { id: 11, text: 'Soạn thảo văn bản, hợp đồng, báo cáo theo mẫu có sẵn.' },\n        { id: 12, text: 'Làm công việc có tính chất ổn định, lặp đi lặp lại.' },\n        { id: 13, text: 'Làm thủ quỹ, quản lý dòng tiền, thực hiện các giao dịch ngân hàng.' },\n        { id: 14, text: 'Làm các công việc hành chính, văn thư, hỗ trợ cho các bộ phận khác.' },\n    ],\n  },\n];\n",
  "src/lib/industry-data.ts": "\nexport type Industry = {\n    name: string;\n    slug: string;\n    keywords: string[];\n};\n\nconst defaultIndustries: Industry[] = [\n    { name: 'Công nghệ thông tin', slug: 'it', keywords: ['it', 'công nghệ thông tin', 'software', 'phần mềm', 'developer', 'lập trình'] },\n    { name: 'Cơ khí', slug: 'co-khi', keywords: ['cơ khí', 'chế tạo máy', 'tiện', 'phay', 'bào', 'hàn', 'hàn xì', 'CNC', 'vận hành máy', 'bảo trì', 'sửa chữa', 'đứng máy', 'luyện kim'] },\n    { name: 'Dệt may', slug: 'det-may', keywords: ['dệt may', 'may mặc', 'thời trang', 'sợi', 'nhuộm', 'hoàn tất vải'] },\n    { name: 'Điện tử', slug: 'dien-tu', keywords: ['điện tử', 'lắp ráp', 'linh kiện', 'kiểm tra', 'QC', 'QA', 'sản xuất'] },\n    { name: 'Logistics', slug: 'logistics', keywords: ['logistics', 'vận tải', 'kho bãi', 'xuất nhập khẩu', 'supply chain', 'chuỗi cung ứng'] }\n];\n\nexport const industriesByJobType: { [key: string]: Industry[] } = {\n    'Thực tập sinh': [\n      { name: 'Ngư nghiệp', slug: 'ngu-nghiep-tts', keywords: ['ngư nghiệp', 'đánh bắt', 'nuôi trồng thủy sản'] },\n      { name: 'Nông nghiệp', slug: 'nong-nghiep-tts', keywords: ['nông nghiệp', 'trồng trọt', 'chăn nuôi'] },\n      { name: 'Thực phẩm', slug: 'thuc-pham-tts', keywords: ['thực phẩm', 'chế biến', 'đóng gói', 'cơm hộp'] },\n      { name: 'Sản xuất, dịch vụ tổng hợp', slug: 'san-xuat-dich-vu-tong-hop-tts', keywords: ['sản xuất', 'dịch vụ', 'tổng hợp', 'đúc', 'in ấn'] },\n      { name: 'Cơ khí, kim loại', slug: 'co-khi-kim-loai-tts', keywords: ['cơ khí', 'kim loại', 'hàn', 'tiện', 'phay', 'dập', 'gia công'] },\n      { name: 'Xây dựng', slug: 'xay-dung-tts', keywords: ['xây dựng', 'giàn giáo', 'cốp pha', 'hoàn thiện nội thất'] },\n      { name: 'May mặc', slug: 'may-mac-tts', keywords: ['may mặc', 'dệt', 'may công nghiệp'] },\n    ],\n    'Kỹ năng đặc định': [\n      { name: 'Ngư nghiệp', slug: 'ngu-nghiep-tokutei', keywords: ['ngư nghiệp', 'nuôi trồng', 'chế biến thủy sản'] },\n      { name: 'Nông nghiệp', slug: 'nong-nghiep-tokutei', keywords: ['nông nghiệp', 'trồng trọt', 'chăn nuôi'] },\n      { name: 'Nhà hàng', slug: 'nha-hang-tokutei', keywords: ['nhà hàng', 'dịch vụ ăn uống', 'phục vụ', 'nấu ăn'] },\n      { name: 'Thực phẩm', slug: 'thuc-pham-tokutei', keywords: ['thực phẩm', 'sản xuất đồ uống', 'chế biến'] },\n      { name: 'Sản xuất, dịch vụ tổng hợp', slug: 'san-xuat-dich-vu-tong-hop-tokutei', keywords: ['sản xuất', 'dịch vụ', 'giấy', 'in ấn', 'nhựa'] },\n      { name: 'Điện, điện tử', slug: 'dien-dien-tu-tokutei', keywords: ['điện', 'điện tử', 'lắp ráp', 'gia công'] },\n      { name: 'Chế tạo Vật liệu', slug: 'che-tao-vat-lieu-tokutei', keywords: ['chế tạo', 'vật liệu', 'đúc', 'rèn', 'sơn'] },\n      { name: 'Cơ khí, chế tạo máy', slug: 'co-khi-che-tao-may-tokutei', keywords: ['cơ khí', 'chế tạo máy', 'hoàn thiện', 'kiểm tra máy móc'] },\n      { name: 'Ô tô', slug: 'o-to-tokutei', keywords: ['ô tô', 'bảo dưỡng', 'sửa chữa'] },\n      { name: 'Hàng không Vận tải Xây dựng', slug: 'hang-khong-van-tai-xay-dung-tokutei', keywords: ['hàng không', 'vận tải', 'xây dựng', 'sân bay', 'bốc dỡ'] },\n      { name: 'Vệ sinh toà nhà', slug: 've-sinh-toa-nha-tokutei', keywords: ['vệ sinh', 'tòa nhà', 'làm sạch'] },\n      { name: 'Lưu trú, khách sạn', slug: 'luu-tru-khach-san-tokutei', keywords: ['lưu trú', 'khách sạn', 'lễ tân', 'phục vụ'] },\n      { name: 'Điều dưỡng', slug: 'dieu-duong-tokutei', keywords: ['điều dưỡng', 'chăm sóc người già', 'hộ lý'] },\n    ],\n    'Kỹ sư, tri thức': [\n      { name: 'Nông lâm ngư nghiệp', slug: 'nong-lam-ngu-nghiep-ks', keywords: ['nông nghiệp', 'lâm nghiệp', 'ngư nghiệp'] },\n      { name: 'Thực phẩm', slug: 'thuc-pham-ks', keywords: ['thực phẩm', 'đồ uống'] },\n      { name: 'Sản xuất, chế tạo, công nghệ', slug: 'san-xuat-cong-nghe-ks', keywords: ['sản xuất', 'chế tạo', 'công nghệ'] },\n      { name: 'Cơ khí, máy móc', slug: 'co-khi-may-moc-ks', keywords: ['cơ khí', 'máy móc'] },\n      { name: 'Công nghệ ô tô', slug: 'cong-nghe-o-to-ks', keywords: ['ô tô', 'công nghệ'] },\n      { name: 'Vận chuyển hàng hóa', slug: 'van-chuyen-hang-hoa-ks', keywords: ['vận chuyển', 'hàng hóa'] },\n      { name: 'Xây dựng', slug: 'xay-dung-ks', keywords: ['xây dựng', 'kỹ sư xây dựng', 'giám sát'] },\n      { name: 'Khách sạn, lưu trú', slug: 'khach-san-luu-tru-ks', keywords: ['khách sạn', 'lưu trú'] },\n      { name: 'Y tế, điều dưỡng', slug: 'y-te-dieu-duong-ks', keywords: ['y tế', 'điều dưỡng'] },\n      { name: 'Kinh doanh, kinh tế', slug: 'kinh-doanh-kinh-te-ks', keywords: ['kinh doanh', 'kinh tế'] },\n      { name: 'Tài chính, kế toán, bảo hiểm', slug: 'tai-chinh-ke-toan-ks', keywords: ['tài chính', 'kế toán', 'bảo hiểm'] },\n      { name: 'Báo chí, truyền thông, marketing', slug: 'bao-chi-marketing-ks', keywords: ['báo chí', 'truyền thông', 'marketing'] },\n      { name: 'Công nghệ thông tin', slug: 'it-ks', keywords: ['công nghệ thông tin', 'IT', 'lập trình', 'phần mềm'] },\n      { name: 'Nghiên cứu, phân tích', slug: 'nghien-cuu-phan-tich-ks', keywords: ['nghiên cứu', 'phân tích'] },\n      { name: 'Giáo dục, đào tạo Hành chính, văn phòng', slug: 'giao-duc-van-phong-ks', keywords: ['giáo dục', 'đào tạo', 'hành chính', 'văn phòng'] },\n      { name: 'Pháp lý', slug: 'phap-ly-ks', keywords: ['pháp lý', 'luật sư'] },\n      { name: 'Nghệ thuật, nghệ sĩ', slug: 'nghe-thuat-ks', keywords: ['nghệ thuật', 'nghệ sĩ'] },\n      { name: 'Thể dục thể thao', slug: 'the-thao-ks', keywords: ['thể dục', 'thể thao'] },\n      { name: 'Nghề có kỹ năng chuyên nghiệp', slug: 'nghe-chuyen-nghiep-ks', keywords: ['chuyên nghiệp', 'kỹ năng'] },\n      { name: 'Việc làm bán chuyên nghiệp', slug: 'viec-lam-ban-chuyen-nghiep-ks', keywords: ['bán chuyên nghiệp'] }\n    ],\n    'Default': defaultIndustries,\n};\n",
  "src/lib/mbti-data.ts": "export type MbtiDimension = 'EI' | 'SN' | 'TF' | 'JP';\n\nexport type MbtiQuestion = {\n  id: number;\n  text: string;\n  dimension: MbtiDimension;\n  direction: 1 | -1; // 1 for the first letter (e.g., E), -1 for the second (e.g., I)\n};\n\nexport const mbtiQuestions: MbtiQuestion[] = [\n  // EI Dimension\n  { id: 1, text: 'Bạn cảm thấy tràn đầy năng lượng hơn sau khi giao tiếp với nhiều người.', dimension: 'EI', direction: 1 },\n  { id: 2, text: 'Bạn thích các hoạt động đơn độc hơn là các sự kiện xã hội.', dimension: 'EI', direction: -1 },\n  { id: 3, text: 'Trong các cuộc thảo luận, bạn thường là người nói nhiều hơn là lắng nghe.', dimension: 'EI', direction: 1 },\n  { id: 4, text: 'Bạn cần một khoảng thời gian yên tĩnh cho riêng mình để \"sạc lại pin\".', dimension: 'EI', direction: -1 },\n  { id: 5, text: 'Bạn dễ dàng bắt chuyện với người lạ.', dimension: 'EI', direction: 1 },\n\n  // SN Dimension\n  { id: 6, text: 'Bạn tập trung vào thực tế và những gì đang xảy ra hơn là các khả năng trong tương lai.', dimension: 'SN', direction: 1 },\n  { id: 7, text: 'Bạn bị hấp dẫn bởi những ý tưởng và khái niệm trừu tượng.', dimension: 'SN', direction: -1 },\n  { id: 8, text: 'Bạn tin tưởng vào kinh nghiệm thực tế hơn là những linh cảm.', dimension: 'SN', direction: 1 },\n  { id: 9, text: 'Bạn thường suy nghĩ về ý nghĩa sâu xa và các mô hình ẩn sau sự vật.', dimension: 'SN', direction: -1 },\n  { id: 10, text: 'Khi giải quyết vấn đề, bạn thích làm theo các bước cụ thể, đã được kiểm chứng.', dimension: 'SN', direction: 1 },\n\n  // TF Dimension\n  { id: 11, text: 'Bạn đưa ra quyết định dựa trên logic và sự thật khách quan hơn là cảm xúc cá nhân.', dimension: 'TF', direction: 1 },\n  { id: 12, text: 'Bạn luôn xem xét cảm xúc của người khác trước khi đưa ra quyết định.', dimension: 'TF', direction: -1 },\n  { id: 13, text: 'Bạn coi trọng sự công bằng và nhất quán hơn là sự hòa hợp.', dimension: 'TF', direction: 1 },\n  { id: 14, text: 'Bạn dễ dàng đồng cảm và đặt mình vào vị trí của người khác.', dimension: 'TF', direction: -1 },\n  { id: 15, text: 'Bạn thấy việc nói ra sự thật phũ phàng quan trọng hơn là giữ gìn cảm xúc của mọi người.', dimension: 'TF', direction: 1 },\n\n  // JP Dimension\n  { id: 16, text: 'Bạn thích có kế hoạch rõ ràng và tuân thủ nó hơn là hành động tùy hứng.', dimension: 'JP', direction: 1 },\n  { id: 17, text: 'Bạn thích giữ các lựa chọn của mình mở và linh hoạt với những thay đổi bất ngờ.', dimension: 'JP', direction: -1 },\n  { id: 18, text: 'Bạn cảm thấy hài lòng khi hoàn thành công việc và gạch nó ra khỏi danh sách.', dimension: 'JP', direction: 1 },\n  { id: 19, text: 'Bạn xem deadline như một gợi ý hơn là một điều bắt buộc phải tuân theo.', dimension: 'JP', direction: -1 },\n  { id: 20, text: 'Ngôi nhà và nơi làm việc của bạn rất gọn gàng và có tổ chức.', dimension: 'JP', direction: 1 },\n];\n\nexport const mbtiProfiles: { [key: string]: any } = {\n  ISTJ: {\n    name: 'Người Thanh tra (The Inspector)',\n    description: 'Thực tế, có trách nhiệm và đáng tin cậy. Họ tôn trọng sự thật, logic và làm việc chăm chỉ để hoàn thành nhiệm vụ.',\n    careers: ['Kế toán', 'Kiểm toán', 'Quản trị viên cơ sở dữ liệu', 'Kỹ sư', 'Công chức'],\n  },\n  ISFJ: {\n    name: 'Người Bảo vệ (The Protector)',\n    description: 'Tận tâm, ấm áp và có trách nhiệm. Họ rất quan tâm đến việc chăm sóc người khác và tạo ra một môi trường hài hòa.',\n    careers: ['Y tá/Điều dưỡng', 'Giáo viên', 'Nhân viên công tác xã hội', 'Quản lý nhân sự'],\n  },\n  INFJ: {\n    name: 'Người Cố vấn (The Counselor)',\n    description: 'Sâu sắc, có tầm nhìn và giàu lòng trắc ẩn. Họ tìm kiếm ý nghĩa trong các mối quan hệ và luôn nỗ lực giúp đỡ người khác phát huy tiềm năng.',\n    careers: ['Nhà tâm lý học', 'Nhà văn', 'Chuyên viên tư vấn', 'Nghệ sĩ'],\n  },\n  INTJ: {\n    name: 'Nhà Kiến tạo (The Mastermind)',\n    description: 'Chiến lược, logic và có óc phân tích. Họ có khả năng nhìn thấy các mô hình và xây dựng các kế hoạch dài hạn phức tạp.',\n    careers: ['Nhà khoa học', 'Chiến lược gia kinh doanh', 'Lập trình viên', 'Luật sư'],\n  },\n  ISTP: {\n    name: 'Người Thợ thủ công (The Craftsman)',\n    description: 'Linh hoạt, thực tế và giỏi xử lý các vấn đề tức thời. Họ thích tìm hiểu cách mọi thứ hoạt động và sử dụng công cụ để giải quyết vấn đề.',\n    careers: ['Kỹ sư cơ khí', 'Phi công', 'Lính cứu hỏa', 'Thợ sửa chữa chuyên nghiệp'],\n  },\n  ISFP: {\n    name: 'Người Nghệ sĩ (The Artist)',\n    description: 'Dịu dàng, nhạy cảm và sống cho hiện tại. Họ có con mắt thẩm mỹ và thích thể hiện bản thân qua các hình thức sáng tạo.',\n    careers: ['Nhà thiết kế đồ họa', 'Nhạc sĩ', 'Đầu bếp', 'Nhà thiết kế thời trang'],\n  },\n  INFP: {\n    name: 'Người Hòa giải (The Mediator)',\n    description: 'Lý tưởng hóa, sáng tạo và được dẫn dắt bởi các giá trị cá nhân. Họ muốn tạo ra một thế giới tốt đẹp hơn.',\n    careers: ['Nhà văn', 'Nhà hoạt động xã hội', 'Chuyên viên tư vấn', 'Nhà tâm lý học'],\n  },\n  INTP: {\n    name: 'Nhà Tư duy (The Thinker)',\n    description: 'Logic, sáng tạo và thích khám phá các lý thuyết phức tạp. Họ bị cuốn hút bởi các ý tưởng và luôn tìm kiếm sự hiểu biết.',\n    careers: ['Nhà khoa học', 'Giáo sư đại học', 'Nhà phân tích hệ thống', 'Triết gia'],\n  },\n  ESTP: {\n    name: 'Người Năng động (The Dynamo)',\n    description: 'Hướng ngoại, thực tế và thích hành động. Họ sống trong hiện tại và nhanh chóng nắm bắt cơ hội để giải quyết vấn đề.',\n    careers: ['Doanh nhân', 'Nhân viên bán hàng', 'Nhà môi giới', 'Nhân viên cứu hộ'],\n  },\n  ESFP: {\n    name: 'Người Trình diễn (The Performer)',\n    description: 'Sôi nổi, hòa đồng và yêu thích sự chú ý. Họ mang lại niềm vui và năng lượng cho mọi người xung quanh.',\n    careers: ['Diễn viên', 'MC', 'Tổ chức sự kiện', 'Hướng dẫn viên du lịch'],\n  },\n  ENFP: {\n    name: 'Người Truyền cảm hứng (The Champion)',\n    description: 'Nhiệt tình, sáng tạo và có khả năng kết nối con người. Họ luôn nhìn thấy tiềm năng và truyền cảm hứng cho người khác.',\n    careers: ['Chuyên viên Marketing/PR', 'Nhà báo', 'Chuyên gia nhân sự', 'Doanh nhân xã hội'],\n  },\n  ENTP: {\n    name: 'Người Nhìn xa (The Visionary)',\n    description: 'Thông minh, nhanh trí và thích tranh luận. Họ bị cuốn hút bởi những ý tưởng mới và thích khám phá các khả năng.',\n    careers: ['Luật sư', 'Nhà phát minh', 'Doanh nhân', 'Chuyên gia tư vấn chiến lược'],\n  },\n  ESTJ: {\n    name: 'Người Giám sát (The Supervisor)',\n    description: 'Thực tế, có tổ chức và quyết đoán. Họ xuất sắc trong việc quản lý con người và các hệ thống để đạt được kết quả.',\n    careers: ['Quản lý dự án', 'Giám đốc vận hành (COO)', 'Sĩ quan quân đội', 'Thẩm phán'],\n  },\n  ESFJ: {\n    name: 'Người Chăm sóc (The Provider)',\n    description: 'Hòa đồng, tận tâm và thích giúp đỡ người khác một cách thiết thực. Họ là trung tâm của các cộng đồng.',\n    careers: ['Quản lý nhân sự', 'Giáo viên', 'Chuyên viên chăm sóc khách hàng', 'Tổ chức sự kiện'],\n  },\n  ENFJ: {\n    name: 'Người Dẫn dắt (The Protagonist)',\n    description: 'Lôi cuốn, truyền cảm hứng và có khả năng lãnh đạo bẩm sinh. Họ muốn tạo ra sự thay đổi tích cực cho cộng đồng.',\n    careers: ['Chính trị gia', 'Giáo viên', 'Giám đốc bán hàng', 'Nhà ngoại giao'],\n  },\n  ENTJ: {\n    name: 'Nhà Lãnh đạo (The Commander)',\n    description: 'Quyết đoán, có tầm nhìn và là nhà lãnh đạo bẩm sinh. Họ giỏi trong việc xác định mục tiêu và huy động nguồn lực để đạt được chúng.',\n    careers: ['Giám đốc điều hành (CEO)', 'Luật sư', 'Nhà tư vấn quản lý', 'Lãnh đạo quân sự'],\n  },\n};\n",
  "src/lib/mock-data.ts": "\nexport interface Job {\n    id: string;\n    isRecording: boolean;\n    image: {\n      src: string;\n      type: 'minhhoa' | 'thucte';\n    };\n    likes: string;\n    salary: {\n      actual?: string;\n      basic: string;\n    };\n    title: string;\n    support?: string[];\n    recruiter: {\n      name: string;\n      avatar: string;\n      company: string;\n    };\n    status: 'Đang tuyển' | 'Tạm dừng';\n    interviewDate: string;\n    interviewRounds: number;\n    netFee: string;\n    target: string;\n    backFee?: string;\n    tags: string[];\n    applicants?: {\n        count: number;\n        avatars: string[];\n    };\n    postedTime: string;\n}\n  \nexport const jobData: Job[] = [\n    {\n        id: 'JP-KRSBA015',\n        isRecording: true,\n        image: { src: 'https://placehold.co/600x400.png', type: 'minhhoa' },\n        likes: '8k2',\n        salary: { actual: '25,5tr', basic: '30tr' },\n        title: 'Thực tập sinh 3 năm, Chế biến thực phẩm, Nagasaki, 3 Nữ, 18 - 35 tuổ...',\n        support: ['lành nghề'],\n        recruiter: { name: 'Nguyễn Thị Ngân', avatar: 'https://placehold.co/32x32.png', company: 'Hoàng Long H...' },\n        status: 'Đang tuyển',\n        interviewDate: '19/02/2024',\n        interviewRounds: 3,\n        netFee: '110tr(4k2)',\n        target: '5tr',\n        tags: ['Cặp đôi', 'Có bằng lái', 'Hỗ trợ chỗ ở'],\n        postedTime: '12:58 06/10/2024',\n    },\n    {\n        id: 'JP-ACABA055',\n        isRecording: true,\n        image: { src: 'https://placehold.co/600x400.png', type: 'thucte' },\n        likes: '1',\n        salary: { basic: '30tr' },\n        title: 'Kỹ sư, tri thức đầu Nhật có tiếng, N3, N2, Công nghệ thông tin, Kỹ sư cầu nối, Nam, 22-32 tuổi, Tuyển nhân viê...',\n        support: ['lành nghề'],\n        recruiter: { name: 'Của bạn', avatar: 'https://placehold.co/32x32.png', company: '<chưa rõ>' },\n        status: 'Tạm dừng',\n        interviewDate: '19/02/2024',\n        interviewRounds: 3,\n        netFee: 'Liên hệ',\n        target: '',\n        backFee: '12tr',\n        tags: ['Cặp đôi', 'Có bằng lái'],\n        applicants: {\n            count: 3,\n            avatars: ['https://placehold.co/24x24.png', 'https://placehold.co/24x24.png', 'https://placehold.co/24x24.png'],\n        },\n        postedTime: '12:58 06/10/2024',\n    },\n    {\n        id: 'JP-ATXAA015',\n        isRecording: true,\n        image: { src: 'https://placehold.co/600x400.png', type: 'minhhoa' },\n        likes: '5k1',\n        salary: { actual: '26tr', basic: '31tr' },\n        title: 'Tuyển 10 nữ dán giấy tường nội thất tại Fukuoka, Nhật Bản. Lương 32tr/tháng.',\n        support: [],\n        recruiter: { name: 'Trần Văn Mạnh', avatar: 'https://placehold.co/32x32.png', company: 'Vinamex' },\n        status: 'Đang tuyển',\n        interviewDate: '25/02/2024',\n        interviewRounds: 2,\n        netFee: '100tr',\n        target: '10tr',\n        tags: ['Hỗ trợ chỗ ở'],\n        postedTime: '11:30 06/10/2024',\n    },\n    {\n        id: 'JP-KBSBA045',\n        isRecording: false,\n        image: { src: 'https://placehold.co/600x400.png', type: 'thucte' },\n        likes: '12k',\n        salary: { basic: '29tr' },\n        title: 'Kỹ sư cơ khí làm việc tại Osaka, yêu cầu N4, có kinh nghiệm vận hành máy phay CNC.',\n        support: ['lành nghề'],\n        recruiter: { name: 'Lê Thuỳ Trang', avatar: 'https://placehold.co/32x32.png', company: 'Esuhai' },\n        status: 'Đang tuyển',\n        interviewDate: '05/03/2024',\n        interviewRounds: 2,\n        netFee: 'Liên hệ',\n        target: '2tr',\n        tags: ['Có bằng lái'],\n        applicants: {\n            count: 5,\n            avatars: ['https://placehold.co/24x24.png', 'https://placehold.co/24x24.png', 'https://placehold.co/24x24.png'],\n        },\n        postedTime: '10:05 06/10/2024',\n    },\n    {\n      id: 'JP-XYZ001',\n      isRecording: false,\n      image: { src: 'https://placehold.co/600x400.png', type: 'minhhoa'},\n      likes: '3k5',\n      salary: { actual: '28tr', basic: '33tr'},\n      title: 'Tuyển dụng 5 Nam TTS Hàn xì làm việc tại Aichi. Yêu cầu có kinh nghiệm.',\n      support: [],\n      recruiter: { name: 'Hoàng An', avatar: 'https://placehold.co/32x32.png', company: 'JapanWorks'},\n      status: 'Đang tuyển',\n      interviewDate: '15/03/2024',\n      interviewRounds: 2,\n      netFee: '105tr',\n      target: '8tr',\n      tags: ['Tay nghề cao'],\n      postedTime: '09:00 07/10/2024',\n    }\n];\n",
  "src/lib/utils.ts": "import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n",
  "tailwind.config.ts": "import type {Config} from 'tailwindcss';\n\nexport default {\n  darkMode: ['class'],\n  content: [\n    './src/pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/components/**/*.{js,ts,jsx,tsx,mdx}',\n    './src/app/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    container: {\n      center: true,\n      padding: '2rem',\n      screens: {\n        '2xl': '1400px',\n      },\n    },\n    extend: {\n      fontFamily: {\n        body: ['Montserrat', 'sans-serif'],\n        headline: ['Montserrat', 'sans-serif'],\n        code: ['monospace'],\n      },\n      colors: {\n        background: 'hsl(var(--background))',\n        foreground: 'hsl(var(--foreground))',\n        card: {\n          DEFAULT: 'hsl(var(--card))',\n          foreground: 'hsl(var(--card-foreground))',\n        },\n        popover: {\n          DEFAULT: 'hsl(var(--popover))',\n          foreground: 'hsl(var(--popover-foreground))',\n        },\n        primary: {\n          DEFAULT: 'hsl(var(--primary))',\n          foreground: 'hsl(var(--primary-foreground))',\n        },\n        secondary: {\n          DEFAULT: 'hsl(var(--secondary))',\n          foreground: 'hsl(var(--secondary-foreground))',\n        },\n        muted: {\n          DEFAULT: 'hsl(var(--muted))',\n          foreground: 'hsl(var(--muted-foreground))',\n        },\n        accent: {\n          DEFAULT: 'hsl(var(--accent))',\n          foreground: 'hsl(var(--accent-foreground))',\n        },\n        destructive: {\n          DEFAULT: 'hsl(var(--destructive))',\n          foreground: 'hsl(var(--destructive-foreground))',\n        },\n        border: 'hsl(var(--border))',\n        input: 'hsl(var(--input))',\n        ring: 'hsl(var(--ring))',\n        chart: {\n          '1': 'hsl(var(--chart-1))',\n          '2': 'hsl(var(--chart-2))',\n          '3': 'hsl(var(--chart-3))',\n          '4': 'hsl(var(--chart-4))',\n          '5': 'hsl(var(--chart-5))',\n        },\n      },\n      borderRadius: {\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      keyframes: {\n        'accordion-down': {\n          from: {\n            height: '0',\n          },\n          to: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n        },\n        'accordion-up': {\n          from: {\n            height: 'var(--radix-accordion-content-height)',\n          },\n          to: {\n            height: '0',\n          },\n        },\n      },\n      animation: {\n        'accordion-down': 'accordion-down 0.2s ease-out',\n        'accordion-up': 'accordion-up 0.2s ease-out',\n      },\n    },\n  },\n  plugins: [require('tailwindcss-animate')],\n} satisfies Config;\n",
  "tsconfig.json": "\n{\n  \"compilerOptions\": {\n    \"target\": \"ES2017\",\n    \"lib\": [\"dom\", \"dom.iterable\", \"esnext\"],\n    \"allowJs\": true,\n    \"skipLibCheck\": true,\n    \"strict\": true,\n    \"noEmit\": true,\n    \"esModuleInterop\": true,\n    \"module\": \"esnext\",\n    \"moduleResolution\": \"bundler\",\n    \"resolveJsonModule\": true,\n    \"isolatedModules\": true,\n    \"jsx\": \"preserve\",\n    \"incremental\": true,\n    \"plugins\": [\n      {\n        \"name\": \"next\"\n      }\n    ],\n    \"paths\": {\n      \"@/*\": [\"./src/*\"]\n    }\n  },\n  \"include\": [\"next-env.d.ts\", \"**/*.ts\", \"**/*.tsx\", \".next/types/**/*.ts\"],\n  \"exclude\": [\"node_modules\"]\n}\n\n    "
}

    